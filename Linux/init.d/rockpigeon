#!/usr/bin/bash
#
### BEGIN INIT INFO
# Provides:		rockpigeon
# Required-Start:	postgresql
# Required-Stop:	postgresql
# Default-Start:	2 3 4 5
# Default-Stop:		1
# Short-Description:	RockPigeon WITSML Server
# Description:	Provides RockPigeon WITSML Server startup and shutdown script. Requires PostgreSQL server.
# FileTarget:	/etc/init.d/rockpigeon
# FileOwner:	sigmastream.sigmastream
# FilePerms:	0755
#
# chkconfig:	2345 97 06
### END INIT INFO

# initialization
# adjust these variables to your environment
RP_HOME=/apps/rpserver
rockpigeon_home=$(readlink ${RP_HOME})
rockpigeon_user=sigmastream
export TELNET_PORT=12612
JAVA_H=$rockpigeon_home/jdk-11/bin/java
SCRIPTDIR=/home/sigmastream/rockpigeon/rockpigeon-server/tools/scripts
FD_LIMIT=80000

# Instead of using ENVFILE you can set JAVA_home, rockpigeon_home and add JAVA_home/bin to PATH
# in this case you can comment the source lines for ENVFILE below
# detected some problems with Hardy Heron ubuntu using the bash source command
ENVFILE=$rockpigeon_home/utils/myEnvironment.sh

# . /etc/init.d/functions
 
RETVAL=0
rockpigeonstatus=
MAXITERATIONS=60

getrockpigeonstatus() {
    rockpigeonstatusstring=$(pgrep -f "$rockpigeon_home")
    # echo $rockpigeonstatusstring | grep -q ${rockpigeon_home}
    rockpigeonstatus=$?
}

start () {
    getrockpigeonstatus
    if [ $rockpigeonstatus -eq 0 ] ; then
        echo "[!] RockPigeon is already running.!"
        return 1
    fi
    echo -n "[+] Starting RockPigeon Server:: "
    ulimit -l unlimited
    ulimit -u 65535
    ulimit -n "$FD_LIMIT"
    cd $rockpigeon_home/utils
    . $ENVFILE 
    export LOGFILE=$rockpigeon_home/log/KingFisher.`date +%Y-%m-%d`.log
    su $rockpigeon_user -c "mkdir -p $rockpigeon_home/log"
    su $rockpigeon_user -c "export TELNET_PORT=$TELNET_PORT;cd $rockpigeon_home;$rockpigeon_home/rockpigeon-server.sh &> $LOGFILE &"
    RETVAL=$?
    if [ $RETVAL -eq 0 ] ; then
        # wait for server to be confirmed as started in logfile
        STATUSTEST=0
        ITERATIONS=0
        while [ $STATUSTEST -eq 0 ] ; do
            sleep 2
            cat $LOGFILE | grep -q '.*LoggedSessionListener.contextInitialized: context initialized.*' && STATUSTEST=1
            echo -n "."
            ITERATIONS=`expr $ITERATIONS + 1`
            if [ $ITERATIONS -gt $MAXITERATIONS ]
                then
                break
            fi
        done
        if [ $STATUSTEST -eq 0 ]
        then
            echo "[#] Service hasn't started within the timeout allowed, please review file $LOGFILE to see the status of the service"
        else
            echo "[#] Service started"
        fi
        echo
    else
        echo "[!] Service not started"
    echo
    fi
    RETVAL=$?
    return $RETVAL
}

stop () {
    getrockpigeonstatus
    if [ $rockpigeonstatus -ne 0 ] ; then
	  echo "[!] RockPigeon is already stopped"
	  return 1
    fi
    echo -n "[+] Stopping RockPigeon Server: "
    cd $rockpigeon_home/utils
    . $ENVFILE
    # try shutdown from OSGi console, then direct kill with signal 15, then signal 9
    echo "[+] Trying shutdown from system console"
    ( echo exit; echo y; sleep 5 ) | telnet localhost ${TELNET_PORT} > /dev/null 2>&1
    getrockpigeonstatus
    if [ $rockpigeonstatus -ne 0 ] ; then
        echo "[#] Service stopped with system shutdown"
    else
        echo "[+] Trying direct kill with signal -15"
        kill -15 $(pgrep -f "$rockpigeon_home")
        sleep 5
        getrockpigeonstatus
        if [ $rockpigeonstatus -ne 0 ] ; then
            echo "[#] Service stopped with kill -15"
        else
            echo "[+] Trying direct kill with signal -9"
            kill -9 $(pgrep -f "$rockpigeon_home")
            sleep 5
            getrockpigeonstatus
            if [ $rockpigeonstatus -ne 0 ] ; then
                echo "[#] Service stopped with kill -9"
            else
                echo "[!] Service hasn't stopped"
            fi
        fi
    fi
    return $RETVAL
}

restart () {
    stop
    sleep 2
    start
}

condrestart () {
    getrockpigeonstatus
    if [ $rockpigeonstatus -eq 0 ] ; then
	   restart
    fi
}

######
generatekeycode() {
   echo "[+] Generating application secret token..."

   if [ -f ${rockpigeon_home}/key-generator-2.1.0.jar ]
   then
      echo ""
      echo "-----------------------------------------------------------------------------------------------"
      ${JAVA_H} -jar ${rockpigeon_home}/key-generator-2.1.0.jar
      echo "-----------------------------------------------------------------------------------------------"
      echo ""
   else
      echo "[!] Can't find keygenerator file in ${rockpigeon_home}, please contact to support@sigmastream.com"
      exit 1
   fi
   }

applylicensetoken() {
    echo "[+] Verifying licensekey file..."

    if [ -f ${rockpigeon_home}/rpserver-licensekey ]
    then
    cat ${rockpigeon_home}/rpserver-licensekey >> ${rockpigeon_home}/rockpigeon.properties
    echo "[#] licensekey has been successfully installed in the application, please restart application."
    else
    echo "[!] Please make sure rpserver-licensekey is available at ${rockpigeon_home} directory."
    exit 1
    fi
    }

serversetup() {

    echo "[+] Verifying update files..."

    if [ -f ${SCRIPTDIR}/sigmastream_deploy_plugins.sh ]
    then
    cd ${SCRIPTDIR} || exit 1
    ./sigmastream_deploy_plugins.sh | tee ${SCRIPTDIR}/plugin-installation-`echo $(date +%Y/%M/%d-%H%M%S)`.log
    else
    echo "[!] Please make sure upgrade script file is available at ${SCRIPTDIR}"
    echo "[#] Please contact [support@sigmastream.com] for any query or assistance."
    exit 1
    fi

}
######

status () {
    getrockpigeonstatus
    if [ $rockpigeonstatus -eq 0 ] ; then
		echo "[#] Rockpigeon is running on pid: $(pgrep -f ${rockpigeon_home})"
		# ps ax | grep ${rockpigeon_home} | grep -v grep | sed 's/^[[:space:]]*\([[:digit:]]*\).*:[[:digit:]][[:digit:]][[:space:]]\(.*\)/\1 \2/'
		# echo
    else
		echo "[#] Rockpigeon is stopped"
    fi
}

case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    restart)
	restart
	;;
    condrestart)
	condrestart
	;;
    status)
	status
	;;
    generatekeycode)
	generatekeycode
	;;
    applylicensetoken)
	applylicensetoken
	;;
    serversetup)
	serversetup
	;;
    *)
	echo $"Usage: $0 {start|stop|restart|condrestart|status|generatekeycode|applylicensetoken|serversetup}"
	exit 1
esac

exit 0
