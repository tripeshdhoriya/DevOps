#!/bin/sh
#

### BEGIN INIT INFO
# Provides:		hummingbird
# Required-Start:	postgresql
# Required-Stop:	postgresql
# Default-Start:	2 3 4 5
# Default-Stop:		1
# Short-Description:	HummingBird Visualizer Service
# Description:	Provides HummingBird visualizer Server startup and shutdown script. Requires PostgreSQL,Cassandra server.
# FileTarget:	/etc/init.d/hummingbird
# FileOwner:	root.root
# FilePerms:	0755
#
# chkconfig:	2345 97 06
### END INIT INFO

# initialization
# adjust these variables to your environment
HUMMINGBIRD_HOME=/home/sigmastream/hbserver
HUMMINGBIRDUSER=sigmastream
export TELNET_PORT=12612
JAVA_H=$HUMMINGBIRD_HOME/jdk-11/bin/java
SCRIPTDIR=/home/sigmastream/hummingbird/hummingbird-2.5/Tools/scripts

# Instead of using ENVFILE you can set JAVA_HOME, HUMMINGBIRD_HOME and add JAVA_HOME/bin to PATH
# in this case you can comment the source lines for ENVFILE below
# detected some problems with Hardy Heron ubuntu using the bash source command
ENVFILE=$HUMMINGBIRD_HOME/utils/myEnvironment.sh

. /etc/init.d/functions
 
RETVAL=0
HUMMINGBIRDSTATUS=
MAXITERATIONS=60 

getHUMMINGBIRDSTATUS() {
    HUMMINGBIRDSTATUSSTRING=$(ps ax | grep java | grep ${HUMMINGBIRD_HOME} | grep -v grep)
    echo $HUMMINGBIRDSTATUSSTRING | grep -q ${HUMMINGBIRD_HOME}
    HUMMINGBIRDSTATUS=$?
}

start () {
    getHUMMINGBIRDSTATUS
    if [ $HUMMINGBIRDSTATUS -eq 0 ] ; then
        echo "HummingBird is already running"
        return 1
    fi
    echo -n "Starting HummingBird Visualizer: "
    cd $HUMMINGBIRD_HOME/utils
    . $ENVFILE 
    export LOGFILE=$HUMMINGBIRD_HOME/log/KingFisher.`date +%Y-%m-%d`.log
    su $HUMMINGBIRDUSER -c "mkdir -p $HUMMINGBIRD_HOME/log"
    su $HUMMINGBIRDUSER -c "export TELNET_PORT=$TELNET_PORT;cd $HUMMINGBIRD_HOME;$HUMMINGBIRD_HOME/hummingbird-server.sh &> $LOGFILE &"
    RETVAL=$?
    if [ $RETVAL -eq 0 ] ; then
        # wait for server to be confirmed as started in logfile
        STATUSTEST=0
        ITERATIONS=0
        while [ $STATUSTEST -eq 0 ] ; do
            sleep 2
            cat $LOGFILE | grep -q '.*LoggedSessionListener.contextInitialized: context initialized.*' && STATUSTEST=1
            echo -n "."
            ITERATIONS=`expr $ITERATIONS + 1`
            if [ $ITERATIONS -gt $MAXITERATIONS ]
                then
                break
            fi
        done
        if [ $STATUSTEST -eq 0 ]
        then
            log_warning_msg "Service hasn't started within the timeout allowed, please review file $LOGFILE to see the status of the service"
        else
            log_success_msg "Service started"
        fi
        echo
    else
        log_failure_msg "Service not started"
    echo
    fi
    RETVAL=$?
    return $RETVAL
}

stop () {
    # getHUMMINGBIRDSTATUS
    # if [ $HUMMINGBIRDSTATUS -ne 0 ] ; then
	#   echo "HummingBird is already stopped"
	#   return 1
    # fi
    echo -n "Stopping HummingBird Visualizer: "
    cd $HUMMINGBIRD_HOME/utils
    . $ENVFILE
    # try shutdown from OSGi console, then direct kill with signal 15, then signal 9
    log_warning_msg "Trying shutdown from system console"
    ( echo exit; echo y; sleep 5 ) | telnet localhost ${TELNET_PORT} > /dev/null 2>&1
    getHUMMINGBIRDSTATUS
    if [ $HUMMINGBIRDSTATUS -ne 0 ] ; then
        log_success_msg "Service stopped with system shutdown"
    else
        log_warning_msg "Trying direct kill with signal -15"
        kill -15 -`ps ax o pgid,command | grep ${HUMMINGBIRD_HOME} | grep -v grep | sed -e 's/^ *//g' | cut -f 1 -d " " | sort -u`
        sleep 5
        getHUMMINGBIRDSTATUS
        if [ $HUMMINGBIRDSTATUS -ne 0 ] ; then
            log_success_msg "Service stopped with kill -15"
        else
            log_warning_msg "Trying direct kill with signal -9"
            kill -9 -`ps ax o pgid,command | grep ${HUMMINGBIRD_HOME} | grep -v grep | sed -e 's/^ *//g' | cut -f 1 -d " " | sort -u`
            sleep 5
            getHUMMINGBIRDSTATUS
            if [ $HUMMINGBIRDSTATUS -ne 0 ] ; then
                log_success_msg "Service stopped with kill -9"
            else
                log_warning_msg "Service hasn't stopped"
            fi
        fi
    fi
    return $RETVAL
}

restart () {
    stop
    sleep 2
    start
}

condrestart () {
    getHUMMINGBIRDSTATUS
    if [ $HUMMINGBIRDSTATUS -eq 0 ] ; then
	   restart
    fi
}

######
generatekeycode() {
   echo "[+] Generating application secret token..."

   if [ -f ${HUMMINGBIRD_HOME}/key-generator-2.1.0.jar ]
   then
      echo ""
      echo "-----------------------------------------------------------------------------------------------"
      ${JAVA_H} -jar ${HUMMINGBIRD_HOME}/key-generator-2.1.0.jar
      echo "-----------------------------------------------------------------------------------------------"
      echo ""
   else
      echo "[!] Can't find keygenerator file in ${HUMMINGBIRD_HOME}, please contact to support@sigmastream.com"
      exit 1
   fi
   }

applylicensetoken() {

echo "[+] Verifying licensekey file..."

if [ -f ${HUMMINGBIRD_HOME}/hbserver-licensekey ]
then
   cat ${HUMMINGBIRD_HOME}/hbserver-licensekey >> ${HUMMINGBIRD_HOME}/jettyhome/work/config-ext.properties
   echo "[#] licensekey has been successfully installed in the application, please restart application."
else
   echo "[!] Please make sure hbserver-licensekey is available at $HUMMINGBIRD_HOME directory."
   exit 1
fi

}

serverupdate() {

echo "[+] Verifying update files..."

if [ -f ${SCRIPTDIR}/sigmastream_deploy_plugins.sh ]
then
   cd ${SCRIPTDIR}
   ./sigmastream_deploy_plugins.sh | tee ${SCRIPTDIR}/plugin-installation-`echo $(date +%Y/%M/%d-%H%M%S)`.log
else
   echo "[!] Please make sure upgrade script file is available at ${SCRIPTDIR}"
   echo "[#] Please contact [support@sigmastream.com] for any query or assistance."
   exit 1
fi

}
######

status () {
    getHUMMINGBIRDSTATUS
    if [ $HUMMINGBIRDSTATUS -eq 0 ] ; then
		echo
		echo "HummingBird is running:"
		ps ax | grep ${HUMMINGBIRD_HOME} | grep -v grep | sed 's/^[[:space:]]*\([[:digit:]]*\).*:[[:digit:]][[:digit:]][[:space:]]\(.*\)/\1 \2/'
		echo
	    else
		echo "HummingBird is stopped"
    fi
}

case "$1" in
    start)
	start
	;;
    stop)
	stop
	;;
    restart)
	restart
	;;
    condrestart)
	condrestart
	;;
    status)
	status
	;;
    generatekeycode)
	generatekeycode
	;;
    applylicensetoken)
	applylicensetoken
	;;
    serverupdate)
	serverupdate
	;;
    *)
	echo $"Usage: $0 {start|stop|restart|condrestart|status|generatekeycode|applylicensetoken|serverupdate}"
	exit 1
esac

exit 0
