<?xml version="1.0" encoding="UTF-8"?>
<yguard version="1.5">
<!--
  yGuard Bytecode Obfuscator, v2.6, a Product of yWorks GmbH - http://www.yworks.com

  Logfile created on Thu Jul 18 11:45:07 IST 2024

  Jar file to be obfuscated:           bluecardinal-core-1.1.0.jar
  Target Jar file for obfuscated code: bluecardinal-core.jar

-->
<!-- WARNING
Methods are called which may break in obfuscated version at runtime.
Please review your source code to ensure that the dangerous methods are not intended
to act on classes which have been obfuscated.
-->
<!--
     Your class com.sigmastream.pr.operator.MainOperator calls the java.lang.ClassLoader method java.lang.Class loadClass(java.lang.String)
-->
<!--
  Memory in use after class data structure built: 52598104 bytes
  Total memory available                        : 660602880 bytes
-->
<expose>
  <class name="com.sigmastream.main.Main"/>
  <method class="com.sigmastream.main.Main" name="void main(java.lang.String[])"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="serialVersionUID"/>
  <class name="com.sigmastream.bc.aggregate.AggregateOperationsBC"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="com.hazelcast.jet.aggregate.AggregateOperation1 mse(com.hazelcast.function.ConsumerEx)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="com.hazelcast.jet.aggregate.AggregateOperation1 filterDataPayload(com.hazelcast.function.ConsumerEx)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="com.hazelcast.jet.aggregate.AggregateOperation1 minMaxValue(com.hazelcast.function.FunctionEx, com.hazelcast.function.ToLongFunctionEx, com.hazelcast.function.ToDoubleFunctionEx)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="void lambda$slope$150fcb78$1(com.hazelcast.function.ToLongFunctionEx, com.hazelcast.function.ToDoubleFunctionEx, com.sigmastream.bc.accumulator.SlopeAccumulator, java.lang.Object)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="com.hazelcast.jet.aggregate.AggregateOperation1 slope(com.hazelcast.function.ToLongFunctionEx, com.hazelcast.function.ToDoubleFunctionEx)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="void lambda$mse$7e11415$1(com.sigmastream.bc.accumulator.MSEAccumulator, com.sigmastream.bc.mse.MSEAggreatePayload)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="void lambda$filterDataPayload$1addbc44$1(com.sigmastream.bc.accumulator.FilterAccumulator, com.sigmastream.bc.operator.Payload)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="void lambda$minMaxValue$91cf0c20$1(com.hazelcast.function.FunctionEx, com.hazelcast.function.ToLongFunctionEx, com.hazelcast.function.ToDoubleFunctionEx, com.sigmastream.bc.accumulator.MutableMinMaxAccumulator, java.lang.Object)"/>
  <method class="com.sigmastream.bc.aggregate.AggregateOperationsBC" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.bc.dataquality.beans.Correlation" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.beans.Contextual" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.beans.Rules" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.EvaluateExpression" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="serialVersionUID"/>
  <class name="com.sigmastream.bc.operator.BatchSimulation$FileReader"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="nextTimestampNanos"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="lineIterator"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="headers"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="intervalNanos"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="java.util.List getFileHeaders()"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="boolean hasNext()"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="long nextTimestampMs()"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation$FileReader" name="java.lang.String nextLine()"/>
  <class name="com.sigmastream.bc.operator.BatchSimulation"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="datePattern"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="configContext"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="BATCH_SIZE"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="frictionTestConfig"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="uomDictionary"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="bc_Channels"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="inputChannels"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="SOURCE_FREQUENCY_HZ"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="yhtimeFormat"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="tsChannelName"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="AGGREGATED_DATA_MAP"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="inputChannelsConfig"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="_log"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="uoms"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="sdf"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="velocityConfig"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="inputErrorValues"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="outputChannelsConfig"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="bc_ChannelsWithState"/>
  <field class="com.sigmastream.bc.operator.BatchSimulation" name="channelValMulFactorMap"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="java.util.HashMap getBCHeaders()"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="com.hazelcast.jet.pipeline.StreamSource readCsv(java.lang.String, long, int, int)"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="java.util.HashMap getChannelsStateMap()"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="void main(java.lang.String[])"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="boolean validateLine(java.lang.String[])"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="void lambda$readCsv$4f9dbae0$1(int, com.sigmastream.bc.operator.BatchSimulation$FileReader, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="com.sigmastream.bc.operator.BatchSimulation$FileReader lambda$readCsv$9303f54b$1(java.lang.String, long, int, com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <method class="com.sigmastream.bc.operator.BatchSimulation" name="void parseConfig(java.util.Map)"/>
  <class name="com.sigmastream.bc.operator.AggregatedChannel"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="average"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="middleValue"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="firstValue"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="min"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="payloads"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="_log"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="window"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="channel"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="slope"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="max"/>
  <field class="com.sigmastream.bc.operator.AggregatedChannel" name="lastValue"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="com.sigmastream.bc.operator.AggregatedChannel getInstance()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getAverage()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="java.lang.String getChannel()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="void setMiddleValue(double)"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getMiddleValue()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getFirstValue()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="java.util.List getPayloads()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getLastValue()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getMin()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getMax()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="double getSlope()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="long getWindow()"/>
  <method class="com.sigmastream.bc.operator.AggregatedChannel" name="java.util.Map$Entry getEntry()"/>
  <class name="com.sigmastream.bc.operator.AggregatedSSChannel"/>
  <field class="com.sigmastream.bc.operator.AggregatedSSChannel" name="maxPayloads"/>
  <field class="com.sigmastream.bc.operator.AggregatedSSChannel" name="minPayloads"/>
  <field class="com.sigmastream.bc.operator.AggregatedSSChannel" name="average"/>
  <field class="com.sigmastream.bc.operator.AggregatedSSChannel" name="channel"/>
  <field class="com.sigmastream.bc.operator.AggregatedSSChannel" name="window"/>
  <field class="com.sigmastream.bc.operator.AggregatedSSChannel" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="com.sigmastream.bc.operator.Payload getminPayloads()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="java.lang.String getChannel()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="com.sigmastream.bc.operator.Payload getmaxPayloads()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="long getWindow()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="com.sigmastream.bc.operator.AggregatedSSChannel getInstance()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="java.util.Map$Entry getEntry()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc.operator.AggregatedSSChannel" name="double getAverage()"/>
  <class name="com.sigmastream.bc.operator.Payload"/>
  <field class="com.sigmastream.bc.operator.Payload" name="event"/>
  <field class="com.sigmastream.bc.operator.Payload" name="uom"/>
  <field class="com.sigmastream.bc.operator.Payload" name="freq"/>
  <field class="com.sigmastream.bc.operator.Payload" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.operator.Payload" name="channelId"/>
  <field class="com.sigmastream.bc.operator.Payload" name="datapushEnable"/>
  <field class="com.sigmastream.bc.operator.Payload" name="timestamp"/>
  <field class="com.sigmastream.bc.operator.Payload" name="_log"/>
  <field class="com.sigmastream.bc.operator.Payload" name="type"/>
  <field class="com.sigmastream.bc.operator.Payload" name="value"/>
  <method class="com.sigmastream.bc.operator.Payload" name="java.lang.String getChannelId()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setDatapushEnable(boolean)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="java.lang.String toJson()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="boolean isDatapushEnable()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setEvent(boolean)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="java.lang.String getUom()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setType(java.lang.String)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="com.sigmastream.bc.operator.Payload getPayload()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setTimestamp(long)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setFreq(double)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="java.lang.String getType()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="double getValue()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setValue(java.lang.Object)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="boolean isEvent()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="com.sigmastream.bc.operator.Payload parse(java.util.Map)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="double getFreq()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="long getTimestamp()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="java.lang.String getValueString()"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setUom(java.lang.String)"/>
  <method class="com.sigmastream.bc.operator.Payload" name="void setChannelId(java.lang.String)"/>
  <class name="com.sigmastream.bc.operator.IMapStorage"/>
  <field class="com.sigmastream.bc.operator.IMapStorage" name="map"/>
  <field class="com.sigmastream.bc.operator.IMapStorage" name="iMap"/>
  <method class="com.sigmastream.bc.operator.IMapStorage" name="java.util.Set getIMap()"/>
  <class name="com.sigmastream.bc.accumulator.FilterAccumulator"/>
  <field class="com.sigmastream.bc.accumulator.FilterAccumulator" name="payload"/>
  <field class="com.sigmastream.bc.accumulator.FilterAccumulator" name="inputDataStreamsConfig"/>
  <field class="com.sigmastream.bc.accumulator.FilterAccumulator" name="dataPayloads"/>
  <field class="com.sigmastream.bc.accumulator.FilterAccumulator" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="void initConfig(java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="com.sigmastream.bc.accumulator.FilterAccumulator combine(com.sigmastream.bc.accumulator.FilterAccumulator)"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="int hashCode()"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="com.sigmastream.bc.accumulator.FilterAccumulator accumulate(com.sigmastream.bc.operator.Payload)"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="java.util.Map getData()"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="void writeObject(com.hazelcast.nio.ObjectDataOutput)"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="com.sigmastream.bc.operator.Payload export()"/>
  <method class="com.sigmastream.bc.accumulator.FilterAccumulator" name="com.sigmastream.bc.accumulator.FilterAccumulator deduct(com.sigmastream.bc.accumulator.FilterAccumulator)"/>
  <class name="com.sigmastream.bc.accumulator.SlopeAccumulator"/>
  <field class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="data"/>
  <field class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="com.sigmastream.bc.accumulator.SlopeAccumulator deduct(com.sigmastream.bc.accumulator.SlopeAccumulator)"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="int hashCode()"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="com.sigmastream.bc.accumulator.SlopeAccumulator accumulate(long, double)"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="double export()"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="java.util.Hashtable getData()"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="void writeObject(com.hazelcast.nio.ObjectDataOutput)"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="void setData(java.util.Hashtable)"/>
  <method class="com.sigmastream.bc.accumulator.SlopeAccumulator" name="com.sigmastream.bc.accumulator.SlopeAccumulator combine(com.sigmastream.bc.accumulator.SlopeAccumulator)"/>
  <class name="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator"/>
  <field class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="max"/>
  <field class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="windowValues"/>
  <field class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="min"/>
  <field class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator combine(com.sigmastream.bc.accumulator.MutableMinMaxAccumulator)"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="java.lang.Double[] export()"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="int hashCode()"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator deduct(com.sigmastream.bc.accumulator.MutableMinMaxAccumulator)"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="java.util.Hashtable getData()"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="void writeObject(com.hazelcast.nio.ObjectDataOutput)"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator accumulate(java.lang.Object, long, double)"/>
  <method class="com.sigmastream.bc.accumulator.MutableMinMaxAccumulator" name="void setData(java.util.Hashtable)"/>
  <field class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="ch"/>
  <field class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="val$str"/>
  <field class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="pos"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="void nextChar()"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="double parseFactor()"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="boolean eat(int)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="double parse()"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="double parseTerm()"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator$1" name="double parseExpression()"/>
  <class name="com.sigmastream.bc.accumulator.MSEAccumulator"/>
  <field class="com.sigmastream.bc.accumulator.MSEAccumulator" name="payload"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="int hashCode()"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="com.sigmastream.bc.accumulator.MSEAccumulator deduct(com.sigmastream.bc.accumulator.MSEAccumulator)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="double eval(java.lang.String)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="void main(java.lang.String[])"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="com.sigmastream.bc.mse.MSEAggreatePayload export()"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="void writeObject(com.hazelcast.nio.ObjectDataOutput)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="java.lang.Double mseWthoutMotor(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="com.sigmastream.bc.accumulator.MSEAccumulator accumulate(com.sigmastream.bc.mse.MSEAggreatePayload)"/>
  <method class="com.sigmastream.bc.accumulator.MSEAccumulator" name="com.sigmastream.bc.accumulator.MSEAccumulator combine(com.sigmastream.bc.accumulator.MSEAccumulator)"/>
  <field class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="serialVersionUID"/>
  <class name="com.sigmastream.bc._3ps.beans.TDataPacket"/>
  <field class="com.sigmastream.bc._3ps.beans.TDataPacket" name="sensorParam"/>
  <field class="com.sigmastream.bc._3ps.beans.TDataPacket" name="isTaredEnabled"/>
  <field class="com.sigmastream.bc._3ps.beans.TDataPacket" name="_log"/>
  <field class="com.sigmastream.bc._3ps.beans.TDataPacket" name="sourceId"/>
  <field class="com.sigmastream.bc._3ps.beans.TDataPacket" name="tareValue"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="void setSourceId(int)"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="int getSourceId()"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="int hashCode()"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="char getSensorParam()"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="void setSensorParam(char)"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="void setTareValue(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="float getTareValue()"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="boolean hasError()"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="void parse(byte[])"/>
  <method class="com.sigmastream.bc._3ps.beans.TDataPacket" name="byte[] getNetworkPacket()"/>
  <class name="com.sigmastream.bc._3ps.beans.XDataPacket"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="value3"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="battery"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="value2"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="value1"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="error"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="usec"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="_log"/>
  <field class="com.sigmastream.bc._3ps.beans.XDataPacket" name="value4"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="int getError()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setBattery(int)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setUsec(short)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setValue2(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setValue4(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="int hashCode()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="float getValue1()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setValue1(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="byte[] getNetworkPacket()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void parse(byte[])"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="int getBattery()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="float getValue2()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="boolean hasError()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setValue3(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="void setError(int)"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="float getValue3()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="int getUsec()"/>
  <method class="com.sigmastream.bc._3ps.beans.XDataPacket" name="float getValue4()"/>
  <class name="com.sigmastream.bc._3ps.beans.DataPacket"/>
  <field class="com.sigmastream.bc._3ps.beans.DataPacket" name="version"/>
  <field class="com.sigmastream.bc._3ps.beans.DataPacket" name="hexArray"/>
  <field class="com.sigmastream.bc._3ps.beans.DataPacket" name="timestamp"/>
  <field class="com.sigmastream.bc._3ps.beans.DataPacket" name="txId"/>
  <field class="com.sigmastream.bc._3ps.beans.DataPacket" name="packetType"/>
  <field class="com.sigmastream.bc._3ps.beans.DataPacket" name="header"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="char getHeader()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="java.lang.String bytesToHex(byte[])"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="short getTxId()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="com.sigmastream.bc._3ps.beans.DataPacket getPacketInstance(char)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="void setHeader(char)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="void setTxId(short)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="java.lang.String getPacketType()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="void setTimestamp(long)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="char getVersion()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="int hashCode()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="void setPacketType(java.lang.String)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="void setVersion(char)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="byte[] getNetworkPacket()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="void parse(byte[])"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="boolean hasError()"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="int hex2decimal(java.lang.String)"/>
  <method class="com.sigmastream.bc._3ps.beans.DataPacket" name="long getTimestamp()"/>
  <class name="com.sigmastream.bc._3ps.beans.PDataPacket"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="value3"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="battery"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="value2"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="value1"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="error"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="usec"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="_log"/>
  <field class="com.sigmastream.bc._3ps.beans.PDataPacket" name="value4"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="int getError()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setUsec(short)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setBattery(int)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setValue2(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setValue4(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setTimestamp(long)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="int hashCode()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="float getValue1()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setValue1(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="byte[] getNetworkPacket()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void parse(byte[])"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="int getBattery()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="float getValue2()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="boolean hasError()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setValue3(float)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="void setError(int)"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="float getValue3()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="int getUsec()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="long getTimestamp()"/>
  <method class="com.sigmastream.bc._3ps.beans.PDataPacket" name="float getValue4()"/>
  <class name="com.sigmastream.bc.jobs.JobConfiguration"/>
  <field class="com.sigmastream.bc.jobs.JobConfiguration" name="rootDir"/>
  <field class="com.sigmastream.bc.jobs.JobConfiguration" name="jobInfo"/>
  <field class="com.sigmastream.bc.jobs.JobConfiguration" name="jobStatusInfo"/>
  <field class="com.sigmastream.bc.jobs.JobConfiguration" name="hazelcastJobInfo"/>
  <field class="com.sigmastream.bc.jobs.JobConfiguration" name="_log"/>
  <field class="com.sigmastream.bc.jobs.JobConfiguration" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="void isDirectory(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="void setRootDir(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="java.lang.String getRootDir()"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="boolean isJobExist(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="com.sigmastream.bc.jobs.JobInformation getJobInfo()"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="java.util.Map getJobStatusInfo()"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="void logStatus(com.sigmastream.bc.jobs.JobInformation)"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="java.util.Map getHazelcastJobInfo()"/>
  <method class="com.sigmastream.bc.jobs.JobConfiguration" name="void fileDataWriter(java.lang.String, java.lang.String)"/>
  <class name="com.sigmastream.bc.jobs.JobInformation"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="serialVersionUID"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="startTime"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="rigId"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="operatorConfig"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="status"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="jobId"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="jobName"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="yhFirstTimestamp"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="endTime"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="isRestarted"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="type"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="subAssetId"/>
  <field class="com.sigmastream.bc.jobs.JobInformation" name="assetId"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="long getStartTime()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String getRigId()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String getStatus()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setEndTime(long)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.util.Map getOperatorConfig()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="long getJobId()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setOperatorConfig(java.util.Map)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setAssetId(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setStatus(com.hazelcast.jet.core.JobStatus)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setRigId(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String toString()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setJobId(long)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setType(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setJobName(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setSubAssetId(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setYhFirstTimestamp(long)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String getType()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="long getEndTime()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="long getYhFirstTimestamp()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setRestarted(boolean)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String getAssetId()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setStatus(java.lang.String)"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="boolean isRestarted()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String getJobName()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="java.lang.String getSubAssetId()"/>
  <method class="com.sigmastream.bc.jobs.JobInformation" name="void setStartTime(long)"/>
  <class name="com.sigmastream.bc.jobs.JobsScheduler"/>
  <field class="com.sigmastream.bc.jobs.JobsScheduler" name="main"/>
  <field class="com.sigmastream.bc.jobs.JobsScheduler" name="_log"/>
  <field class="com.sigmastream.bc.jobs.JobsScheduler" name="operatorName"/>
  <method class="com.sigmastream.bc.jobs.JobsScheduler" name="void run()"/>
  <class name="com.sigmastream.bc.jobs.ProcessorState"/>
  <field class="com.sigmastream.bc.jobs.ProcessorState" name="processorStates"/>
  <field class="com.sigmastream.bc.jobs.ProcessorState" name="name"/>
  <field class="com.sigmastream.bc.jobs.ProcessorState" name="_log"/>
  <field class="com.sigmastream.bc.jobs.ProcessorState" name="processorStateInfo"/>
  <field class="com.sigmastream.bc.jobs.ProcessorState" name="fileName"/>
  <field class="com.sigmastream.bc.jobs.ProcessorState" name="serialVersionUID"/>
  <method class="com.sigmastream.bc.jobs.ProcessorState" name="void updateProcessorState(java.lang.Object)"/>
  <method class="com.sigmastream.bc.jobs.ProcessorState" name="java.lang.Object getProcessorReference(java.lang.Object)"/>
  <method class="com.sigmastream.bc.jobs.ProcessorState" name="java.lang.Object getProcessorState()"/>
  <method class="com.sigmastream.bc.jobs.ProcessorState" name="java.util.List getProcessorStates()"/>
  <method class="com.sigmastream.bc.jobs.ProcessorState" name="java.lang.Object initProcessorState(java.lang.Class)"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.aggregator.WindowAggregation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.AveragingAggregation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.SlopeAggregation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.FFTOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <class name="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation"/>
  <field class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="_log"/>
  <field class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="dataStreams"/>
  <field class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="inputDataStreamsConfig"/>
  <field class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.FunctionEx exportFn()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.SupplierEx createFn()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.BiConsumerEx deductFn()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.FunctionEx finishFn()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="void lambda$combineFn$ffa9015$1(java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="void lambda$deductFn$ffa9015$1(java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="boolean lambda$null$1(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="int arity()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="java.util.Map lambda$finishFn$339e9135$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="void lambda$accumulateFn$83d99378$1(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="com.hazelcast.function.BiConsumerEx combineFn()"/>
  <method class="com.sigmastream.pr.aggregate.operation.CombineAggregateOperation" name="boolean lambda$null$0(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)"/>
  <field class="com.sigmastream.pr.operator.rigstates.InSlipsOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.InSlipsOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.BackReamingOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.BackReamingOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.TripInOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.TripInOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.PumpInOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpInOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.TripOutOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.TripOutOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.StationaryOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.StationaryOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.DrillingRotaryOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.DrillingRotaryOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotatingInOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingInOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.CirculateOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.CirculateOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.SlideDrillingOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.SlideDrillingOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotateAndCirculateOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotateAndCirculateOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.PumpOutOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpOutOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotatingOutOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingOutOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.ReamingOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.ReamingOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotatingOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <class name="com.sigmastream.pr.operator.oes.WellOperationalOperator"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="isBackFillJobComplete"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="subscriptionType"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="hazelcastJobInfo"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="hazelcastJob"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="_log"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="JobStatusInfo"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="rigID"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader lambda$new$47ed1dcb$1(com.sigmastream.bc.websocketFactory.SocketSubscribe, com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.sigmastream.bc.operator.AggregatedChannel lambda$createStreamStageFromStreanPayloadStage$3d21cbf7$1(com.hazelcast.jet.datamodel.KeyedWindowResult)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.sigmastream.pr.beans.DataPayload lambda$new$799516ee$1(com.sigmastream.bc.operator.Payload)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.hazelcast.jet.Job getJob()"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="void main(java.lang.String[])"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader lambda$new$55efb58f$1(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP, com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="com.hazelcast.jet.pipeline.StreamStage createStreamStageFromStreanPayloadStage(com.hazelcast.jet.pipeline.StreamSourceStage, com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.oes.FrictionTestOperator" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.RunningAvgOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.RunningAvgOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <class name="com.sigmastream.pr.operator.TimeAccumulateOperator"/>
  <field class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="origDataStreamConfigs"/>
  <field class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="_log"/>
  <field class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="void main(java.lang.String[])"/>
  <method class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="java.util.Map parseInputDataStreams(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="java.util.Map parseInputChannels(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.TimeAccumulateOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)"/>
  <class name="com.sigmastream.pr.operator.DataQualityOperator"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="commonPrefix"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="yhDQAnalysis"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="rootDir"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="hazelcastJob"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="_log"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="maxChannelAswiDuration"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="origDataStreamConfigs"/>
  <field class="com.sigmastream.pr.operator.DataQualityOperator" name="aspectPostFixMap"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.util.Map parseInputDataStreams(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.util.Map parseInputChannels(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="void addAspectChannels(java.util.Map, java.util.Map, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.util.Map parseOutputChannels(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader lambda$new$643a94dc$1(com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP, com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.lang.Double lambda$new$0(java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.operator.DataQualityOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.MQTTSinkOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.MQTTSinkOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.YhSinkOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator._3psRPMOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.operator.SSIndicatorOperator"/>
  <field class="com.sigmastream.pr.operator.SSIndicatorOperator" name="rootDir"/>
  <field class="com.sigmastream.pr.operator.SSIndicatorOperator" name="origDataStreamConfigs"/>
  <field class="com.sigmastream.pr.operator.SSIndicatorOperator" name="_log"/>
  <field class="com.sigmastream.pr.operator.SSIndicatorOperator" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.operator.SSIndicatorOperator" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.operator.SSIndicatorOperator" name="java.util.Map parseInputDataStreams(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.SSIndicatorOperator" name="java.util.Map parseInputChannels(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.SSIndicatorOperator" name="java.util.Map parseOutputChannels(java.util.Map)"/>
  <method class="com.sigmastream.pr.operator.SSIndicatorOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.EventCleanerP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.oes.MLEventP"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="labelQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="pyToucanetCompute"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="MLmoduleFilePath"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="hlQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="ropQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="rpmaQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="MLconfigFilePath"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="bpQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="hd_QueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="pythonWindow"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="_log"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="brw"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="hookload_delta"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="CONSTANT_KEY"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="prevEvent"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="timeQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="rawInputbrw"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="bhQueueIn"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.oes.MLEventP" name="firQueueIn"/>
  <method class="com.sigmastream.pr.processor.oes.MLEventP" name="void intQueue()"/>
  <method class="com.sigmastream.pr.processor.oes.MLEventP" name="void init(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.oes.MLEventP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.oes.MLEventP" name="boolean tryProcess(int, java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.oes.MLEventP" name="void writeCSV(long, java.lang.String, double, double, double, double, double, double, double, java.io.BufferedWriter)"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.oes.DelayedDecisionP"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="configBean"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="prevDelayedDecisionP"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="eventsCorrectionConfigs"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="slideAssistProbablePayloadList"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="payloadDao"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="isPositiveRpmChange"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="slideAssistOscillationCount"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="con"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="minOscillationValue"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="maxOscillationValue"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="slideAssistInitTime"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="initialAtSurfaceBitDepth"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="outputValues"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="prevBitDepth"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="rigID"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="currentEvent"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="_log"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="brw"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="isNegativeRpmChange"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="prevConfirmEvent"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="srcFile1"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="prevAtSurfaceBitDepth"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="oscillationCount"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="eventPayload"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="currentRpmSlope"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="prevEvent"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="isSlideAssistDetect"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="slideAssistWindowTime"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="isPrevSlideAssist"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="SQL_FOR_INSERT_EVENT"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="initPreviosState"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="SQl_FOR_INSERT_STATE"/>
  <field class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="slideAsistsRPMMomentThresold"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void insertEventData(java.lang.String, long, int)"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void emitEvent(com.sigmastream.pr.common.TimestampedEntry, long)"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void init(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void emitSlideAssistEvent(com.sigmastream.pr.common.TimestampedEntry)"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void InitPreviosState()"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="boolean tryProcess(int, java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void clearSlideAssistTempData()"/>
  <method class="com.sigmastream.pr.processor.oes.DelayedDecisionP" name="void writeCSV(long, java.util.Map)"/>
  <class name="com.sigmastream.pr.processor.oes.YhWSocketStreamSourceP"/>
  <field class="com.sigmastream.pr.processor.oes.YhWSocketStreamSourceP" name="_log"/>
  <method class="com.sigmastream.pr.processor.oes.YhWSocketStreamSourceP" name="boolean isActiveDeviceAvailable(java.lang.String, int, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String, java.lang.String)"/>
  <method class="com.sigmastream.pr.processor.oes.YhWSocketStreamSourceP" name="java.util.Map getActiveAsset(java.lang.String, int, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.String)"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.DataSlopeP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="nextTimestampNanos"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="lineIterator"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="headers"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="intervalNanos"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="java.util.List getFileHeaders()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="boolean hasNext()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="long nextTimestampMs()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader fileReader(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader" name="java.lang.String nextLine()"/>
  <class name="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="loopingEnable"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="pollInterval"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="datePattern"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="BATCH_SIZE"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="inputChannels"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="freq"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="SOURCE_FREQUENCY_HZ"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="yhtimeFormat"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="tsChannelName"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="_log"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="sdf"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="filePath"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="useActualTime"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="startTime"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="isSleepUse"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="rawCounter"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="speedUpFactor"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="channelValMulFactorMap"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="void readCSV(com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP$FileReader, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="long findTimestamp(java.util.List, java.lang.String[], java.util.Date, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="java.lang.String access$000(com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="long getRawSequenceId()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="void setFilePath(java.lang.String)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="long access$200(com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP" name="double access$100(com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP)"/>
  <field class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.RunningAvgP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="nextTimestampNanos"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="lineIterator"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="headers"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="intervalNanos"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="java.util.List getFileHeaders()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="boolean hasNext()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="long nextTimestampMs()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader fileReader(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader" name="java.lang.String nextLine()"/>
  <class name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="loopingEnable"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="pollInterval"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="isDataVerified"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="datePattern"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="BATCH_SIZE"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="timeIndex"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="bc_Channels"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="inputChannels"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="enableCSVSourceDebug"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="con"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="freq"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="sleepTime"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="SOURCE_FREQUENCY_HZ"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="tsChannelName"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="yhtimeFormat"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="rigID"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="_log"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="sdf"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="useCassandra"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="filePath"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="useActualTime"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="startTime"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="rawCounter"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="speedUpFactor"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="operatorName"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="channelValMulFactorMap"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="void setFilePath(java.lang.String)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="void readCSV(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="void insertDataInCassandra(java.util.HashMap)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="java.lang.String access$000(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="long getRawSequenceId()"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="long access$200(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP)"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="com.sigmastream.bc.operator.Payload findTimestamp(java.util.List, java.lang.String[])"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="java.util.List readDataFromLine(java.util.List, java.lang.String[])"/>
  <method class="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP" name="double access$100(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP)"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.PayloadListParserP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.SignalStreamPayloadListP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.SSIndicatorP"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="dataStreamsConfig"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="inputDataStreams"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="_log"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="operatorConfig"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="CONSTANT_KEY"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.SSIndicatorP" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.processor.SSIndicatorP" name="void init(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.SSIndicatorP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.SSIndicatorP" name="boolean tryProcess(int, java.lang.Object)"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.StreamFilterPayloadP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.StreamAugmentationP"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="inputStreamConfig"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="inputDataStreams"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="_log"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="augmentDataExecutorService"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="augmentData"/>
  <field class="com.sigmastream.pr.processor.StreamAugmentationP" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="java.util.List getFakePayloadList(long, java.lang.String)"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="void lambda$init$0()"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="void init(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="boolean lambda$tryProcess$3(java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="void lambda$tryProcess$1(java.util.Map, long, java.lang.String, java.lang.String)"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="boolean tryProcess(int, java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="void lambda$tryProcess$4(java.util.Map, java.util.Optional, java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.StreamAugmentationP" name="boolean lambda$tryProcess$2(java.util.Map, java.util.Map$Entry)"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.ChannelQualityP"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="inputDataStreamsInvert"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="permissibleGapPercent"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="inputDataStreamHeaders"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mchannelStatisticsSummaryValues"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="deviceProcessStatus"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="devicesMonitor"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mchannelAswiSummary"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="wellQualityMonitor"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mChannelLogMap"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mChannelAspectSummary"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mChannelAspectSummaryValues"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="rootDir"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="_log"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="dataQualityState"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="prevChannelQualityP"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="channelsMonitor"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="CHANNEL_STATISTICS_SMMARY"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="aspectPostFixMap"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mongoStats"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="pw"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="totalChannelAspects"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mChannelStatisticsSummary"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="destFile"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="operatorConfig"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="summaryValues"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="mpMnemonicChId"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="inputStreamConfig"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="operatorName"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="wellAswiDuration"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="yhChannelConfig"/>
  <field class="com.sigmastream.pr.processor.ChannelQualityP" name="deviceAswiDuration"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$11(java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void writeCSV(long, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$3(java.lang.String, java.lang.Boolean)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$1(java.util.EnumMap, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$initPreviosState$14(java.lang.String, com.sigmastream.bc.dataquality.DeviceQualityMonitor)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void getMongoDBStats()"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$initPreviosState$13(java.lang.String, com.sigmastream.bc.dataquality.ChannelQualityMonitor)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="com.sigmastream.bc.dataquality.DeviceQualityMonitor createDeviceMonitor(java.lang.String, java.util.Map, java.lang.String, double, com.sigmastream.pr.beans.DataPayload, com.sigmastream.bc.dataquality.DeviceQualityMonitor)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="boolean tryProcess(int, java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$8(java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$createChannelMonitor$16(java.util.EnumMap, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$2(java.util.EnumMap, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$initChannelQualityPConfig$6(java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="com.sigmastream.bc.dataquality.WellQualityMonitor createWellMonitor(com.sigmastream.bc.dataquality.WellQualityMonitor)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="java.lang.Boolean lambda$tryProcess$15(java.lang.String, java.lang.Boolean)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$getMongoDBStats$12(java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="boolean lambda$createDeviceMonitor$19(java.lang.String, java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void init(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$10(java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void initPreviosState()"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$7(java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$createChannelMonitor$18(java.lang.String, java.lang.Boolean)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="boolean lambda$null$4(java.lang.String, java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="boolean isValidate()"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$9(java.lang.Object)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$null$5(java.lang.String, java.util.List, java.util.List, java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void initChannelQualityPConfig()"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="com.sigmastream.bc.dataquality.ChannelQualityMonitor createChannelMonitor(java.util.Map, java.lang.String, double, com.sigmastream.pr.beans.DataPayload, com.sigmastream.bc.dataquality.ChannelQualityMonitor)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$createChannelMonitor$17(java.util.EnumMap, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$init$0(java.lang.String, java.lang.String)"/>
  <method class="com.sigmastream.pr.processor.ChannelQualityP" name="void lambda$createDeviceMonitor$20(java.lang.String, java.util.List, java.util.Map$Entry)"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.StreamMapPayloadP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.FilterChannelP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.MQTTPublisherP" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.processor.ExpectedDataQualityP"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="expectedAswiDuration"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="mChannelExpected"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="mInputStreamConfig"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="mMinLookupTable"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="_log"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="mMaxLookupTable"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="aspectPostFixMap"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="inputDataStreamsInvert"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="mChannelStatus"/>
  <field class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="longTimeAgo"/>
  <method class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="void lambda$init$2(java.util.Map$Entry)"/>
  <method class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="void lambda$null$0(java.util.EnumMap, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="void lambda$null$1(java.util.EnumMap, java.util.Map)"/>
  <method class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="void init(com.hazelcast.jet.core.Processor$Context)"/>
  <method class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="void close()"/>
  <method class="com.sigmastream.pr.processor.ExpectedDataQualityP" name="boolean tryProcess(int, java.lang.Object)"/>
  <class name="com.sigmastream.pr.yh.json.connect.ConnectResponse"/>
  <field class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="DATA"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="com.sigmastream.pr.yh.json.connect.ConnectResponse withMSG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="com.sigmastream.pr.yh.json.connect.ConnectResponse withDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="void setDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="com.sigmastream.pr.yh.json.Data getDATA()"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="com.sigmastream.pr.yh.json.connect.ConnectResponse withSTATUS(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.connect.ConnectResponse" name="java.lang.String toString()"/>
  <class name="com.sigmastream.pr.yh.json.config.ConfigurationResponse"/>
  <field class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="DATA"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="com.sigmastream.pr.yh.json.config.ConfigurationResponse withDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="void setDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="com.sigmastream.pr.yh.json.Data getDATA()"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="com.sigmastream.pr.yh.json.config.ConfigurationResponse withMSG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="com.sigmastream.pr.yh.json.config.ConfigurationResponse withSTATUS(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.config.ConfigurationResponse" name="java.lang.String toString()"/>
  <class name="com.sigmastream.pr.yh.json.notification.NotificationResponse"/>
  <field class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="DATA"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="void setDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="com.sigmastream.pr.yh.json.Data getDATA()"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="com.sigmastream.pr.yh.json.notification.NotificationResponse withDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="com.sigmastream.pr.yh.json.notification.NotificationResponse withMSG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="com.sigmastream.pr.yh.json.notification.NotificationResponse withSTATUS(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.notification.NotificationResponse" name="java.lang.String toString()"/>
  <class name="com.sigmastream.pr.yh.json.Event"/>
  <field class="com.sigmastream.pr.yh.json.Event" name="type"/>
  <field class="com.sigmastream.pr.yh.json.Event" name="eventInfo"/>
  <field class="com.sigmastream.pr.yh.json.Event" name="timestamp"/>
  <field class="com.sigmastream.pr.yh.json.Event" name="action"/>
  <field class="com.sigmastream.pr.yh.json.Event" name="mode"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="void setEventInfo(java.util.Map)"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="java.lang.String getType()"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="void setAction(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="java.lang.String getMode()"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="void setTimestamp(long)"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="java.util.Map getEventInfo()"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="void setType(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="java.lang.String toString()"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="void setMode(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="long getTimestamp()"/>
  <method class="com.sigmastream.pr.yh.json.Event" name="java.lang.String getAction()"/>
  <class name="com.sigmastream.pr.yh.json.YhRequest"/>
  <field class="com.sigmastream.pr.yh.json.YhRequest" name="version"/>
  <field class="com.sigmastream.pr.yh.json.YhRequest" name="messageId"/>
  <field class="com.sigmastream.pr.yh.json.YhRequest" name="_log"/>
  <field class="com.sigmastream.pr.yh.json.YhRequest" name="action"/>
  <field class="com.sigmastream.pr.yh.json.YhRequest" name="payload"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void setEndpoint(java.lang.String, java.lang.String, java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="java.lang.String getVersion()"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void setVersion(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="int getParamsSize()"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="java.lang.String getMessageId()"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="net.sf.json.JSONObject getParams()"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void setAction(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void setMessageId(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="java.lang.String toJSON()"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void setPayload(java.util.Map)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="java.util.Map getPayload()"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void addParam(java.lang.String, java.lang.Object, java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void main(java.lang.String[])"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="com.sigmastream.pr.yh.json.YhRequest parse(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="void addParam(java.lang.String, java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.YhRequest" name="java.lang.String getAction()"/>
  <class name="com.sigmastream.pr.yh.json.Value"/>
  <field class="com.sigmastream.pr.yh.json.Value" name="ID"/>
  <field class="com.sigmastream.pr.yh.json.Value" name="VALUE"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="java.lang.String getVALUE()"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="com.sigmastream.pr.yh.json.Value withVALUE(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="com.sigmastream.pr.yh.json.Value withID(long)"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="void setID(long)"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="java.lang.String toString()"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="void setVALUE(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Value" name="long getID()"/>
  <class name="com.sigmastream.pr.yh.json.YhBaseResponse"/>
  <field class="com.sigmastream.pr.yh.json.YhBaseResponse" name="STATUS"/>
  <field class="com.sigmastream.pr.yh.json.YhBaseResponse" name="MSGID"/>
  <field class="com.sigmastream.pr.yh.json.YhBaseResponse" name="MSG"/>
  <field class="com.sigmastream.pr.yh.json.YhBaseResponse" name="CORRID"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="void setSTATUS(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="java.lang.String getCORRID()"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="void setCORRID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="void setMSGID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="java.lang.String getMSG()"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="java.lang.String getMSGID()"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="void setMSG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.YhBaseResponse" name="java.lang.String getSTATUS()"/>
  <class name="com.sigmastream.pr.yh.json.Data"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="CHANNEL_CONFIG"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="METADATA"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="CONFIGURATIONID"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="REASON"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="CONTEXT"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="SESSIONID"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="DEVICEKEY"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="FEEDID"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="EVENT"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="VALUES"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="SUBSCRIPTIONID"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="TIMESTAMP"/>
  <field class="com.sigmastream.pr.yh.json.Data" name="ISCACHED"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withVALUES(java.util.List)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withCONTEXT(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setCONTEXT(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setSESSIONID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getSESSIONID()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setEVENT(com.sigmastream.pr.yh.json.Event)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Event getEVENT()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setMETADATA(java.util.Map)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withDEVICEKEY(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setCONFIGURATIONID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setREASON(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setSUBSCRIPTIONID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getCHANNEL_CONFIG()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getCONTEXT()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withTIMESTAMP(long)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withCONFIGURATIONID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getDEVICEKEY()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setFEEDID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getREASON()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getSUBSCRIPTIONID()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setDEVICEKEY(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.util.List getVALUES()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setVALUES(java.util.List)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withREASON(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String toString()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setTIMESTAMP(long)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="boolean getISCACHED()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setISCACHED(boolean)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withMETADATA(java.util.Map)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.util.Map getMETADATA()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="long getTIMESTAMP()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withSESSIONID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withISCACHED(boolean)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withSUBSCRIPTIONID(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getFEEDID()"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="void setCHANNEL_CONFIG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="com.sigmastream.pr.yh.json.Data withCHANNEL_CONFIG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.Data" name="java.lang.String getCONFIGURATIONID()"/>
  <class name="com.sigmastream.pr.yh.json.DataResponse"/>
  <field class="com.sigmastream.pr.yh.json.DataResponse" name="DATA"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="com.sigmastream.pr.yh.json.DataResponse withDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="boolean equals(java.lang.Object)"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="void setDATA(com.sigmastream.pr.yh.json.Data)"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="com.sigmastream.pr.yh.json.Data getDATA()"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="int hashCode()"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="com.sigmastream.pr.yh.json.DataResponse withSTATUS(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="com.sigmastream.pr.yh.json.DataResponse withMSG(java.lang.String)"/>
  <method class="com.sigmastream.pr.yh.json.DataResponse" name="java.lang.String toString()"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.yh.sink.MapSinkP" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.common.BCSinks"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _CSVSinkP(java.util.Map, java.util.Map, com.hazelcast.function.FunctionEx, com.sigmastream.bc.jobs.JobConfiguration, java.util.List, com.sigmastream.pr.common.YhChannelConfig)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.jet.core.Processor lambda$_CSVSinkP$e9deb55b$1(java.util.Map, java.util.Map, com.hazelcast.function.FunctionEx, com.sigmastream.bc.jobs.JobConfiguration, java.util.List, com.sigmastream.pr.common.YhChannelConfig)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _JetMapSinkPayloadsP(java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.jet.core.Processor lambda$_MapSinkP$f3d4afee$1(java.lang.String, java.util.Map, java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _MQTTPublisherP(java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _MapSinkP(java.lang.String, java.util.Map, java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _YhWSocketSinkP(java.util.Map, java.util.Map, com.hazelcast.function.FunctionEx, com.sigmastream.bc.jobs.JobConfiguration, java.util.List, com.sigmastream.pr.common.YhChannelConfig)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.jet.core.Processor lambda$_JetMapSinkP$d71ad53d$1(java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.jet.core.Processor lambda$_JetMapSinkPayloadsP$ba68429b$1(java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _JetMapSinkP(java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.jet.core.Processor lambda$_YhWSocketSinkP$e9deb55b$1(java.util.Map, java.util.Map, com.hazelcast.function.FunctionEx, com.sigmastream.bc.jobs.JobConfiguration, java.util.List, com.sigmastream.pr.common.YhChannelConfig)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.jet.core.Processor lambda$_MQTTPublisherP$35e66512$1(java.util.Map, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSinks" name="com.hazelcast.function.SupplierEx _PayloadListParserP()"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.MajorEventCorrection" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.common.BCSources"/>
  <field class="com.sigmastream.pr.common.BCSources" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_RotatingP$dd22d608$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_FFTCollectOperationP$93fade64$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StreamAugmentationP$57d4ba5c$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_ReamingP$2a53030$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _MLEventP(com.sigmastream.bc.jobs.JobConfiguration, int, java.lang.String, java.lang.String)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _ConnectionDetectorP(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_CSVDataWriterP$ee5b1ed1$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _RotatingOutP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_ConnectionDetectorP$9c7c4e7e$1(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _RotateAndCirculateP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _YhJetMapSourceP(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.pipeline.StreamSource _CSVBatchDataReaderP(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DelayedDecisionP(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _TLAP(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _JetMapSourceP(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _FFTCollectOperationP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_JetMapSourceP$952c4ca1$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _PumpInP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _ChannelQualityP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, java.util.Map, com.sigmastream.pr.common.YhChannelConfig)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _ReamingP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _BackReamingP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.pipeline.StreamSource _SocketStreamDataReaderPUpdated(com.sigmastream.bc.websocketFactory.SocketSubscribe, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _3psStreamSocketPSupplier(java.util.Map, java.nio.charset.Charset)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _BasicEventP(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx TripDetectorP(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _RotatingInP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _CirculateP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DelayedDecisionP$9c7c4e7e$1(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_RotatingInP$2a53030$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _TripOutP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_OnOffBottomDetectorP$8fa24ee1$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_OEDetectorP$7710e5b3$1(java.util.Map, boolean, boolean, boolean, java.lang.String, java.util.List, java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DysFunctionP(java.lang.String, java.lang.String, java.util.Map, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.pipeline.StreamSource _CSVDQBatchDataReaderP(com.sigmastream.pr.processor.oes.CSVDQBatchDataReaderP, com.hazelcast.function.FunctionEx)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_ChannelQualityP$edf52081$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, java.util.Map, com.sigmastream.pr.common.YhChannelConfig)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StreamFilterPayloadP(java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_FilterStreamsP$1e05843a$1(java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _MSEP(java.lang.String, java.lang.String, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_WellQualityP$c0c03ae7$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StandCalculationP$9c7c4e7e$1(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StreamMapPayloadP()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _CSVDataReaderP(java.util.Map, java.util.Map, java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DataStreamOperationP(java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.util.List, double, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_EventCleaner$9c7c4e7e$1(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DataSlopeP$15c5fb54$1()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_CirculateP$dd22d608$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _EventCleaner(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_RunningAvgP$15c5fb54$1()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _WellQualityP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _FilterEnableDataPushPayload()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StreamAugmentationP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_TripOutP$36a28e54$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DataSlopeP()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_TripInP$2a53030$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _FrictionTestDetectorP(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_YhJetMapSourceP$ce9ce8de$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DysFunctionP$9271413f$1(java.lang.String, java.lang.String, java.util.Map, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _TimeAccumulateP(java.lang.Long, java.lang.Double, java.util.Map, java.util.List, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.FunctionEx getTimeStampEntryParseF()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _WellEventAggregationP(com.sigmastream.pr.beans.WellEventAggregateParams)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_SlideDrillingP$28123ed1$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _SSIndicatorP(java.util.Map, java.util.Map, java.util.Map, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _OEDetectorP(java.util.Map, boolean, boolean, boolean, java.lang.String, java.util.List, java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_TLAP$936b8027$1(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="java.util.List lambda$getTimeStampEntryParseF$517b11b5$1(java.lang.Object)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _SignalStreamPayloadListP()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_FFTOperationP$93fade64$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StreamMapPayloadP$15c5fb54$1()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _FilterStreamsP(java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_InSlipsP$ffbfe9a$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_FrictionTestDetectorP$d7dec705$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_RotatingOutP$36a28e54$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _TripInP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StreamFilterPayloadP$b84cd70$1(java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _ExpectedDataQualityP(double, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _FFTOperationP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_WellEventAggregationP$9e871fd1$1(com.sigmastream.pr.beans.WellEventAggregateParams)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DrillingRotaryP$28123ed1$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DeviceQualityP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _ComplexEventP(java.lang.String, java.lang.Double, java.lang.Long, java.lang.Long, java.lang.Long, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.lang.Long, java.lang.Long, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_TimeAccumulateP$d2d8d5c0$1(java.lang.Long, java.lang.Double, java.util.Map, java.util.List, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DrillingRotaryP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_RotateAndCirculateP$dd22d608$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _DataAnalyzerP(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_ExpectedDataQualityP$93e4c8d3$1(double, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_SSIndicatorP$f079ba4a$1(java.util.Map, java.util.Map, java.util.Map, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StreamMovingAverageAugmentationP$8f4f014d$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_CSVDataReaderP$2ead8bb7$1(java.util.Map, java.util.Map, java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StreamSimulatorP$a6441604$1(java.lang.String, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _FilterChannelP(java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DataStreamOperationP$bad6a4a4$1(java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.util.List, double, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DataAnalyzerP$936b8027$1(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StreamMovingAverageAugmentationP(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_BasicEventP$9c7c4e7e$1(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_PumpOutP$36a28e54$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="java.lang.Object lambda$_MLEventP$e44d5c52$1(com.sigmastream.bc.jobs.JobConfiguration, int, java.lang.String, java.lang.String)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_3psStreamSocketPSupplier$620ffca4$1(java.util.Map, java.nio.charset.Charset)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$TripDetectorP$9c7c4e7e$1(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_SignalStreamPayloadListP$15c5fb54$1()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _CSVDataWriterP(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_ComplexEventP$d83af2e9$1(java.lang.String, java.lang.Double, java.lang.Long, java.lang.Long, java.lang.Long, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.lang.Long, java.lang.Long, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _PumpOutP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _SlideDrillingP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _OnOffBottomDetectorP(java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _RunningAvgP()"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StreamSimulatorP(java.lang.String, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_FilterChannelP$b84cd70$1(java.util.List)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_BackReamingP$61081a2d$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _RotatingP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_StationaryP$dd22d608$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StandCalculationP(com.sigmastream.pr.beans.ConfigBean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_MSEP$5860e66f$1(java.lang.String, java.lang.String, com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_DeviceQualityP$c0c03ae7$1(com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String, java.lang.String, java.util.Map, java.util.Map, java.util.Map)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _StationaryP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.jet.core.Processor lambda$_PumpInP$2a53030$1(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="boolean lambda$_FilterEnableDataPushPayload$df271003$1(java.lang.Object)"/>
  <method class="com.sigmastream.pr.common.BCSources" name="com.hazelcast.function.SupplierEx _InSlipsP(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer$ListIteratorP" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <field class="com.sigmastream.pr.utils.UnitOfMeasurementReader" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.utils.UOMDictionary" name="serialVersionUID"/>
  <class name="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_Pressure_Set_Point"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_WOB_Set_Point_Tension"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_Set_Point_Timestamp"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_WOB_Set_Point_Hookload"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_WOB_Set_Point_BitDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_RPM_Set_Point"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_WOB_Set_Point_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_Torque_Set_Point"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_Torque_surface_sub_Point"/>
  <field class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="rd_WOB_Set_Point_Tension_surface_sub"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="java.util.Map processSlackoffRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="void setRd_Set_Point_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="void setSlackoff(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="void parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="long getRd_Set_Point_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.RotaryDrillingSlackoffValue" name="void updateSlackoff(com.sigmastream.pr.beans.RotaryDrillingSlackoffValue)"/>
  <class name="com.sigmastream.pr.beans.SlideDrillingSlackoffValue"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_WOB_Set_Point_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_WOB_Set_Point_Tension"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_RPM_Set_Point"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_WOB_Set_Point_Hookload"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_Torque_surface_sub_Point"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_WOB_Set_Point_BitDepth"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_Torque_Set_Point"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_Pressure_Set_Point"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_Set_Point_Timestamp"/>
  <field class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="sd_WOB_Set_Point_Tension_surface_sub"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="java.util.Map processSlackoffSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="void setSlackoff(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="long getSd_Set_Point_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="void parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="void setSd_Set_Point_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.SlideDrillingSlackoffValue" name="void updateSlackoff(com.sigmastream.pr.beans.SlideDrillingSlackoffValue)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$4" name="java.lang.String getValue(com.sigmastream.pr.beans.UnitOfMeasurement)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$4" name="java.lang.Object getValue(java.lang.Object)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$3" name="java.lang.String getValue(com.sigmastream.pr.beans.UnitOfMeasurement)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$3" name="java.lang.Object getValue(java.lang.Object)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$2" name="java.lang.String getValue(com.sigmastream.pr.beans.UnitOfMeasurement)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$2" name="java.lang.Object getValue(java.lang.Object)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$1" name="java.lang.String getValue(com.sigmastream.pr.beans.UnitOfMeasurement)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement$1" name="java.lang.Object getValue(java.lang.Object)"/>
  <class name="com.sigmastream.pr.beans.UnitOfMeasurement"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="D"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="C"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="name"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="B"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="id"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="category"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="A"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="SYMBOL"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="CATEGORY"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="symbol"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="dimension"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="ISSI"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="is_si"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="NAME"/>
  <field class="com.sigmastream.pr.beans.UnitOfMeasurement" name="base_unit"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setC(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getBase_unit()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String createTableQuery()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getA()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getB()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getCategory()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getC()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getDimension()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getUpdateQuery()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getD()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setD(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setA(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getIs_si()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getSymbol()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setName(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getName()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setDimension(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="java.lang.String getInsertQuery()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="int getId()"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setSymbol(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setId(int)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setB(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setIs_si(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void parseResultSet(java.sql.ResultSet)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setBase_unit(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.UnitOfMeasurement" name="void setCategory(java.lang.String)"/>
  <class name="com.sigmastream.pr.beans.CorrectSlideOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pickup_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slackoff_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slackoff_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slackoff_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pickup_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slackoff_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pickup_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pickup_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pickup_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pickup_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slideReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_In_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slackoff_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="slackoff_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="pump_Out_Tension"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="long getPump_In_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.lang.Double getPump_In_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void parseSlackoffSlideVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPump_In_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="long getPump_Out_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void parsePickupSlideVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.lang.Double getPump_Out_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.util.Map processSlideReferenceVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.util.Map processSlackoffSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPump_Out_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.lang.Double getSlideReferenceValue_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void update(com.sigmastream.pr.beans.CorrectSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.lang.Double getPump_In_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPump_In_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="long getSlideReferenceValue_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.lang.Double getPump_Out_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void updateStationary(com.sigmastream.pr.beans.CorrectSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPumpOut(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPump_Out_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setSlideReferenceValue_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void parseSlideReferenceVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.util.Map processPickupSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPumpIn(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="long getPump_In_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setSlideReferenceValue_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="long getPump_Out_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="java.lang.Double getSlideReferenceValue_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="long getSlideReferenceValue_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPump_In_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void updatePumpOut(com.sigmastream.pr.beans.CorrectSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setSlideReferenceValue_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void setPump_Out_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectSlideOffBottomValue" name="void updatePumpIn(com.sigmastream.pr.beans.CorrectSlideOffBottomValue)"/>
  <class name="com.sigmastream.pr.beans.ComplexEventPayload"/>
  <field class="com.sigmastream.pr.beans.ComplexEventPayload" name="events"/>
  <field class="com.sigmastream.pr.beans.ComplexEventPayload" name="payload"/>
  <method class="com.sigmastream.pr.beans.ComplexEventPayload" name="void setPayload(com.sigmastream.pr.common.TimestampedEntry)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventPayload" name="com.sigmastream.pr.common.TimestampedEntry getPayload()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventPayload" name="com.sigmastream.pr.common.TimestampedEntry process(com.sigmastream.pr.beans.ComplexEventPayload)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventPayload" name="void setEvents(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventPayload" name="java.util.Map getEvents()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventPayload" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <class name="com.sigmastream.pr.beans.ConnectionSubEventValues"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownStartBitDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownEndPayload"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="pickingUpEndPayload"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownEndBitDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpTorque"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="pickingUpEndBitDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpStartBitDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpEndHoleDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpStartHoleDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="pickingUpStartHoleDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpEndBitDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="pickingUpStartBitDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpEndPayload"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="pickingUpEndHoleDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownStartHoleDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="makingUpStartPayload"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownTorque"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownEndHoleDepth"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="breakingDownStartPayload"/>
  <field class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="pickingUpStartPayload"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void copyMakingUpFrom(com.sigmastream.pr.beans.ConnectionSubEventValues)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getPickingUpEndHoleDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="long getMakingUpStartTime()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getPickingUpEndBitDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getPickingUpStartBitDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void process(com.sigmastream.pr.common.TimestampedEntry, com.sigmastream.pr.processor.oes.ConnectionDetectorP)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getMakingUpEndBitDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="long getBreakingDownEndTime()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getBreakingDownEndBitDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getPickingUpStartHoleDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void copyPickingUpFrom(com.sigmastream.pr.beans.ConnectionSubEventValues)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void parsePickingUp(com.sigmastream.pr.common.TimestampedEntry, com.sigmastream.pr.processor.oes.ConnectionDetectorP)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getBreakingDownTorque()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="long getMakingUpEndTime()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void setBreakingDown(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void cleanPickUp()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void setPickingUp(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="long getBreakingDownStartTime()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getMakingUpStartBitDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void copyBreakingDownFrom(com.sigmastream.pr.beans.ConnectionSubEventValues)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void parseMakingUp(com.sigmastream.pr.common.TimestampedEntry, com.sigmastream.pr.processor.oes.ConnectionDetectorP)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getBreakingDownStartBitDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="long getPickingUpEndTime()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="long getPickingUpStartTime()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getMakingUpStartHoleDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getMakingUpTorque()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getMakingUpEndHoleDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getBreakingDownEndHoleDepth()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void setMakingUp(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void parseBreakingDown(com.sigmastream.pr.common.TimestampedEntry, com.sigmastream.pr.processor.oes.ConnectionDetectorP)"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="void cleanMakingUp()"/>
  <method class="com.sigmastream.pr.beans.ConnectionSubEventValues" name="com.sigmastream.pr.beans.DataPayload getBreakingDownStartHoleDepth()"/>
  <class name="com.sigmastream.pr.beans.ConfigBean"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="delayedTime"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="hookloadFTAcceptedDelta"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="csvDataSourceConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="isStreamEventWithoutChange"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="fixedLag"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="tripInFt"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="detectOnBottomConnection"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="bitDepthCutOffLevel"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputErrorValuesConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="rigId"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="standInProgressThreshold"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="isSlideAssistDetect"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="moeDebug"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputErrorValues"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="_log"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="eventsCorrectionConfigs"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="torqueSubEventThresold"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="actualStand"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="isCapturedChangeEvent"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="outputDataStreams"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="windowLength"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="slideAssistWindowTime"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="assetId"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="minStand"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputChannelsConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="unknownTimeDuration"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="tripOutFt"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="operatorName"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="velocityConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="standEventSimulationEnable"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="preFix"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="yhconfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="slideAssistOscillationCount"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="maxStand"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="ftConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="simulationTimeInterval"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputDataStreamsConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputVelocityConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="outputDevicesConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="outputChannelsConfig"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="isDelayedDecision"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="freq"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="outputPath"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputDataStreams"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="standType"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="blockPositionSubEventThresold"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="sinkType"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="ignoreStationaryTimeInterval"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="tripInTagBottomDelta"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="isMultiWell"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="vadarInitiateDepth"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="noDataAvailableGapInterval"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="smallEventsCorrectionConfigs"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="slideBy"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="sourceType"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="inputChannels"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="preservedValueInterval"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="channels"/>
  <field class="com.sigmastream.pr.beans.ConfigBean" name="frictionTestConfig"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setAssetId(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="long getSimulationTimeInterval()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getSlideAssistWindowTime()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSourceType(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getPreFix()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getHookloadFTAcceptedDelta()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getTorqueSubEventThresold()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isCapturedChangeEvent()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setNoDataAvailableGapInterval(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setMultiWell(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getUnknownTimeDuration()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getTripInFt()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isStreamEventWithoutChange()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setStandInProgressThreshold(java.lang.Integer)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setEventsCorrectionConfigs(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.util.Map getInputDataStreamsConfig()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setOperatorName(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setOutputDevicesConfig(java.util.List)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setTripInFt(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setPreservedValueInterval(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setTripInTagBottomDelta(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getStandType()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isSlideAssistDetect()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getVadarInitiateDepth()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void parseConfig(java.util.Map, boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isStandEventSimulationEnable()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setPreFix(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setVadarInitiateDepth(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setUnknownTimeDuration(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setInputDataStreamsConfig(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getOutputPath()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getSourceType()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setFixedLag(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setActualStand(java.lang.Integer)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="int getSlideAssistOscillationCount()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setOutputPath(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isMultiWell()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setFreq(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setStreamEventWithoutChange(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setCapturedChangeEvent(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.util.List getOutputDevicesConfig()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getSlideBy()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.util.Map getCsvDataSourceConfig()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getPreservedValueInterval()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setHookloadFTAcceptedDelta(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getRigId()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Boolean getIsDelayedDecision()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setYhconfig(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.util.Map getYhconfig()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getSinkType()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getIgnoreStationaryTimeInterval()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getTripOutFt()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSlideBy(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.util.Map getSmallEventsCorrectionConfigs()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getFreq()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setBitDepthCutOffLevel(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isMoeDebug()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getTripInTagBottomDelta()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getWindowLength()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getNoDataAvailableGapInterval()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Integer getActualStand()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setIgnoreStationaryTimeInterval(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setDetectOnBottomConnection(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setTorqueSubEventThresold(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Integer getMinStand()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSmallEventsCorrectionConfigs(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setIsDelayedDecision(java.lang.Boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getAssetId()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSlideAssistDetect(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Double getBitDepthCutOffLevel()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setStandType(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setCsvDataSourceConfig(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.String getOperatorName()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getBlockPositionSubEventThresold()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSimulationTimeInterval(long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setBlockPositionSubEventThresold(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.util.Map getEventsCorrectionConfigs()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setTripOutFt(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSlideAssistOscillationCount(int)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Integer getMaxStand()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setMaxStand(java.lang.Integer)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getDelayedTime()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setStandEventSimulationEnable(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setRigId(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Long getFixedLag()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="java.lang.Integer getStandInProgressThreshold()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setMoeDebug(boolean)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setWindowLength(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSinkType(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setDelayedTime(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="boolean isDetectOnBottomConnection()"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setSlideAssistWindowTime(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.ConfigBean" name="void setMinStand(java.lang.Integer)"/>
  <class name="com.sigmastream.pr.beans.EventPayload"/>
  <field class="com.sigmastream.pr.beans.EventPayload" name="events"/>
  <field class="com.sigmastream.pr.beans.EventPayload" name="payload"/>
  <method class="com.sigmastream.pr.beans.EventPayload" name="void setPayload(com.sigmastream.pr.common.TimestampedEntry)"/>
  <method class="com.sigmastream.pr.beans.EventPayload" name="com.sigmastream.pr.common.TimestampedEntry getPayload()"/>
  <method class="com.sigmastream.pr.beans.EventPayload" name="com.sigmastream.pr.common.TimestampedEntry process(com.sigmastream.pr.beans.EventPayload)"/>
  <method class="com.sigmastream.pr.beans.EventPayload" name="void setEvents(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.EventPayload" name="java.util.Map getEvents()"/>
  <method class="com.sigmastream.pr.beans.EventPayload" name="java.lang.Object $deserializeLambda$(java.lang.invoke.SerializedLambda)"/>
  <class name="com.sigmastream.pr.beans.ComplexEventState"/>
  <field class="com.sigmastream.pr.beans.ComplexEventState" name="type"/>
  <field class="com.sigmastream.pr.beans.ComplexEventState" name="timestamp"/>
  <field class="com.sigmastream.pr.beans.ComplexEventState" name="uom"/>
  <field class="com.sigmastream.pr.beans.ComplexEventState" name="freq"/>
  <field class="com.sigmastream.pr.beans.ComplexEventState" name="stateVariable"/>
  <field class="com.sigmastream.pr.beans.ComplexEventState" name="val"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="java.lang.String getVal()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="java.lang.String getUom()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="java.lang.String getType()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="void setFreq(double)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="double getFreq()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="void setVal(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="com.sigmastream.pr.common.BCComplexEventStateVariables getStateVariable()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="void setTimestamp(long)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="com.sigmastream.pr.beans.DataPayload fromComplexEventState(com.sigmastream.pr.beans.ComplexEventState)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="void setUom(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="void setType(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="java.util.Map fromComplexEventMap(java.util.Map, java.lang.String, double, java.lang.String, long)"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="long getTimestamp()"/>
  <method class="com.sigmastream.pr.beans.ComplexEventState" name="void setStateVariable(com.sigmastream.pr.common.BCComplexEventStateVariables)"/>
  <class name="com.sigmastream.pr.beans.BackfillJobVO$BackfillType"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO$BackfillType" name="PUBLISHER"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO$BackfillType" name="$VALUES"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO$BackfillType" name="ASSET"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO$BackfillType" name="com.sigmastream.pr.beans.BackfillJobVO$BackfillType valueOf(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO$BackfillType" name="com.sigmastream.pr.beans.BackfillJobVO$BackfillType[] values()"/>
  <class name="com.sigmastream.pr.beans.BackfillJobVO"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="duration"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="completionTime"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_BYTES"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_ASSET_ID"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_START_TIME"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="_id"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_COMPLETION_TIME"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_END_TIME"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="starttime"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="channelCount"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_PUBLISHER_ID"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_PERSISTED_COUNT"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="backfillType"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_DURATION"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="chIds"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_ID"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="bytes"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="persistedCount"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="backFillVOs"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="status"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="assetId"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="publisherId"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_CHANNEL_COUNT"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_BACKFILL_GROUP"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="feedId"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_CHANNEL_IDS"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_STATUS"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="backFillGroup"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="endtime"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="BACKFILL_TYPES"/>
  <field class="com.sigmastream.pr.beans.BackfillJobVO" name="COL_FEED_ID"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getDuration()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.lang.String toJsonString(com.sigmastream.pr.beans.BackfillJobVO)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void lambda$new$0(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setDuration(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.lang.String toJsonString()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getCompletionTime()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="com.sigmastream.pr.beans.BackfillJobVO fromMap(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="boolean isLessThanEqualByGroup(int)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setBackFillGroup(int)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setBytes(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setPersistedCount(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.lang.String getStatus()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setFeedId(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.util.List getChIds()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setEndtime(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.util.Map toMap(com.sigmastream.pr.beans.BackfillJobVO)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setChIds(java.util.List)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="int getBackFillGroup()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getId()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getStarttime()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.lang.String getBackfillType()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getBytes()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.lang.String toString()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setStarttime(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.lang.String getAssetId()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getFeedId()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setAssetId(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getEndtime()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void generateLatestId()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long get_id()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setPublisherId(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void lambda$new$1(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.util.Map toMap()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="int getBackFilllGroup(boolean, boolean)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setChannelCount(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getPersistedCount()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="boolean isGreaterThanEqualByGroup(int)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getPublisherId()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="long getChannelCount()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setBackfillType(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="java.util.Iterator iterator()"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setCompletionTime(long)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="com.sigmastream.pr.beans.BackfillJobVO getFromJson(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.BackfillJobVO" name="void setStatus(java.lang.String)"/>
  <class name="com.sigmastream.pr.beans.DataPayload"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="event"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="uom"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="freq"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="val"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="typ"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="datapushEnable"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="log"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="ts"/>
  <field class="com.sigmastream.pr.beans.DataPayload" name="nm"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="com.sigmastream.pr.beans.DataPayload fromTimestampedEntry(com.sigmastream.pr.common.TimestampedEntry)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void copyFrom(com.sigmastream.pr.beans.DataPayload)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setDatapushEnable(boolean)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String toJson()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setEvent(boolean)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="boolean isDatapushEnable()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="com.sigmastream.pr.beans.DataPayload getDataPayload()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String getVal()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String getLog()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String toString()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String getKey()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String getUom()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="long getTime()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String getTyp()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setTyp(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setFreq(double)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="com.sigmastream.pr.beans.DataPayload parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="long getTs()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="java.lang.String getNm()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setLog(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="double getValue()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="boolean isEvent()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="double getFreq()"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setTs(long)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setVal(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setNm(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.DataPayload" name="void setUom(java.lang.String)"/>
  <class name="com.sigmastream.pr.beans.RotaryOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="slackoff_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="pickup_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="slackoff_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Torque"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="pickup_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="pickup_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="pickup_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_BitDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_BitDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Timestamp"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="slackoff_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Tension"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_RPM"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="pickup_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="slackoff_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Timestamp"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Pressure"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Pressure"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="pickup_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Torque"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_Hookload"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Hookload"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="back_Reaming_RPM"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="forward_Reaming_Tension"/>
  <field class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="rotaryReferenceValue_Tension_surface_sub"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="java.util.Map processSlackoffRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="java.util.Map processPickupRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="void setForwardReaming(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="void setBackReaming(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.RotaryOffBottomValue" name="java.util.Map processRotaryReferenceVariable(long, double)"/>
  <class name="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="slackoff_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="pickup_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="slackoff_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="pickup_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="pickup_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="pickup_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="slackoff_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="pickup_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="slackoff_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="pickup_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_Out_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotaryReferenceValue_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="rotating_In_Torque_surface_sub"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void parseRotaryReferenceVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="long getRotaryReferenceValue_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotaryReferenceValue_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void parseSlackoffRotaryVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.util.Map processSlackoffRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void update(com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.lang.Double getRotating_In_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotaryReferenceValue_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="long getRotating_In_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void updateStationary(com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotating_In_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.util.Map processRotaryReferenceVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.lang.Double getRotating_In_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotating_In_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotating_Out_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="long getRotating_In_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotatingIn(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void updateRotatingIn(com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotating_In_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotating_Out_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="long getRotaryReferenceValue_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotating_Out_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotaryReferenceValue_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="long getRotating_Out_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void parsePickupRotaryVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.util.Map processPickupRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.lang.Double getRotating_Out_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.lang.Double getRotating_Out_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void updateRotatingOut(com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="long getRotating_Out_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.lang.Double getRotaryReferenceValue_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="java.lang.Double getRotaryReferenceValue_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripRotaryOffBottomValue" name="void setRotatingOut(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <class name="com.sigmastream.pr.beans.SlideOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Torque"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_BitDepth"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Pressure"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Timestamp"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pickup_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Hookload"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slackoff_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slackoff_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Timestamp"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slackoff_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Tension"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_Torque"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Pressure"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pickup_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slackoff_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pickup_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pickup_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pickup_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Hookload"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_RPM"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pickup_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slideReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_BitDepth"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_In_RPM"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slackoff_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="slackoff_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.SlideOffBottomValue" name="pump_Out_Tension"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="java.util.Map processSlideReferenceVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="java.util.Map processPickupSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="java.util.Map processSlackoffSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="void setPumpIn(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.SlideOffBottomValue" name="void setPumpOut(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <class name="com.sigmastream.pr.beans.StandPayload"/>
  <field class="com.sigmastream.pr.beans.StandPayload" name="bitDepth"/>
  <field class="com.sigmastream.pr.beans.StandPayload" name="holeDepth"/>
  <field class="com.sigmastream.pr.beans.StandPayload" name="serialVersionUID"/>
  <method class="com.sigmastream.pr.beans.StandPayload" name="double getHoleDepth()"/>
  <method class="com.sigmastream.pr.beans.StandPayload" name="double getBitDepth()"/>
  <method class="com.sigmastream.pr.beans.StandPayload" name="void setBitDepth(double)"/>
  <method class="com.sigmastream.pr.beans.StandPayload" name="void setHoleDepth(double)"/>
  <class name="com.sigmastream.pr.beans.TripRotaryOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_RPM"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Tension"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="slackoff_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="pickup_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="slackoff_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="pickup_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="pickup_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_BitDepth"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="pickup_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Tension"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Timestamp"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="slackoff_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_BitDepth"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Torque"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="pickup_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="slackoff_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Pressure"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Torque"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Timestamp"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="pickup_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_RPM"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_Out_Pressure"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotaryReferenceValue_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="rotating_In_Torque_surface_sub"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="java.util.Map processSlackoffRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="java.util.Map processPickupRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="void setRotatingIn(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="void setRotatingOut(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.TripRotaryOffBottomValue" name="java.util.Map processRotaryReferenceVariable(long, double)"/>
  <class name="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="slackoff_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="pickup_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="slackoff_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="slackoff_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="pickup_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="pickup_Rotary_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="pickup_Rotary_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="slackoff_Rotary_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="pickup_Rotary_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="slackoff_Rotary_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="pickup_Rotary_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="back_Reaming_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="forward_Reaming_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="rotaryReferenceValue_Tension_surface_sub"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void parseRotaryReferenceVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="long getRotaryReferenceValue_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setRotaryReferenceValue_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void parseSlackoffRotaryVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.util.Map processSlackoffRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setRotaryReferenceValue_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void update(com.sigmastream.pr.beans.CorrectRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="long getForward_Reaming_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="long getBack_Reaming_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.util.Map processRotaryReferenceVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setForwardReaming(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setBack_Reaming_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="long getRotaryReferenceValue_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.lang.Double getForward_Reaming_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setRotaryReferenceValue_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="long getBack_Reaming_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void parsePickupRotaryVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void updateStationary(com.sigmastream.pr.beans.CorrectRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setForward_Reaming_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void updateBackReaming(com.sigmastream.pr.beans.CorrectRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.util.Map processPickupRotaryVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setBack_Reaming_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setForward_Reaming_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.lang.Double getBack_Reaming_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setForward_Reaming_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setBackReaming(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void updateForwardReaming(com.sigmastream.pr.beans.CorrectRotaryOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.lang.Double getBack_Reaming_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.lang.Double getRotaryReferenceValue_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.lang.Double getForward_Reaming_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="long getForward_Reaming_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="java.lang.Double getRotaryReferenceValue_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectRotaryOffBottomValue" name="void setBack_Reaming_StandCount(long)"/>
  <class name="com.sigmastream.pr.beans.TripSlideOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Tension"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Torque"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Timestamp"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="pickup_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_RPM"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Pressure"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slackoff_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slackoff_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Pressure"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slackoff_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="pickup_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slackoff_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="pickup_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Torque"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="pickup_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="pickup_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_RPM"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Timestamp"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="pickup_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slideReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slackoff_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_BitDepth"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_In_Tension"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="slackoff_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="trip_Out_BitDepth"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="java.util.Map processSlideReferenceVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="java.util.Map processPickupSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="java.util.Map processSlackoffSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="void setTripOut(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.TripSlideOffBottomValue" name="void setTripIn(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <class name="com.sigmastream.pr.beans.WellEventAggregateParams"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="slideAssistWindowTime"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="serialVersionUID"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="isCapturedChangeEvent"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="bitDepthCutOffLevel"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="tripOutFt"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="slideAssistOscillationCount"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="jobConfiguration"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="decisionTime"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="isSlideAssistDetect"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="isDelayedDecision"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="operatorName"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="tripInFt"/>
  <field class="com.sigmastream.pr.beans.WellEventAggregateParams" name="unknownTimeDuration"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setTripInFt(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setSlideAssistWindowTime(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Long getSlideAssistWindowTime()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Double getBitDepthCutOffLevel()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Boolean getIsDelayedDecision()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setCapturedChangeEvent(boolean)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setBitDepthCutOffLevel(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="int getSlideAssistOscillationCount()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setDecisionTime(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Double getTripOutFt()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="boolean isCapturedChangeEvent()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Long getUnknownTimeDuration()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setTripOutFt(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Long getDecisionTime()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setSlideAssistOscillationCount(int)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.String getOperatorName()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setOperatorName(java.lang.String)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setSlideAssistDetect(boolean)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="java.lang.Double getTripInFt()"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setUnknownTimeDuration(java.lang.Long)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="void setIsDelayedDecision(java.lang.Boolean)"/>
  <method class="com.sigmastream.pr.beans.WellEventAggregateParams" name="boolean isSlideAssistDetect()"/>
  <class name="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="pickup_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slackoff_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slackoff_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slackoff_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="pickup_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slackoff_Slide_Drag_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="pickup_Slide_Drag_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="pickup_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="pickup_Slide_DeltaP"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_RPM"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_StandCount"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Pressure"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Timestamp"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="pickup_Slide_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slideReferenceValue_Hookload"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Torque_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_Tension_surface_sub"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_HoleDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slackoff_Slide_Torque"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="slackoff_Slide_Drag_Tension"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_Out_BitDepth"/>
  <field class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="trip_In_StandCount"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="long getTrip_In_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTrip_Out_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void parseSlackoffSlideVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void updateTripIn(com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.lang.Double getTrip_In_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="long getTrip_In_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.util.Map process(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.lang.Double getTrip_Out_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void parsePickupSlideVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.util.Map processSlideReferenceVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.util.Map processSlackoffSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.lang.Double getSlideReferenceValue_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTrip_In_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setStationary(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="long getTrip_Out_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void updateTripOut(com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="long getSlideReferenceValue_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTrip_In_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTripIn(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void update(com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.lang.Double getTrip_Out_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTrip_Out_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setSlideReferenceValue_Timestamp(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void updateStationary(com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.lang.Double getTrip_In_Hookload()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void parseSlideReferenceVariable(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.util.Map processPickupSlideVariable(long, double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setSlideReferenceValue_Hookload(java.lang.Double)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTripOut(java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, java.lang.Double, long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTrip_Out_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="java.lang.Double getSlideReferenceValue_HoleDepth()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="long getSlideReferenceValue_Timestamp()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void parse(java.util.Map)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="long getTrip_Out_StandCount()"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setSlideReferenceValue_StandCount(long)"/>
  <method class="com.sigmastream.pr.beans.CorrectTripSlideOffBottomValue" name="void setTrip_In_StandCount(long)"/>
</expose>
<map>
  <class name="com.sigmastream.main.Response" map="b"/>
  <field class="com.sigmastream.main.Response" name="status" map="b"/>
  <field class="com.sigmastream.main.Response" name="displayMsgs" map="c"/>
  <field class="com.sigmastream.main.Response" name="data" map="d"/>
  <field class="com.sigmastream.main.Response" name="hasfileContent" map="e"/>
  <field class="com.sigmastream.main.Response" name="serialVersionUID" map="f"/>
  <method class="com.sigmastream.main.Response" name="void setDisplayMsgs(java.util.List)" map="b"/>
  <method class="com.sigmastream.main.Response" name="void convertJsonToWebResponse(java.lang.Object)" map="b"/>
  <method class="com.sigmastream.main.Response" name="void setHasfileContent(boolean)" map="b"/>
  <method class="com.sigmastream.main.Response" name="void setAttribute(java.lang.String, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.main.Response" name="java.util.List getDisplayMsgs()" map="b"/>
  <method class="com.sigmastream.main.Response" name="boolean isHasfileContent()" map="c"/>
  <method class="com.sigmastream.main.Response" name="java.util.Map getData()" map="d"/>
  <method class="com.sigmastream.main.Response" name="void setData(java.util.Map)" map="b"/>
  <method class="com.sigmastream.main.Response" name="void setStatus(java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.Response" name="java.lang.String toJson()" map="e"/>
  <method class="com.sigmastream.main.Response" name="java.lang.String getStatus()" map="f"/>
  <method class="com.sigmastream.main.Response" name="void addDisplayMsgs(java.lang.String)" map="c"/>
  <class name="com.sigmastream.main.ReverseLineInputStream" map="c"/>
  <field class="com.sigmastream.main.ReverseLineInputStream" name="in" map="b"/>
  <field class="com.sigmastream.main.ReverseLineInputStream" name="lastPosInFile" map="c"/>
  <field class="com.sigmastream.main.ReverseLineInputStream" name="currentPos" map="d"/>
  <field class="com.sigmastream.main.ReverseLineInputStream" name="currentLineStart" map="e"/>
  <field class="com.sigmastream.main.ReverseLineInputStream" name="currentLineEnd" map="f"/>
  <method class="com.sigmastream.main.ReverseLineInputStream" name="int read()" map="read"/>
  <method class="com.sigmastream.main.ReverseLineInputStream" name="void close()" map="close"/>
  <method class="com.sigmastream.main.ReverseLineInputStream" name="void findPrevLine()" map="b"/>
  <class name="com.sigmastream.main.LogRolloverStrategy" map="d"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="compressionLevel" map="b"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="maxIndex" map="c"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="useMax" map="d"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="minIndex" map="e"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="DEFAULT_WINDOW_SIZE" map="f"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="MIN_WINDOW_SIZE" map="g"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="subst" map="h"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="LOGGER" map="i"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="EXT_ZIP" map="j"/>
  <field class="com.sigmastream.main.LogRolloverStrategy" name="EXT_GZIP" map="k"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="com.sigmastream.main.LogRolloverStrategy createStrategy(java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.apache.logging.log4j.core.config.Configuration)" map="b"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="int purgeDescending(int, int, org.apache.logging.log4j.core.appender.rolling.RollingFileManager)" map="b"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="int purgeAscending(int, int, org.apache.logging.log4j.core.appender.rolling.RollingFileManager)" map="c"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="int getCompressionLevel()" map="b"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)" map="rollover"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="int getMaxIndex()" map="c"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="int getMinIndex()" map="d"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="int purge(int, int, org.apache.logging.log4j.core.appender.rolling.RollingFileManager)" map="d"/>
  <method class="com.sigmastream.main.LogRolloverStrategy" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.main.MongoDBManager$1" map="1"/>
  <field class="com.sigmastream.main.MongoDBManager$1" name="this$0" map="b"/>
  <field class="com.sigmastream.main.MongoDBManager$1" name="val$results" map="c"/>
  <method class="com.sigmastream.main.MongoDBManager$1" name="void apply(java.lang.Object)" map="apply"/>
  <method class="com.sigmastream.main.MongoDBManager$1" name="void apply(org.bson.Document)" map="b"/>
  <class name="com.sigmastream.main.MongoDBManager" map="e"/>
  <field class="com.sigmastream.main.MongoDBManager" name="instance" map="b"/>
  <field class="com.sigmastream.main.MongoDBManager" name="port" map="c"/>
  <field class="com.sigmastream.main.MongoDBManager" name="mongoClient" map="d"/>
  <field class="com.sigmastream.main.MongoDBManager" name="_log" map="e"/>
  <field class="com.sigmastream.main.MongoDBManager" name="host" map="f"/>
  <method class="com.sigmastream.main.MongoDBManager" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.main.MongoDBManager" name="com.sigmastream.main.MongoDBManager getInstance(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.MongoDBManager" name="void closeMongoClient()" map="b"/>
  <method class="com.sigmastream.main.MongoDBManager" name="java.util.List findWhere(java.lang.String, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.MongoDBManager" name="java.util.List getFilterFromMap(java.util.Map)" map="b"/>
  <method class="com.sigmastream.main.MongoDBManager" name="com.mongodb.client.MongoDatabase getConnection(java.lang.String)" map="b"/>
  <class name="com.sigmastream.main.IMapManger" map="f"/>
  <field class="com.sigmastream.main.IMapManger" name="JOB_CONFIGURATION" map="b"/>
  <field class="com.sigmastream.main.IMapManger" name="JOB_INFO_MAP_KEY" map="c"/>
  <method class="com.sigmastream.main.IMapManger" name="com.sigmastream.bc.jobs.JobInformation getJobInfo(java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.IMapManger" name="com.hazelcast.map.IMap getJobConfiguration()" map="b"/>
  <method class="com.sigmastream.main.IMapManger" name="void setJobInfo(com.sigmastream.bc.jobs.JobInformation)" map="b"/>
  <class name="com.sigmastream.main.WellValidatorScheduler" map="g"/>
  <field class="com.sigmastream.main.WellValidatorScheduler" name="jobCount" map="b"/>
  <field class="com.sigmastream.main.WellValidatorScheduler" name="reconnectMultiplier" map="c"/>
  <field class="com.sigmastream.main.WellValidatorScheduler" name="_log" map="d"/>
  <field class="com.sigmastream.main.WellValidatorScheduler" name="jobIpMap" map="e"/>
  <field class="com.sigmastream.main.WellValidatorScheduler" name="jobDAG" map="f"/>
  <method class="com.sigmastream.main.WellValidatorScheduler" name="boolean lambda$run$0(com.hazelcast.jet.Job)" map="b"/>
  <method class="com.sigmastream.main.WellValidatorScheduler" name="void lambda$startAnotherJob$1(com.sigmastream.pr.operator.MainOperator)" map="b"/>
  <method class="com.sigmastream.main.WellValidatorScheduler" name="void startAnotherJob(java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.WellValidatorScheduler" name="java.util.Map getNewObjectConfigMap(java.util.Map, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.WellValidatorScheduler" name="void run()" map="run"/>
  <class name="com.sigmastream.main.BackfillProcess" map="h"/>
  <field class="com.sigmastream.main.BackfillProcess" name="activeBackfillCount" map="b"/>
  <field class="com.sigmastream.main.BackfillProcess" name="currentActiveJob" map="c"/>
  <field class="com.sigmastream.main.BackfillProcess" name="_log" map="d"/>
  <method class="com.sigmastream.main.BackfillProcess" name="void run()" map="run"/>
  <method class="com.sigmastream.main.BackfillProcess" name="void lambda$run$0(com.sigmastream.DBManager.BackFillMapDAO, com.sigmastream.DBManager.BackFillMapVO, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.sigmastream.pr.operator.MainOperator)" map="b"/>
  <class name="com.sigmastream.main.RESTServer$9" map="9"/>
  <field class="com.sigmastream.main.RESTServer$9" name="this$0" map="r"/>
  <method class="com.sigmastream.main.RESTServer$9" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$8" map="8"/>
  <field class="com.sigmastream.main.RESTServer$8" name="this$0" map="d"/>
  <method class="com.sigmastream.main.RESTServer$8" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$7" map="7"/>
  <field class="com.sigmastream.main.RESTServer$7" name="this$0" map="e"/>
  <method class="com.sigmastream.main.RESTServer$7" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$6" map="6"/>
  <field class="com.sigmastream.main.RESTServer$6" name="this$0" map="f"/>
  <method class="com.sigmastream.main.RESTServer$6" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$15" map="15"/>
  <field class="com.sigmastream.main.RESTServer$15" name="this$0" map="g"/>
  <method class="com.sigmastream.main.RESTServer$15" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$5" map="5"/>
  <field class="com.sigmastream.main.RESTServer$5" name="this$0" map="h"/>
  <method class="com.sigmastream.main.RESTServer$5" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$14" map="14"/>
  <field class="com.sigmastream.main.RESTServer$14" name="this$0" map="i"/>
  <method class="com.sigmastream.main.RESTServer$14" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$13" map="13"/>
  <field class="com.sigmastream.main.RESTServer$13" name="this$0" map="j"/>
  <method class="com.sigmastream.main.RESTServer$13" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$4" map="4"/>
  <field class="com.sigmastream.main.RESTServer$4" name="this$0" map="k"/>
  <method class="com.sigmastream.main.RESTServer$4" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$12" map="12"/>
  <field class="com.sigmastream.main.RESTServer$12" name="this$0" map="l"/>
  <method class="com.sigmastream.main.RESTServer$12" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$3" map="3"/>
  <field class="com.sigmastream.main.RESTServer$3" name="this$0" map="m"/>
  <method class="com.sigmastream.main.RESTServer$3" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$2" map="2"/>
  <field class="com.sigmastream.main.RESTServer$2" name="this$0" map="n"/>
  <method class="com.sigmastream.main.RESTServer$2" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$11" map="11"/>
  <field class="com.sigmastream.main.RESTServer$11" name="this$0" map="o"/>
  <method class="com.sigmastream.main.RESTServer$11" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$10" map="10"/>
  <field class="com.sigmastream.main.RESTServer$10" name="this$0" map="p"/>
  <method class="com.sigmastream.main.RESTServer$10" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer$1" map="1"/>
  <field class="com.sigmastream.main.RESTServer$1" name="this$0" map="q"/>
  <method class="com.sigmastream.main.RESTServer$1" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <class name="com.sigmastream.main.RESTServer" map="i"/>
  <field class="com.sigmastream.main.RESTServer" name="restartCount" map="b"/>
  <field class="com.sigmastream.main.RESTServer" name="JET_CONTAINER" map="c"/>
  <field class="com.sigmastream.main.RESTServer" name="_log" map="d"/>
  <field class="com.sigmastream.main.RESTServer" name="server" map="e"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String updateConnection(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String fileExtension(java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getDetailsSubmittedJobDetails(java.lang.String, java.lang.String)" map="c"/>
  <method class="com.sigmastream.main.RESTServer" name="com.google.gson.JsonObject getHeapSeries(com.sigmastream.main.MetricCollector$MetricCollectorGenrator)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getJobName(java.lang.String, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="com.hazelcast.jet.JetInstance access$000()" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getCluster()" map="c"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String updateJob(java.lang.String, java.lang.String)" map="d"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getLastNLogLines(java.io.File, int)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="com.google.gson.JsonObject getCpuSeries(com.sigmastream.main.MetricCollector$MetricCollectorGenrator)" map="c"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getJobResult(com.hazelcast.jet.Job, com.hazelcast.jet.JetInstance)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.util.HashMap clusterRecordMap()" map="d"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getLogs(int)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getListJobs()" map="e"/>
  <method class="com.sigmastream.main.RESTServer" name="java.util.Map mergeByVertex(java.util.List, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="com.google.gson.JsonObject getClusterData(com.sigmastream.main.MetricCollector$MetricCollectorGenrator)" map="d"/>
  <method class="com.sigmastream.main.RESTServer" name="boolean validateAlreadySubmittedJob(java.util.Map)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="void lambda$getDetailsSubmittedJobDetails$1(com.sigmastream.pr.operator.MainOperator)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="boolean isRestApiEnabled(com.hazelcast.config.RestApiConfig)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getFileList(java.lang.String, java.lang.String)" map="e"/>
  <method class="com.sigmastream.main.RESTServer" name="boolean lambda$validateAlreadySubmittedJob$3(java.lang.String, com.hazelcast.jet.Job)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="boolean lambda$getClusterData$0(com.hazelcast.jet.Job)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String updateLoggerLevel(java.lang.String)" map="c"/>
  <method class="com.sigmastream.main.RESTServer" name="java.lang.String getBluecardinalStatus()" map="f"/>
  <method class="com.sigmastream.main.RESTServer" name="void startServer()" map="g"/>
  <method class="com.sigmastream.main.RESTServer" name="boolean addFilesArray(com.google.gson.JsonArray, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.RESTServer" name="boolean lambda$validateAlreadySubmittedJob$2(com.hazelcast.jet.Job)" map="c"/>
  <class name="com.sigmastream.main.Main$AutoDeployWorker" map="_b"/>
  <field class="com.sigmastream.main.Main$AutoDeployWorker" name="this$0" map="b"/>
  <field class="com.sigmastream.main.Main$AutoDeployWorker" name="rootPath" map="c"/>
  <method class="com.sigmastream.main.Main$AutoDeployWorker" name="void run()" map="run"/>
  <class name="com.sigmastream.main.Main$PropertiesVersionProvider" map="_c"/>
  <method class="com.sigmastream.main.Main$PropertiesVersionProvider" name="java.lang.String getBlucardinalVersion()" map="b"/>
  <method class="com.sigmastream.main.Main$PropertiesVersionProvider" name="java.lang.String[] getVersion()" map="getVersion"/>
  <class name="com.sigmastream.main.Main$ContextFileVisitor" map="_d"/>
  <field class="com.sigmastream.main.Main$ContextFileVisitor" name="this$0" map="b"/>
  <field class="com.sigmastream.main.Main$ContextFileVisitor" name="MODE_RUNTIME" map="c"/>
  <field class="com.sigmastream.main.Main$ContextFileVisitor" name="MODE_NORMAL" map="d"/>
  <field class="com.sigmastream.main.Main$ContextFileVisitor" name="pathMatcher" map="e"/>
  <method class="com.sigmastream.main.Main$ContextFileVisitor" name="void lambda$visitFile$0(com.sigmastream.pr.operator.MainOperator)" map="b"/>
  <method class="com.sigmastream.main.Main$ContextFileVisitor" name="java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)" map="b"/>
  <method class="com.sigmastream.main.Main$ContextFileVisitor" name="java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)" map="preVisitDirectory"/>
  <method class="com.sigmastream.main.Main$ContextFileVisitor" name="java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)" map="visitFile"/>
  <method class="com.sigmastream.main.Main$ContextFileVisitor" name="java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)" map="c"/>
  <field class="com.sigmastream.main.Main" name="JET_CONTAINER" map="b"/>
  <field class="com.sigmastream.main.Main" name="CONFIGFILES" map="c"/>
  <field class="com.sigmastream.main.Main" name="isConfigDirectoryProcess" map="d"/>
  <field class="com.sigmastream.main.Main" name="CONFIG_FILE_LIST" map="e"/>
  <field class="com.sigmastream.main.Main" name="blueCardinalEngineDebugEnable" map="f"/>
  <field class="com.sigmastream.main.Main" name="BASEPATH" map="g"/>
  <field class="com.sigmastream.main.Main" name="metricCollector" map="h"/>
  <field class="com.sigmastream.main.Main" name="groupId" map="i"/>
  <field class="com.sigmastream.main.Main" name="debugEnable" map="j"/>
  <field class="com.sigmastream.main.Main" name="JobListUpdate" map="k"/>
  <field class="com.sigmastream.main.Main" name="wellValidatorDeployTimer" map="l"/>
  <field class="com.sigmastream.main.Main" name="jetBootstrapClientEnable" map="m"/>
  <field class="com.sigmastream.main.Main" name="_log" map="n"/>
  <field class="com.sigmastream.main.Main" name="autoDeployTimer" map="o"/>
  <field class="com.sigmastream.main.Main" name="CsDataCleanUp" map="p"/>
  <field class="com.sigmastream.main.Main" name="cooperativeThreadCount" map="q"/>
  <field class="com.sigmastream.main.Main" name="backfillProcessorTimer" map="r"/>
  <field class="com.sigmastream.main.Main" name="helpRequested" map="s"/>
  <field class="com.sigmastream.main.Main" name="debugConsoleEnable" map="t"/>
  <field class="com.sigmastream.main.Main" name="$assertionsDisabled" map="u"/>
  <field class="com.sigmastream.main.Main" name="versionRequested" map="v"/>
  <method class="com.sigmastream.main.Main" name="void startBackfillProcessor()" map="b"/>
  <method class="com.sigmastream.main.Main" name="com.sigmastream.logger.log4j.Logger access$000()" map="c"/>
  <method class="com.sigmastream.main.Main" name="void getConfigFiles()" map="d"/>
  <method class="com.sigmastream.main.Main" name="void startAutoDeployer(java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.Main" name="void startMetricStoreUpdater()" map="e"/>
  <method class="com.sigmastream.main.Main" name="void startCassandra()" map="f"/>
  <method class="com.sigmastream.main.Main" name="void startWellValidatorScheduler()" map="g"/>
  <method class="com.sigmastream.main.Main" name="java.lang.Object call()" map="call"/>
  <method class="com.sigmastream.main.Main" name="void initLogger()" map="h"/>
  <method class="com.sigmastream.main.Main" name="void lambda$startDBJobs$0(com.sigmastream.pr.operator.MainOperator)" map="b"/>
  <method class="com.sigmastream.main.Main" name="void lambda$initializeConfiguration$1(com.sigmastream.pr.operator.MainOperator)" map="c"/>
  <method class="com.sigmastream.main.Main" name="void startJobListUpdate()" map="i"/>
  <method class="com.sigmastream.main.Main" name="void initializeConfiguration()" map="j"/>
  <method class="com.sigmastream.main.Main" name="java.lang.Integer call()" map="k"/>
  <method class="com.sigmastream.main.Main" name="void startDBJobs()" map="l"/>
  <class name="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" map="_b"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="runtimeAvailableProcessors" map="b"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="interval" map="c"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="startTime" map="d"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="runtimeTotalMemory" map="e"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="cpuUsageSeries" map="f"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="maxStoreGraph" map="g"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="this$0" map="h"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="osProcessCpuLoad" map="i"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="runtimeUsedMemory" map="j"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="runtimeMaxMemory" map="k"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="runtimeFreeMemory" map="l"/>
  <field class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="heapUsageSeries" map="m"/>
  <method class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="long[] getTaskLetCount()" map="b"/>
  <method class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="java.lang.String getRunTimeUsedMemory()" map="c"/>
  <method class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="java.lang.Long getRenderProcessors()" map="d"/>
  <method class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="void run()" map="run"/>
  <method class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="java.lang.String getRunTimeMaxMemory()" map="e"/>
  <method class="com.sigmastream.main.MetricCollector$MetricCollectorGenrator" name="java.lang.String numberToUnit(long)" map="b"/>
  <class name="com.sigmastream.main.MetricCollector" map="j"/>
  <field class="com.sigmastream.main.MetricCollector" name="metricCollectorGenrator" map="b"/>
  <field class="com.sigmastream.main.MetricCollector" name="interval" map="c"/>
  <field class="com.sigmastream.main.MetricCollector" name="taskLetservice" map="d"/>
  <field class="com.sigmastream.main.MetricCollector" name="UNITS" map="e"/>
  <field class="com.sigmastream.main.MetricCollector" name="wellValidatorDeployTimer" map="f"/>
  <field class="com.sigmastream.main.MetricCollector" name="metricRegistry" map="g"/>
  <method class="com.sigmastream.main.MetricCollector" name="com.hazelcast.jet.impl.execution.TaskletExecutionService access$100(com.sigmastream.main.MetricCollector)" map="b"/>
  <method class="com.sigmastream.main.MetricCollector" name="com.sigmastream.main.MetricCollector$MetricCollectorGenrator getMetricCollectorGenrator()" map="b"/>
  <method class="com.sigmastream.main.MetricCollector" name="void setMetricCollectorGenrator(com.sigmastream.main.MetricCollector$MetricCollectorGenrator)" map="b"/>
  <method class="com.sigmastream.main.MetricCollector" name="com.hazelcast.internal.metrics.MetricsRegistry access$000(com.sigmastream.main.MetricCollector)" map="c"/>
  <method class="com.sigmastream.main.MetricCollector" name="void start()" map="c"/>
  <class name="com.sigmastream.main.ClusterSummary" map="k"/>
  <field class="com.sigmastream.main.ClusterSummary" name="clusterTime" map="b"/>
  <field class="com.sigmastream.main.ClusterSummary" name="nodeCount" map="c"/>
  <field class="com.sigmastream.main.ClusterSummary" name="CHART_DELAY" map="d"/>
  <field class="com.sigmastream.main.ClusterSummary" name="cpuUsageSeries" map="e"/>
  <field class="com.sigmastream.main.ClusterSummary" name="taskCount" map="f"/>
  <field class="com.sigmastream.main.ClusterSummary" name="heapUsage" map="g"/>
  <field class="com.sigmastream.main.ClusterSummary" name="heapTotal" map="h"/>
  <field class="com.sigmastream.main.ClusterSummary" name="version" map="i"/>
  <field class="com.sigmastream.main.ClusterSummary" name="jobCount" map="j"/>
  <field class="com.sigmastream.main.ClusterSummary" name="restEnabled" map="k"/>
  <field class="com.sigmastream.main.ClusterSummary" name="processorCount" map="l"/>
  <field class="com.sigmastream.main.ClusterSummary" name="nonCooperativeTaskCount" map="m"/>
  <field class="com.sigmastream.main.ClusterSummary" name="heapUsageSeries" map="n"/>
  <field class="com.sigmastream.main.ClusterSummary" name="clusterState" map="o"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setNodeCount(long)" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setClusterState(java.lang.String)" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="java.lang.String getVersion()" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="com.google.gson.JsonObject getHeapSeries(com.sigmastream.main.MetricCollector$MetricCollectorGenrator)" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="boolean isRestEnabled()" map="c"/>
  <method class="com.sigmastream.main.ClusterSummary" name="long getClusterTime()" map="d"/>
  <method class="com.sigmastream.main.ClusterSummary" name="boolean lambda$new$0(com.hazelcast.jet.Job)" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="com.google.gson.JsonObject getCpuSeries(com.sigmastream.main.MetricCollector$MetricCollectorGenrator)" map="c"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setHeapTotal(java.lang.String)" map="c"/>
  <method class="com.sigmastream.main.ClusterSummary" name="long getJobCount()" map="e"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setTaskCount(long)" map="c"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setClusterTime(long)" map="d"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setNonCooperativeTaskCount(long)" map="e"/>
  <method class="com.sigmastream.main.ClusterSummary" name="long getProcessorCount()" map="f"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setRestEnabled(boolean)" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="java.lang.String getHeapTotal()" map="g"/>
  <method class="com.sigmastream.main.ClusterSummary" name="java.lang.String getHeapUsage()" map="h"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setVersion(java.lang.String)" map="d"/>
  <method class="com.sigmastream.main.ClusterSummary" name="boolean isRestApiEnabled(com.hazelcast.config.RestApiConfig)" map="b"/>
  <method class="com.sigmastream.main.ClusterSummary" name="java.lang.String getClusterState()" map="i"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setHeapUsage(java.lang.String)" map="e"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setProcessorCount(long)" map="f"/>
  <method class="com.sigmastream.main.ClusterSummary" name="long getTaskCount()" map="j"/>
  <method class="com.sigmastream.main.ClusterSummary" name="void setJobCount(long)" map="g"/>
  <method class="com.sigmastream.main.ClusterSummary" name="long getNodeCount()" map="k"/>
  <method class="com.sigmastream.main.ClusterSummary" name="long getNonCooperativeTaskCount()" map="l"/>
  <class name="com.sigmastream.main.JobListUpdate" map="l"/>
  <field class="com.sigmastream.main.JobListUpdate" name="canceledCompletedJob" map="b"/>
  <field class="com.sigmastream.main.JobListUpdate" name="_log" map="c"/>
  <method class="com.sigmastream.main.JobListUpdate" name="java.lang.String getJobResult(com.hazelcast.jet.Job, com.hazelcast.jet.JetInstance)" map="b"/>
  <method class="com.sigmastream.main.JobListUpdate" name="void run()" map="run"/>
  <package name="com.sigmastream.httpserver" map="b"/>
  <class name="com.sigmastream.httpserver.HttpServer" map="b"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="defaultPort" map="k"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="serverName" map="l"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="port" map="m"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="serverVersion" map="n"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="running" map="o"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="socket" map="p"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="logger" map="q"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="router" map="r"/>
  <field class="com.sigmastream.httpserver.HttpServer" name="serverETC" map="s"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="void setServerInfo(java.lang.String, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="com.sigmastream.httpserver.HttpRouter getRouter()" map="e"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="void setRouter(com.sigmastream.httpserver.HttpRouter)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="java.lang.String getServerETC()" map="f"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="int getPort()" map="g"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="void run()" map="run"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="void setPort(int)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="void stop()" map="h"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="java.lang.String getServerName()" map="i"/>
  <method class="com.sigmastream.httpserver.HttpServer" name="java.lang.String getServerVersion()" map="j"/>
  <class name="com.sigmastream.httpserver.HttpHandler" map="c"/>
  <field class="com.sigmastream.httpserver.HttpHandler" name="socket" map="b"/>
  <field class="com.sigmastream.httpserver.HttpHandler" name="routes" map="c"/>
  <field class="com.sigmastream.httpserver.HttpHandler" name="DEFAULT_PATH" map="d"/>
  <field class="com.sigmastream.httpserver.HttpHandler" name="writer" map="e"/>
  <field class="com.sigmastream.httpserver.HttpHandler" name="defaultRoutes" map="f"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void setWriter(java.io.DataOutputStream)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void delete(com.sigmastream.httpserver.Route)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="java.net.Socket getSocket()" map="b"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void addRoute(java.lang.String, com.sigmastream.httpserver.Route)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void setSocket(java.net.Socket)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void get(com.sigmastream.httpserver.Route)" map="c"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="java.io.DataOutputStream getWriter()" map="c"/>
  <method class="com.sigmastream.httpserver.HttpHandler" name="void post(com.sigmastream.httpserver.Route)" map="d"/>
  <class name="com.sigmastream.httpserver.Route" map="d"/>
  <field class="com.sigmastream.httpserver.Route" name="routePath" map="b"/>
  <field class="com.sigmastream.httpserver.Route" name="usesVarargs" map="c"/>
  <method class="com.sigmastream.httpserver.Route" name="java.lang.String cleanPath(java.lang.String)" map="b"/>
  <method class="com.sigmastream.httpserver.Route" name="void invoke(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="b"/>
  <method class="com.sigmastream.httpserver.Route" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="c"/>
  <method class="com.sigmastream.httpserver.Route" name="boolean matchesPerfectly(java.util.List)" map="b"/>
  <method class="com.sigmastream.httpserver.Route" name="boolean isDynamic(java.lang.String)" map="c"/>
  <method class="com.sigmastream.httpserver.Route" name="java.lang.String stripDynamic(java.lang.String)" map="d"/>
  <method class="com.sigmastream.httpserver.Route" name="int howCorrect(java.util.List)" map="c"/>
  <class name="com.sigmastream.httpserver.DeathHandler" map="e"/>
  <field class="com.sigmastream.httpserver.DeathHandler" name="code" map="g"/>
  <field class="com.sigmastream.httpserver.DeathHandler" name="errorMessages" map="h"/>
  <method class="com.sigmastream.httpserver.DeathHandler" name="void setupErrorMessages()" map="d"/>
  <method class="com.sigmastream.httpserver.DeathHandler" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="b"/>
  <class name="com.sigmastream.httpserver.HttpException" map="f"/>
  <field class="com.sigmastream.httpserver.HttpException" name="serialVersionUID" map="b"/>
  <class name="com.sigmastream.httpserver.HttpResponse" map="g"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="mimeType" map="b"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="MALFORMED_INPUT_ERROR" map="c"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="code" map="d"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="headers" map="e"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="serverInfo" map="f"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="writer" map="g"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="STATUS_GOOD" map="h"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="request" map="i"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="body" map="j"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="responses" map="k"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="NOT_A_METHOD_ERROR" map="l"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="EXCEPTION_ERROR" map="m"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="socket" map="n"/>
  <field class="com.sigmastream.httpserver.HttpResponse" name="size" map="o"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setServerInfo(java.lang.String)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void respond()" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.net.Socket getSocket()" map="c"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setSize(long)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void noContent()" map="d"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="int getCode()" map="e"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.lang.String getServerInfo()" map="f"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.lang.String getResponseCodeMessage(int)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.io.DataOutputStream getWriter()" map="g"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setMimeType(java.lang.String)" map="c"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="com.sigmastream.httpserver.HttpRequest getRequest()" map="h"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="byte[] getBody()" map="i"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setupServerInfo()" map="j"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="long getSize()" map="k"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setBody(byte[])" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setBody(java.lang.String)" map="d"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setHeaders(java.util.Map)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.lang.String getMimeType()" map="l"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void error(int, java.lang.String, java.lang.Throwable)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.lang.String getHeader(java.lang.String)" map="e"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void message(int, java.lang.String)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void writeLine(java.lang.String)" map="f"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setHeader(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setCode(int)" map="c"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="java.util.Map getHeaders()" map="m"/>
  <method class="com.sigmastream.httpserver.HttpResponse" name="void setupResponses()" map="n"/>
  <class name="com.sigmastream.httpserver.MessageHandler" map="h"/>
  <field class="com.sigmastream.httpserver.MessageHandler" name="body" map="i"/>
  <field class="com.sigmastream.httpserver.MessageHandler" name="code" map="j"/>
  <method class="com.sigmastream.httpserver.MessageHandler" name="void handle(com.sigmastream.httpserver.HttpRequest, com.sigmastream.httpserver.HttpResponse)" map="b"/>
  <class name="com.sigmastream.httpserver.HttpRouter" map="i"/>
  <field class="com.sigmastream.httpserver.HttpRouter" name="errorHandler" map="b"/>
  <field class="com.sigmastream.httpserver.HttpRouter" name="handlers" map="c"/>
  <field class="com.sigmastream.httpserver.HttpRouter" name="defaultHandler" map="d"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="java.util.Map getHandlers()" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="void addHandler(java.lang.String, com.sigmastream.httpserver.HttpHandler)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="com.sigmastream.httpserver.HttpHandler getErrorHandler()" map="c"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="com.sigmastream.httpserver.HttpHandler route(java.lang.String, com.sigmastream.httpserver.HttpRequest)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="com.sigmastream.httpserver.HttpHandler getDefaultHandler()" map="d"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="void setErrorHandler(com.sigmastream.httpserver.HttpHandler)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRouter" name="void setDefaultHandler(com.sigmastream.httpserver.HttpHandler)" map="c"/>
  <class name="com.sigmastream.httpserver.HttpRequest" map="j"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="HEAD_REQUEST_TYPE" map="b"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="router" map="c"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="requestType" map="d"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="handler" map="e"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="headers" map="f"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="varargs" map="g"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="requestBody" map="h"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="requestLine" map="i"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="GET_REQUEST_TYPE" map="j"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="httpRequest" map="k"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="connection" map="l"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="splitPath" map="m"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="PUT_REQUEST_TYPE" map="n"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="path" map="o"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="fullPath" map="p"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="DELETE_REQUEST_TYPE" map="q"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="POST_REQUEST_TYPE" map="r"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="requestProtocol" map="s"/>
  <field class="com.sigmastream.httpserver.HttpRequest" name="params" map="t"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void run()" map="run"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setHeaders(java.util.Map)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="boolean isType(java.lang.String)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getHttpRequest()" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setRequestProtocol(java.lang.String)" map="c"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setRequestType(java.lang.String)" map="d"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void mergeVarargs(java.util.List)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getRequestProtocol()" map="c"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setConnection(java.net.Socket)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getPath()" map="d"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setSplitPath(java.util.List)" map="c"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getRequestBody()" map="e"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getRequestLine()" map="f"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="com.sigmastream.httpserver.HttpResponse createResponse()" map="g"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getParam(java.lang.String)" map="e"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.util.List getSplitPath()" map="h"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setParams(java.util.Map)" map="c"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void mergeParams(java.util.Map)" map="d"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.util.Map getHeaders()" map="i"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setPath(java.lang.String)" map="f"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="com.sigmastream.httpserver.HttpHandler getHandler()" map="j"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setRequestLine(java.lang.String)" map="g"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.util.Map getParams()" map="k"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getRequestType()" map="l"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setRouter(com.sigmastream.httpserver.HttpRouter)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.util.Map parseInputData(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="com.sigmastream.httpserver.HttpHandler determineHandler()" map="m"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="com.sigmastream.httpserver.HttpRouter getRouter()" map="n"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.util.List getVarargs()" map="o"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.lang.String getFullPath()" map="p"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void parseRequest()" map="q"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setHandler(com.sigmastream.httpserver.HttpHandler)" map="b"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="java.net.Socket getConnection()" map="r"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setSplitPath(java.lang.String)" map="h"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setFullPath(java.lang.String)" map="i"/>
  <method class="com.sigmastream.httpserver.HttpRequest" name="void setHttpRequest(java.lang.String)" map="j"/>
  <package name="com.sigmastream.logger" map="c"/>
  <package name="com.sigmastream.logger.log4j" map="b"/>
  <class name="com.sigmastream.logger.log4j.Logger" map="b"/>
  <field class="com.sigmastream.logger.log4j.Logger" name="logger" map="b"/>
  <field class="com.sigmastream.logger.log4j.Logger" name="context" map="c"/>
  <field class="com.sigmastream.logger.log4j.Logger" name="LOG_ROOT" map="d"/>
  <field class="com.sigmastream.logger.log4j.Logger" name="init" map="e"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void debug(java.lang.Object)" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="boolean isDebugEnabled()" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void warn(java.lang.String)" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void error(java.lang.String)" map="c"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void initConsoleLog()" map="c"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void error(java.lang.String, java.lang.Throwable)" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void error(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void info(java.lang.String, java.lang.Throwable)" map="c"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="org.apache.logging.log4j.core.appender.RollingFileAppender getRollingFileAppender()" map="d"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void warn(java.lang.String, java.lang.Throwable)" map="d"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void info(java.lang.Object)" map="c"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void init(boolean)" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="boolean isInfoEnabled()" map="e"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="org.apache.logging.log4j.core.Logger setLogLevel(java.lang.String, org.apache.logging.log4j.Level)" map="b"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="void debug(java.lang.String, java.lang.Throwable)" map="e"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="org.apache.logging.log4j.core.Logger addRollingFileLogger(java.lang.String, org.apache.logging.log4j.Level)" map="c"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="com.sigmastream.logger.log4j.Logger getLogger(java.lang.String)" map="d"/>
  <method class="com.sigmastream.logger.log4j.Logger" name="com.sigmastream.logger.log4j.Logger getLogger(java.lang.Class)" map="b"/>
  <class name="com.sigmastream.logger.log4j.CustomConfigurationFactory" map="c"/>
  <method class="com.sigmastream.logger.log4j.CustomConfigurationFactory" name="org.apache.logging.log4j.core.config.Configuration createConfiguration(java.lang.String, org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder)" map="b"/>
  <method class="com.sigmastream.logger.log4j.CustomConfigurationFactory" name="org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext, org.apache.logging.log4j.core.config.ConfigurationSource)" map="getConfiguration"/>
  <method class="com.sigmastream.logger.log4j.CustomConfigurationFactory" name="java.lang.String[] getSupportedTypes()" map="getSupportedTypes"/>
  <method class="com.sigmastream.logger.log4j.CustomConfigurationFactory" name="org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext, java.lang.String, java.net.URI)" map="getConfiguration"/>
  <package name="com.sigmastream.DBManager" map="d"/>
  <class name="com.sigmastream.DBManager.CsDataCleanUpCaseWise" map="b"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpCaseWise" name="SQL_SELECT_LAST_DATA_POINT" map="o"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpCaseWise" name="rigID" map="p"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpCaseWise" name="con" map="q"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpCaseWise" name="_log" map="r"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpCaseWise" name="firstPointBuffer" map="s"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpCaseWise" name="void verifyDataBaseOnFP(long)" map="b"/>
  <class name="com.sigmastream.DBManager.CassandraBaseDAO" map="c"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="con" map="b"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="SQL_PRESTATE_TABLE" map="c"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="SQL_OUTPUT_TABLE" map="d"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="SQL_EVENT_TABLE" map="e"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="bc_Channels" map="f"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="SQL_RAW_TABLE" map="g"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="SQL_GENERAL_TABLE" map="h"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="_log" map="i"/>
  <field class="com.sigmastream.DBManager.CassandraBaseDAO" name="SQL_AGGREGATED_TABLE" map="j"/>
  <method class="com.sigmastream.DBManager.CassandraBaseDAO" name="void createBaseTable()" map="b"/>
  <method class="com.sigmastream.DBManager.CassandraBaseDAO" name="void appendColumnNames()" map="c"/>
  <class name="com.sigmastream.DBManager.BackFillMapVO" map="d"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="metaData" map="b"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="feedId" map="c"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="serialVersionUID" map="d"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="endtime" map="e"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="jobOperator" map="f"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="endDepth" map="g"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="status" map="h"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="jobConfig" map="i"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="startDepth" map="j"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="_id" map="k"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="starttime" map="l"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="lossCount" map="m"/>
  <field class="com.sigmastream.DBManager.BackFillMapVO" name="backfilledCount" map="n"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setStartDepth(java.lang.String)" map="b"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setMetaData(java.util.Map)" map="b"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setEndDepth(java.lang.String)" map="c"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setEndtime(long)" map="b"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="java.lang.String getStatus()" map="b"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setLossCount(long)" map="c"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="long getEndtime()" map="c"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="java.lang.String getJobOperator()" map="d"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="java.lang.String getStartDepth()" map="e"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="long getFeedId()" map="f"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="long getBackfilledCount()" map="g"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setJobConfig(java.util.Map)" map="c"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="long getStarttime()" map="h"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void set_id(long)" map="d"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="long getLossCount()" map="i"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setBackfilledCount(long)" map="e"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setFeedId(long)" map="f"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="java.util.Map getMetaData()" map="j"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="long get_id()" map="k"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setStatus(java.lang.String)" map="d"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="java.lang.String getEndDepth()" map="l"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setJobOperator(java.lang.String)" map="e"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="java.util.Map getJobConfig()" map="m"/>
  <method class="com.sigmastream.DBManager.BackFillMapVO" name="void setStarttime(long)" map="g"/>
  <class name="com.sigmastream.DBManager.JobListVO" map="e"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="jobType" map="b"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="operator" map="c"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="serialVersionUID" map="d"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="startTime" map="e"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="failure" map="f"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="rigId" map="g"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="status" map="h"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="jobId" map="i"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="jobConfig" map="j"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="jobName" map="k"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="operatorName" map="l"/>
  <field class="com.sigmastream.DBManager.JobListVO" name="asset_id" map="m"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="long getStartTime()" map="b"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getRigId()" map="c"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getStatus()" map="d"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="long getSerialversionuid()" map="e"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="long getJobId()" map="f"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getOperator()" map="g"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setJobConfig(java.lang.String)" map="b"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getJobConfig()" map="h"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setOperator(java.lang.String)" map="c"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setRigId(java.lang.String)" map="d"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setJobType(java.lang.String)" map="e"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setJobId(long)" map="b"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setJobName(java.lang.String)" map="f"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String insertQuery()" map="i"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getFailure()" map="j"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setAsset_id(java.lang.String)" map="g"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getOperatorName()" map="k"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getJobType()" map="l"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setStatus(java.lang.String)" map="h"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setOperatorName(java.lang.String)" map="i"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getJobName()" map="m"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void parseResultSet(java.sql.ResultSet)" map="b"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="java.lang.String getAsset_id()" map="n"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setFailure(java.lang.String)" map="j"/>
  <method class="com.sigmastream.DBManager.JobListVO" name="void setStartTime(long)" map="c"/>
  <class name="com.sigmastream.DBManager.BackFillMapDAO" map="f"/>
  <field class="com.sigmastream.DBManager.BackFillMapDAO" name="_SQL_UPDATE_STATUS_JOBLIST_BY_JOB_ID" map="h"/>
  <field class="com.sigmastream.DBManager.BackFillMapDAO" name="_log" map="i"/>
  <field class="com.sigmastream.DBManager.BackFillMapDAO" name="_SQL_UPDATE_JOBLIST_BY_JOB_ID" map="j"/>
  <method class="com.sigmastream.DBManager.BackFillMapDAO" name="java.lang.String updateJobList(java.util.List)" map="c"/>
  <method class="com.sigmastream.DBManager.BackFillMapDAO" name="java.util.List getBackfillList()" map="f"/>
  <method class="com.sigmastream.DBManager.BackFillMapDAO" name="java.lang.String updateBackListStatusByID(java.lang.Long)" map="b"/>
  <class name="com.sigmastream.DBManager.CassandraDBManager" map="g"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="cluster" map="b"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="instance" map="c"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="port" map="d"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="hosts" map="e"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="_log" map="f"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="keySpace" map="g"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="session" map="h"/>
  <field class="com.sigmastream.DBManager.CassandraDBManager" name="poolingOptions" map="i"/>
  <method class="com.sigmastream.DBManager.CassandraDBManager" name="void connect()" map="b"/>
  <method class="com.sigmastream.DBManager.CassandraDBManager" name="com.datastax.driver.core.KeyspaceMetadata getMetadata()" map="c"/>
  <method class="com.sigmastream.DBManager.CassandraDBManager" name="com.sigmastream.DBManager.CassandraDBManager getInstance()" map="d"/>
  <method class="com.sigmastream.DBManager.CassandraDBManager" name="void close()" map="e"/>
  <method class="com.sigmastream.DBManager.CassandraDBManager" name="com.datastax.driver.core.Session getConnection()" map="f"/>
  <class name="com.sigmastream.DBManager.CsDataCleanUpScheduler" map="h"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="SQL_GET_LAST_TRIP_SENT_POINT" map="b"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="SQL_GET_RIG_NAME" map="c"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="con" map="d"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="dataCleanUp" map="e"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="_log" map="f"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="SQL_GET_LAST_SENT_POINT" map="g"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="boolean lambda$run$0(com.datastax.driver.core.Row)" map="b"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="void lambda$run$1(com.datastax.driver.core.Row)" map="c"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpScheduler" name="void run()" map="run"/>
  <class name="com.sigmastream.DBManager.DBManager" map="i"/>
  <field class="com.sigmastream.DBManager.DBManager" name="_log" map="b"/>
  <field class="com.sigmastream.DBManager.DBManager" name="database" map="c"/>
  <field class="com.sigmastream.DBManager.DBManager" name="dataSource" map="d"/>
  <method class="com.sigmastream.DBManager.DBManager" name="com.sigmastream.DBManager.DBManagerInterFace getDBManager()" map="b"/>
  <method class="com.sigmastream.DBManager.DBManager" name="java.lang.String getDatabase()" map="c"/>
  <method class="com.sigmastream.DBManager.DBManager" name="javax.sql.DataSource getDataSource()" map="d"/>
  <class name="com.sigmastream.DBManager.DBManagerInterFace" map="j"/>
  <method class="com.sigmastream.DBManager.DBManagerInterFace" name="javax.sql.DataSource getDataSource()" map="b"/>
  <class name="com.sigmastream.DBManager.PostgresDBManager" map="k"/>
  <field class="com.sigmastream.DBManager.PostgresDBManager" name="dbTpe" map="b"/>
  <method class="com.sigmastream.DBManager.PostgresDBManager" name="javax.sql.DataSource getDataSource()" map="b"/>
  <class name="com.sigmastream.DBManager.CsDataCleanUpUtils" map="l"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="DELETE_RAW" map="b"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="eventType" map="c"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="con" map="d"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="DELETE_OUTPUT" map="e"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="SQL_GET_PRESTATE_DATA_KEY" map="f"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="DELETE_PRESTATE" map="g"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="preStateType" map="h"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="DELETE_EVENT" map="i"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="bufferPeriod" map="j"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="_log" map="k"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="SQL_GET_EVENT_DATA_KEY" map="l"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="DELETE_AGG" map="m"/>
  <field class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="DELETE_GENERAL" map="n"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="boolean lambda$getSecondPartitionKey$0(java.lang.String, com.datastax.driver.core.Row)" map="b"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="void lambda$getSecondPartitionKey$1(com.datastax.driver.core.Row)" map="b"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="void getSecondPartitionKey(java.lang.String)" map="b"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="void cleanTimeBaseData(java.util.Date, java.lang.String)" map="b"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="void lambda$getSecondPartitionKey$3(com.datastax.driver.core.Row)" map="c"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="boolean lambda$getSecondPartitionKey$2(java.lang.String, com.datastax.driver.core.Row)" map="c"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="void close()" map="close"/>
  <method class="com.sigmastream.DBManager.CsDataCleanUpUtils" name="void cleanAllData(java.lang.String)" map="c"/>
  <class name="com.sigmastream.DBManager.JobListDAO" map="m"/>
  <field class="com.sigmastream.DBManager.JobListDAO" name="_log" map="f"/>
  <field class="com.sigmastream.DBManager.JobListDAO" name="_SQL_UPDATE_JOBLIST_BY_JOB_ID" map="g"/>
  <method class="com.sigmastream.DBManager.JobListDAO" name="java.lang.String insertJobList(com.sigmastream.DBManager.JobListVO)" map="b"/>
  <method class="com.sigmastream.DBManager.JobListDAO" name="java.lang.String updateJobList(java.util.List)" map="b"/>
  <method class="com.sigmastream.DBManager.JobListDAO" name="java.util.List getJobList()" map="e"/>
  <method class="com.sigmastream.DBManager.JobListDAO" name="java.lang.String updateJob(com.sigmastream.DBManager.JobListVO)" map="c"/>
  <class name="com.sigmastream.DBManager.BaseDAO" map="n"/>
  <field class="com.sigmastream.DBManager.BaseDAO" name="sqlConnection" map="b"/>
  <field class="com.sigmastream.DBManager.BaseDAO" name="isPostgresStart" map="c"/>
  <field class="com.sigmastream.DBManager.BaseDAO" name="_log" map="d"/>
  <field class="com.sigmastream.DBManager.BaseDAO" name="isSQLBatchTrn" map="e"/>
  <method class="com.sigmastream.DBManager.BaseDAO" name="boolean isSQLBatchTrn()" map="b"/>
  <method class="com.sigmastream.DBManager.BaseDAO" name="void releaseConnection(java.sql.ResultSet, java.sql.Statement, java.sql.Connection, boolean)" map="b"/>
  <method class="com.sigmastream.DBManager.BaseDAO" name="void endTransaction(java.sql.Connection, boolean)" map="b"/>
  <method class="com.sigmastream.DBManager.BaseDAO" name="java.sql.Connection getConnection()" map="c"/>
  <method class="com.sigmastream.DBManager.BaseDAO" name="java.sql.Connection getDBConnection()" map="d"/>
  <class name="com.sigmastream.DBManager.PayloadDAO" map="o"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="freq" map="b"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="CONSTANT_KEY" map="c"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="con" map="d"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="bc_Channels" map="e"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="SQL_SELECT_EVENT_DATA" map="f"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="retrieveMaxRecord" map="g"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="SQL_SELECT_RAW_DATA" map="h"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="SQL_FOR_SELECT_MOE" map="i"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="jobConfiguration" map="j"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="_log" map="k"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="aggregatedPayloadTime" map="l"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="SQL_SELECT_PRE_STATE_DATA" map="m"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="SQL_SELECT_AGGREGATED_DATA" map="n"/>
  <field class="com.sigmastream.DBManager.PayloadDAO" name="bc_ChannelsWithState" map="o"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.Map createOEPayload(java.lang.String)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="boolean lambda$getMajorOperationalEvent$3(com.datastax.driver.core.Row)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.Map createSpecificTimeRawPayload(java.lang.String)" map="c"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.List getTDRawData(java.lang.String, long, long, boolean)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="void lambda$createAggregatedDataPayload$1(java.util.Map, com.datastax.driver.core.Row, java.util.Map$Entry)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="void lambda$getTDRawData$6(java.util.List, com.datastax.driver.core.Row)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="void close()" map="close"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.Map createListOfOEPayload(java.lang.String, long, long)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="com.sigmastream.pr.common.TimestampedEntry createSpecificTimePayload(java.lang.String, long, boolean)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.Map createAggregatedDataPayload(com.datastax.driver.core.Row)" map="c"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.List getMajorOperationalEvent(java.lang.String, long, long)" map="c"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="void lambda$getMajorOperationalEvent$4(java.lang.String, java.util.List, com.datastax.driver.core.Row)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.Map createRawDataPayload(java.lang.String, long, long)" map="d"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="void lambda$createAggregatedDataPayload$0(java.util.Map, com.datastax.driver.core.Row, java.lang.String)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="boolean lambda$getTDRawData$5(com.datastax.driver.core.Row)" map="d"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.Map getPreStateData(java.lang.String, java.lang.String, boolean)" map="b"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="void lambda$createSpecificTimeRawPayload$2(java.util.Map, com.datastax.driver.core.Row, java.lang.String)" map="c"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.lang.Object getPreStateobject(java.lang.String, java.lang.String, boolean)" map="c"/>
  <method class="com.sigmastream.DBManager.PayloadDAO" name="java.util.List createPayload(java.lang.String, long, long, boolean, boolean, boolean)" map="b"/>
  <package name="com.sigmastream.bc.backprocess" map="b"/>
  <class name="com.sigmastream.bc.backprocess.BackProcessingJob" map="b"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="subAssetId" map="b"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="backProcessOperators" map="c"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="deviceName" map="d"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="starttime" map="e"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="port" map="f"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="discoveryResponseInterval" map="g"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="backProcessConfig" map="h"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="_log" map="i"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="startupOperator" map="j"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="host" map="k"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="apikey" map="l"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="pendingJob" map="m"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="rigId" map="n"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="assetId" map="o"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="backprocessTimeDelta" map="p"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="secureConnection" map="q"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="clientId" map="r"/>
  <field class="com.sigmastream.bc.backprocess.BackProcessingJob" name="endtime" map="s"/>
  <method class="com.sigmastream.bc.backprocess.BackProcessingJob" name="java.util.Map getBackProcessOperators()" map="b"/>
  <method class="com.sigmastream.bc.backprocess.BackProcessingJob" name="java.util.Map getBackProcessConfig()" map="c"/>
  <method class="com.sigmastream.bc.backprocess.BackProcessingJob" name="void setStartTime(long)" map="b"/>
  <method class="com.sigmastream.bc.backprocess.BackProcessingJob" name="void init()" map="d"/>
  <method class="com.sigmastream.bc.backprocess.BackProcessingJob" name="boolean getConfig(java.io.File)" map="b"/>
  <method class="com.sigmastream.bc.backprocess.BackProcessingJob" name="void setPendingJob(com.sigmastream.bc.jobs.JobInformation)" map="b"/>
  <package name="com.sigmastream.bc.websocketFactory" map="c"/>
  <class name="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader" map="_b"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader" name="this$0" map="b"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader" name="source" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader" name="com.sigmastream.pr.yh.source.WSocketClientSource getSource()" map="b"/>
  <class name="com.sigmastream.bc.websocketFactory.SocketSubscribe" map="b"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="datePattern" map="b"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="isDataVerified" map="c"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="bc_Channels" map="d"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="inputChannels" map="e"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="con" map="f"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="writeYHData" map="g"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="inputDataStreams" map="h"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="rigID" map="i"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="jobName" map="j"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="sdf" map="k"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="_log" map="l"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="brw" map="m"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="pendingItem" map="n"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="useCassandra" map="o"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="operatorConfig" map="p"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="operatorName" map="q"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="jobConfiguration" map="r"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="subscriptionType" map="s"/>
  <field class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="yhChannelConfig" map="t"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="long findTimestamp(java.lang.String, java.lang.String, long, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="void replayParser(java.lang.String, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="long findTs(java.lang.String[], java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="void readSocket(com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader, com.hazelcast.jet.pipeline.SourceBuilder$TimestampedSourceBuffer)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="com.sigmastream.bc.operator.Payload dataParseToMap(long, java.lang.String, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="long findTsReplayer(java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="void writeCSV(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketSubscribe" name="void insertDataInCassandra(java.util.HashMap)" map="b"/>
  <class name="com.sigmastream.bc.websocketFactory.SocketFactory" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object getSocketSink(java.lang.String, java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.String, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="com.sigmastream.pr.yh.sink.WSocketClientSink removeSubscriberSink(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object sourceSocket(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="com.sigmastream.pr.yh.source.WSocketClientSource getSubscriber(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object getSocketSource(java.lang.String, java.util.Map, java.util.Map, java.util.List, com.sigmastream.bc.jobs.JobConfiguration, com.sigmastream.pr.common.YhChannelConfig, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object initSource(java.util.Map, java.util.Map, java.util.List, com.sigmastream.bc.jobs.JobConfiguration, com.sigmastream.pr.common.YhChannelConfig, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="boolean checkJobExist(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object initSink(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.String, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="com.sigmastream.pr.yh.source.WSocketClientSource getSourceObject(java.lang.String)" map="e"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="com.sigmastream.pr.yh.source.WSocketClientSource removeSubscriber(java.lang.String)" map="f"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object sinkSocket(java.lang.String, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="com.sigmastream.pr.yh.sink.WSocketClientSink getSubscriberSink(java.lang.String)" map="g"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="com.sigmastream.pr.yh.sink.WSocketClientSink getSinkObject(java.lang.String)" map="h"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object sinkSocketReconnect(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SocketFactory" name="java.lang.Object sourceSocketReconnect(java.util.Map, java.lang.String)" map="b"/>
  <class name="com.sigmastream.bc.websocketFactory.Socket" map="d"/>
  <method class="com.sigmastream.bc.websocketFactory.Socket" name="void destroyForcefully(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.Socket" name="void removeSubscriber(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.Socket" name="void destroy(java.lang.String)" map="d"/>
  <class name="com.sigmastream.bc.websocketFactory.SourceWebSocket" map="e"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="assetCounterInterval" map="b"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="sourceCount" map="c"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="_log" map="d"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="sourceWebSocket" map="e"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="socketInfo" map="f"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="reconnectInterval" map="g"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="activeAssetCounter" map="h"/>
  <field class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="sourceReconnect" map="i"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="boolean updateActiveWell(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="com.sigmastream.bc.websocketFactory.SourceWebSocket get()" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="void getconnection(java.util.Map, java.util.Map, java.util.List, com.sigmastream.bc.jobs.JobConfiguration, com.sigmastream.pr.common.YhChannelConfig, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="boolean checkJobExist(java.lang.String)" map="e"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="com.sigmastream.pr.yh.source.WSocketClientSource subscribeSource(java.lang.String)" map="f"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="void destroyForcefully(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="void removeSubscriber(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="com.sigmastream.pr.yh.source.WSocketClientSource getObject(java.lang.String)" map="g"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="void destroy(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="void reconnect(java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SourceWebSocket" name="void create(com.sigmastream.pr.yh.source.WSocketClientSource)" map="b"/>
  <class name="com.sigmastream.bc.websocketFactory.SinkWebSocket" map="f"/>
  <field class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="sinkCount" map="j"/>
  <field class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="sinkWebSocket" map="k"/>
  <field class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="_log" map="l"/>
  <field class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="reconnectInterval" map="m"/>
  <field class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="sinkSocketInfo" map="n"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="com.sigmastream.pr.yh.sink.WSocketClientSink subscribeSink(java.lang.String)" map="h"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="void create(com.sigmastream.pr.yh.sink.WSocketClientSink, java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="void reconnect(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="com.sigmastream.pr.yh.sink.WSocketClientSink getObject(java.lang.String)" map="i"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="void destroyForcefully(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="void removeSubscriber(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="void destroy(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="void getConnection(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean, java.lang.String, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.websocketFactory.SinkWebSocket" name="com.sigmastream.bc.websocketFactory.SinkWebSocket get()" map="c"/>
  <package name="com.sigmastream.bc.rest" map="d"/>
  <class name="com.sigmastream.bc.rest.RestClient$2" map="2"/>
  <field class="com.sigmastream.bc.rest.RestClient$2" name="this$0" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient$2" name="boolean verify(java.lang.String, javax.net.ssl.SSLSession)" map="verify"/>
  <class name="com.sigmastream.bc.rest.RestClient$1" map="1"/>
  <method class="com.sigmastream.bc.rest.RestClient$1" name="boolean verify(java.lang.String, javax.net.ssl.SSLSession)" map="verify"/>
  <class name="com.sigmastream.bc.rest.RestClient" map="b"/>
  <field class="com.sigmastream.bc.rest.RestClient" name="client" map="b"/>
  <field class="com.sigmastream.bc.rest.RestClient" name="webResource" map="c"/>
  <field class="com.sigmastream.bc.rest.RestClient" name="_log" map="d"/>
  <field class="com.sigmastream.bc.rest.RestClient" name="restClient" map="e"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="com.sun.jersey.api.client.config.ClientConfig getClientConfig(boolean)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.Map updateBackfillProcess(java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="boolean isActiveDeviceAvailable(java.lang.String, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.lang.String getAuthHeader(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="com.sigmastream.bc.rest.RestClient get(boolean, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.Map getLastKnownValue(java.lang.String, java.lang.String, java.util.List, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.Map getDeviceStatus(java.lang.String, java.lang.String, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.lang.String connect(java.lang.String, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.Map getActiveWell(java.lang.String, java.lang.String, java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.Map getLastTimestamp(java.lang.String, java.lang.String, java.lang.String)" map="e"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.List getLastBackfillJobId(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="net.sf.json.JSONObject doDiscovery(java.lang.String, java.lang.String, java.lang.String)" map="f"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.List getActiveGap(java.lang.String, java.lang.String, java.lang.String)" map="g"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="void destroy()" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="boolean getRigList(java.lang.String, java.lang.String, java.lang.String)" map="h"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="java.util.List performGap(java.lang.String, java.lang.String, java.lang.String, long)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="boolean doesFeedExistInDiscovery(net.sf.json.JSONObject)" map="b"/>
  <method class="com.sigmastream.bc.rest.RestClient" name="void lambda$getLastBackfillJobId$0(java.util.List, java.util.Map)" map="b"/>
  <package name="com.sigmastream.bc.dataquality" map="e"/>
  <package name="com.sigmastream.bc.dataquality.beans" map="b"/>
  <class name="com.sigmastream.bc.dataquality.beans.Correlation" map="b"/>
  <field class="com.sigmastream.bc.dataquality.beans.Correlation" name="mnemonics" map="b"/>
  <field class="com.sigmastream.bc.dataquality.beans.Correlation" name="action" map="c"/>
  <field class="com.sigmastream.bc.dataquality.beans.Correlation" name="sequence" map="d"/>
  <field class="com.sigmastream.bc.dataquality.beans.Correlation" name="condition" map="e"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="java.lang.Integer getSequence()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="void setSequence(java.lang.Integer)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="void setMnemonics(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="void setAction(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="void setCondition(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="java.lang.String getCondition()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="java.lang.String getMnemonics()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.bc.dataquality.beans.Correlation" name="java.lang.String getAction()" map="e"/>
  <class name="com.sigmastream.bc.dataquality.beans.Contextual" map="c"/>
  <field class="com.sigmastream.bc.dataquality.beans.Contextual" name="mnemonics" map="b"/>
  <field class="com.sigmastream.bc.dataquality.beans.Contextual" name="action" map="c"/>
  <field class="com.sigmastream.bc.dataquality.beans.Contextual" name="value" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="java.lang.String getValue()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="void setMnemonics(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="void setAction(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="java.lang.String getMnemonics()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="void setValue(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="java.lang.String getAction()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.Contextual" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.bc.dataquality.beans.StaleValueConfig" map="d"/>
  <field class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="status" map="b"/>
  <field class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="windowLength" map="c"/>
  <field class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="rules" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="com.sigmastream.bc.dataquality.beans.Rules getRules()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="com.sigmastream.bc.dataquality.beans.StaleValueConfig fromMap(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="void setWindowLength(java.lang.Integer)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="java.lang.Integer getWindowLength()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="void setRules(com.sigmastream.bc.dataquality.beans.Rules)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="com.sigmastream.bc.dataquality.beans.StaleValueConfig getFromJson(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="void setStatus(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="java.lang.String getStatus()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.beans.StaleValueConfig" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.bc.dataquality.beans.Rules" map="e"/>
  <field class="com.sigmastream.bc.dataquality.beans.Rules" name="contextual" map="b"/>
  <field class="com.sigmastream.bc.dataquality.beans.Rules" name="correlation" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.Rules" name="void setCorrelation(java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Rules" name="java.util.List getContextual()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.beans.Rules" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.bc.dataquality.beans.Rules" name="void setContextual(java.util.List)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.beans.Rules" name="java.util.List getCorrelation()" map="c"/>
  <class name="com.sigmastream.bc.dataquality.DeviceStatistics" map="b"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="minOfBadFreq" map="b"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="deadDeviceDetectedTimeRange" map="c"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="freqRange" map="d"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="endTime" map="e"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="expectedFrequency" map="f"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="totalChannelCount" map="g"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="freqIssueTimeRange" map="h"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="dataQualityGood" map="i"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="_log" map="j"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="startTime" map="k"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="calculatedQualityIndex" map="l"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="deviceAswiGood" map="m"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="requiredDataFlowConst" map="n"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="channelsAswiScore" map="o"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="badQualityDetectedTimeRange" map="p"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="ASP_BASE_SCORE" map="q"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="totalDataCount" map="r"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="totalStreamTime" map="s"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="totalTimeBadQualityData" map="t"/>
  <field class="com.sigmastream.bc.dataquality.DeviceStatistics" name="averageFrequency" map="u"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setStartTime(long)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="double getChannelsAswiScore()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setExpectedFrequency(double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void decrementTotalDataCount()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="boolean isDataQualityGood()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="java.util.List getBadQualityDetectedTimeRange()" map="e"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setChannelsAswiScore(double)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setTotalChannelCount(int)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="double geometricMean(java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setFreqRange(java.util.List)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setCalculatedQualityIndex(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="long getStartTime()" map="f"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="java.lang.String toJSON()" map="g"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setAverageFrequency(double)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setTotalTimeBadQualityData(long)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setFreqIssueTimeRange(java.util.List)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="long getEndTime()" map="h"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="java.util.Map getCalculatedQualityIndex()" map="i"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setDataQualityGood(boolean)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setDeadDeviceDetectedTimeRange(java.util.List)" map="e"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="double getAverageFrequency()" map="j"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="java.util.List getFreqIssueTimeRange()" map="k"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="int getTotalChannelCount()" map="l"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setTotalDataCount(long)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setDeviceAswiGood(double)" map="e"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setEndTime(long)" map="e"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="java.lang.Double lambda$geometricMean$0(java.lang.Double, java.lang.Double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="long getTotalStreamTime()" map="m"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setRequiredDataFlowConst(double)" map="f"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="java.util.List getDeadDeviceDetectedTimeRange()" map="n"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="long getTotalTimeBadQualityData()" map="o"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="long getMinOfBadFreq()" map="p"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setMinOfBadFreq(long)" map="f"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setTotalStreamTime(long)" map="g"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void setBadQualityDetectedTimeRange(java.util.List)" map="f"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="double getExpectedFrequency()" map="q"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="long getTotalDataCount()" map="r"/>
  <method class="com.sigmastream.bc.dataquality.DeviceStatistics" name="void incrementTotalDataCount()" map="s"/>
  <class name="com.sigmastream.bc.dataquality.ChannelStatastics" map="c"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="staleDataScore" map="b"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="freqRange" map="c"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="endTime" map="d"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="expectedFrequency" map="e"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="freqIssueTimeRange" map="f"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="dataQualityGood" map="g"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="satisfiedStaleCount" map="h"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="_log" map="i"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="totalBadFrequencyTime" map="j"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="startTime" map="k"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="calculatedQualityIndex" map="l"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="precisionGood" map="m"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="badQualityDetectedTimeRange" map="n"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="requiredDataFlowConst" map="o"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="aspectStatus" map="p"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="ASP_BASE_SCORE" map="q"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="totalDataCount" map="r"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="countAboveMaxValue" map="s"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="deadChannelDetectedTimeRange" map="t"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="totalStreamTime" map="u"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="isPrecisionGood" map="v"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="staleDataScoreGood" map="w"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="countBelowMinValue" map="x"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="satisfiedPrecisionCount" map="y"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="averageFrequency" map="z"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="isStaleScoreGood" map="ab"/>
  <field class="com.sigmastream.bc.dataquality.ChannelStatastics" name="isFrequencyGood" map="bb"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setStartTime(long)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getSatisfiedStaleSCount()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setExpectedFrequency(double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setStaleDataScoreGood(double)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void addDeadChannelTimeRange(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void decrementTotalDataCount()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="boolean isDataQualityGood()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setCountBelowMinLimit(long)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void incrementSatisfiedPrecisionCount()" map="e"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="boolean isCountGood()" map="f"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setPrecisionGood(double)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void addBadFrequencyTimeRange(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void addBadQualityTimeRange(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getSatisfiedPrecisionCount()" map="g"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="boolean isFrequencyGood()" map="h"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="double geometricMean(java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setCountAboveMaxLimit(long)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="boolean isStaleScoreGood()" map="i"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getStartTime()" map="j"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="java.lang.String toJSON()" map="k"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setAspectStatus(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setFreqIssueTimeRange(java.util.List)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getEndTime()" map="l"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="java.util.Map getCalculatedQualityIndex()" map="m"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getCountBelowMinLimit()" map="n"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setDataQualityGood(boolean)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void incrementSatisfiedStaleCount()" map="o"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="java.util.List getFreqIssueTimeRange()" map="p"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setTotalDataCount(long)" map="e"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setSatisfiedStaleCount(long)" map="f"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getCountAboveMaxLimit()" map="q"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setEndTime(long)" map="g"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="java.lang.Double lambda$geometricMean$0(java.lang.Double, java.lang.Double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getTotalStreamTime()" map="r"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setRequiredDataFlowConst(double)" map="e"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setTotalStreamTime(long)" map="h"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void setSatisfiedPrecisionCount(long)" map="i"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="double getExpectedFrequency()" map="s"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long getTotalDataCount()" map="t"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="long calculateBadFrequencyDuration(long)" map="j"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void incrementTotalDataCount()" map="u"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="boolean isPrecisionGood()" map="v"/>
  <method class="com.sigmastream.bc.dataquality.ChannelStatastics" name="void calculateStaleScore()" map="w"/>
  <class name="com.sigmastream.bc.dataquality.WellQualityMonitor" map="d"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="wellStatistics" map="b"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="initSuccess" map="c"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="outputName" map="d"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="totalDeadWellTime" map="e"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="devicesMonitor" map="f"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="isIntialBackfilled" map="g"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="accumulatedTotalWellDeadTime" map="h"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="firstRun" map="i"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="accumulatedAswi" map="j"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="aswiSummary" map="k"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="rootDir" map="l"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="aswiDuration" map="m"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="sdf" map="n"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="_log" map="o"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="configuration" map="p"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="aspectPostFixMap" map="q"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="channelQualityP" map="r"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="lastActualTS" map="s"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="deadWellDetected" map="t"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="lastAswiTS" map="u"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="aspectSummary" map="v"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="totalStreamTime" map="w"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="accumulatedTotaDataCount" map="x"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="lastDataValue" map="y"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="statisticsSummary" map="z"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="jobConfiguration" map="ab"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="yhChannelConfig" map="bb"/>
  <field class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="accumulatedTotalWellStreamTime" map="cb"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="boolean isInitSuccess()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void addStatisticsSummary(java.lang.String, long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void wellQualityProcess(long, double, double, double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void wellQualityProcess(long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void addAspectSummary(java.lang.String, long, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void init(com.sigmastream.pr.processor.ChannelQualityP, java.lang.String, java.lang.String, double, java.util.Map, double, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, com.sigmastream.pr.common.YhChannelConfig)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void addAswiSummary(java.lang.String, long, java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void setChannelQualityP(com.sigmastream.pr.processor.ChannelQualityP)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="void setWellStats(com.sigmastream.bc.dataquality.WellStatistics)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellQualityMonitor" name="com.sigmastream.bc.dataquality.WellStatistics getWellStats()" map="c"/>
  <class name="com.sigmastream.bc.dataquality.ChannelQualityMonitor" map="e"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="accumulatedTotalStreamTime" map="b"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="badQualityDetected" map="c"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="outputName" map="d"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="statisticsSummary" map="e"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="lastActualTS" map="f"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="deadChannleDetected" map="g"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="minValue" map="h"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="actualFrequency" map="i"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="aspectPostFixMap" map="j"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="channelQualityP" map="k"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="_log" map="l"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="satisfiedCount" map="m"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="copyAswiSummary" map="n"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="initSuccess" map="o"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="maxValue" map="p"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="lastStaleTS" map="q"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="accumulatedTotaDataCount" map="r"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="countAboveMaxValue" map="s"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="maxLookupTable" map="t"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="countBelowMinValue" map="u"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="firstRun" map="v"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="rootDir" map="w"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="isIntialBackfilled" map="x"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="isDeviceActive" map="y"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="lastAswiTS" map="z"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="logName" map="ab"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="minLookupTable" map="bb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="accumulatedSatisfiedCount" map="cb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="copyStatisticsSummary" map="db"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="jobConfiguration" map="eb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="lastDataValue" map="fb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="accumulatedTotalDeadChannelTime" map="gb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="actualStreamingCount" map="hb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="svconf" map="ib"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="aspectStatus" map="jb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="ruleEngine" map="kb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="aspectSummary" map="lb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="copyAspectSummary" map="mb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="aswiDuration" map="nb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="precision" map="ob"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="accumulatedAswi" map="pb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="channelStats" map="qb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="aswiSummary" map="rb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="sdf" map="sb"/>
  <field class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="staleEnable" map="tb"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="double getActualStreamingCount()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void setDeviceActive(boolean)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void cleanCopySummary()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void init(com.sigmastream.pr.processor.ChannelQualityP, java.lang.String, java.lang.String, java.lang.String, double, double, java.util.Map, java.util.Map, java.util.List, double, double, java.util.Map, short, com.sigmastream.bc.dataquality.RuleEngine, com.sigmastream.bc.dataquality.beans.StaleValueConfig, double, double, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="com.sigmastream.bc.dataquality.ChannelStatastics getChannelStats()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void setChannelQualityP(com.sigmastream.pr.processor.ChannelQualityP)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="java.util.concurrent.ConcurrentMap getCopyAswiSummary()" map="e"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="double getActualFrequency()" map="f"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="java.lang.String getOutputName()" map="g"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="java.util.concurrent.ConcurrentMap getCopyStatisticsSummary()" map="h"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="java.util.concurrent.ConcurrentMap getCopyAspectSummary()" map="i"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="boolean isInitSuccess()" map="j"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="boolean isDeviceActive()" map="k"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void addAswiSummary(java.lang.String, long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void testPrecision(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="boolean lambda$channelQualityProcess$0(java.util.Map$Entry)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="boolean lambda$channelQualityProcess$1(java.util.Map$Entry)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void setChannelStatistics(int, int, int, long)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void addAspectSummary(java.lang.String, long, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="double getAccumulatedAswi()" map="l"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void addStatisticsSummary(java.lang.String, long, java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.ChannelQualityMonitor" name="void channelQualityProcess(long, com.sigmastream.pr.beans.DataPayload, java.util.Map, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.YhChannelConfig)" map="b"/>
  <class name="com.sigmastream.bc.dataquality.RuleEngine$ACTION" map="_b"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine$ACTION" name="SKIP" map="b"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine$ACTION" name="$VALUES" map="c"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine$ACTION" name="INVALID" map="d"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine$ACTION" name="VALID" map="e"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine$ACTION" name="com.sigmastream.bc.dataquality.RuleEngine$ACTION[] values()" map="values"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine$ACTION" name="com.sigmastream.bc.dataquality.RuleEngine$ACTION valueOf(java.lang.String)" map="valueOf"/>
  <class name="com.sigmastream.bc.dataquality.RuleEngine$1" map="1"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine$1" name="$SwitchMap$com$sigmastream$bc$dataquality$RuleEngine$ACTION" map="b"/>
  <class name="com.sigmastream.bc.dataquality.RuleEngine" map="f"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="operandPattern" map="b"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="dataStreamsConfig" map="c"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="operatorPattern" map="d"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="svconf" map="e"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="operandSet" map="f"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="_log" map="g"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="inputDataStreamsInvert" map="h"/>
  <field class="com.sigmastream.bc.dataquality.RuleEngine" name="operatorSet" map="i"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="int lambda$new$0(com.sigmastream.bc.dataquality.beans.Correlation)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean processCorrelation(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean lambda$reationalOperator$5(java.util.regex.Matcher, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="com.sigmastream.bc.dataquality.RuleEngine$ACTION processContext(com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="void fillContextMap(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="void lambda$new$1(com.sigmastream.bc.dataquality.beans.Correlation)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="void lambda$fillContextMap$4(java.util.Map, java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean lambda$containsName$7(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean reationalOperator(java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean performAction(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean containsName(java.util.Set, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean lambda$null$2(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean lambda$reationalOperator$6(java.util.regex.Matcher, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="boolean staleValueProcessor(java.util.Map, com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.RuleEngine" name="void lambda$null$3(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <class name="com.sigmastream.bc.dataquality.EvaluateExpression" map="g"/>
  <method class="com.sigmastream.bc.dataquality.EvaluateExpression" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.bc.dataquality.EvaluateExpression" name="double calculatePostFix(java.util.List)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.EvaluateExpression" name="java.util.List getPostFixString(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.EvaluateExpression" name="int getPreference(char)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.EvaluateExpression" name="double calculate(java.lang.String)" map="c"/>
  <class name="com.sigmastream.bc.dataquality.WellStatistics" map="h"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="startTime" map="b"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="ASP_BASE_SCORE" map="c"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="endTime" map="d"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="_log" map="e"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="well" map="f"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="wellAswiGood" map="g"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="dataQualityGood" map="h"/>
  <field class="com.sigmastream.bc.dataquality.WellStatistics" name="totalCount" map="i"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="java.lang.String getWell()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="void setWellAswiGood(double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="void setTotalCount(long)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="void setWell(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="java.lang.String toJSON()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="long getStartTime()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="void setStartTime(long)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="long getEndTime()" map="e"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="void setDataQualityGood(boolean)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="double geometricMean(double, double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="java.util.Map getCalculatedQualityIndex(double, double, double)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="long getTotalCount()" map="f"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="boolean isDataQualityGood()" map="g"/>
  <method class="com.sigmastream.bc.dataquality.WellStatistics" name="void setEndTime(long)" map="d"/>
  <class name="com.sigmastream.bc.dataquality.DeviceQualityMonitor" map="i"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="initSuccess" map="b"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="permissibleGapPercent" map="c"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="deviceFrequency" map="d"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="isIntialBackfilled" map="e"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="firstRun" map="f"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="accumulatedAswi" map="g"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="aswiSummary" map="h"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="accumulatedTotalDeviceDeadTime" map="i"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="deviceStatistics" map="j"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="rootDir" map="k"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="aswiDuration" map="l"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="badQualityDetected" map="m"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="_log" map="n"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="sdf" map="o"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="configuration" map="p"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="channelsMonitor" map="q"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="dataGapThreashold" map="r"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="aspectPostFixMap" map="s"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="channelQualityP" map="t"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="lastActualTS" map="u"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="deadDeviceDetected" map="v"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="lastAswiTS" map="w"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="aspectSummary" map="x"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="accumulatedTotalDeviceStreamTime" map="y"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="accumulatedTotaDataCount" map="z"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="totalStreamTime" map="ab"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="lastDataValue" map="bb"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="statisticsSummary" map="cb"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="isDeviceActive" map="db"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="jobConfiguration" map="eb"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="logName" map="fb"/>
  <field class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="yhChannelConfig" map="gb"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="com.sigmastream.bc.dataquality.DeviceStatistics getDeviceStats()" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void init(com.sigmastream.pr.processor.ChannelQualityP, java.lang.String, java.lang.String, java.util.List, double, double, int, java.util.Map, double, com.sigmastream.bc.jobs.JobConfiguration, java.util.Map, com.sigmastream.pr.common.YhChannelConfig)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="boolean isInitSuccess()" map="c"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void addStatisticsSummary(java.lang.String, long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void raiseBadQualityDetectedEvent(long, long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void setDeviceActive(boolean)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void deviceQualityProcess(long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="boolean isDeviceActive()" map="d"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void addAspectSummary(java.lang.String, long, java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void addAswiSummary(java.lang.String, long, java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void setChannelQualityP(com.sigmastream.pr.processor.ChannelQualityP)" map="b"/>
  <method class="com.sigmastream.bc.dataquality.DeviceQualityMonitor" name="void setDeviceStats(com.sigmastream.bc.dataquality.DeviceStatistics)" map="b"/>
  <class name="com.sigmastream.bc.accumulator.MSEAccumulator$1" map="1"/>
  <package name="com.sigmastream.bc.mse" map="f"/>
  <class name="com.sigmastream.bc.mse.MSETag" map="b"/>
  <field class="com.sigmastream.bc.mse.MSETag" name="name" map="b"/>
  <field class="com.sigmastream.bc.mse.MSETag" name="MSE_WITHOUT_MOTOR" map="c"/>
  <field class="com.sigmastream.bc.mse.MSETag" name="$VALUES" map="d"/>
  <field class="com.sigmastream.bc.mse.MSETag" name="Unknown" map="e"/>
  <field class="com.sigmastream.bc.mse.MSETag" name="state" map="f"/>
  <field class="com.sigmastream.bc.mse.MSETag" name="MSE_WITH_MOTOR" map="g"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="com.sigmastream.bc.mse.MSETag valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="com.sigmastream.bc.mse.MSETag[] values()" map="values"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="int getState()" map="c"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="int getStateByName(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="com.sigmastream.bc.mse.MSETag canContain(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.mse.MSETag" name="java.lang.String getNameByState(int)" map="b"/>
  <class name="com.sigmastream.bc.mse.MSEFliterAccumlator" map="c"/>
  <field class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="payload" map="b"/>
  <field class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="inputDataStreamsConfig" map="c"/>
  <field class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="dataPayloads" map="d"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="void initConfig(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="com.sigmastream.bc.mse.MSEFliterAccumlator deduct(com.sigmastream.bc.accumulator.FilterAccumulator)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="int hashCode()" map="hashCode"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="com.sigmastream.bc.mse.MSEFliterAccumlator combine(com.sigmastream.bc.mse.MSEFliterAccumlator)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="com.sigmastream.bc.mse.MSEFliterAccumlator accumulate(com.sigmastream.bc.operator.Payload)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="java.util.Map getData()" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="void writeObject(com.hazelcast.nio.ObjectDataOutput)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEFliterAccumlator" name="com.sigmastream.bc.operator.Payload export()" map="c"/>
  <class name="com.sigmastream.bc.mse.MSEProc" map="d"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="outputPath" map="b"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="rootDir" map="c"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="brw" map="d"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="mseValues" map="e"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="_log" map="f"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="operatorName" map="g"/>
  <field class="com.sigmastream.bc.mse.MSEProc" name="jobConfiguration" map="h"/>
  <method class="com.sigmastream.bc.mse.MSEProc" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.bc.mse.MSEProc" name="void close()" map="close"/>
  <method class="com.sigmastream.bc.mse.MSEProc" name="void writeCSV(long, com.sigmastream.bc.mse.MSEAggreatePayload)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEProc" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.bc.mse.MSEAggreatePayload" map="e"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="rpm" map="b"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="rop" map="c"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="mse" map="d"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="channelPayloads" map="e"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="timestamp" map="f"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="torque" map="g"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="type" map="h"/>
  <field class="com.sigmastream.bc.mse.MSEAggreatePayload" name="wob" map="i"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String getRop()" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setTorque(java.lang.String)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setRop(java.lang.String)" map="c"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String getMse()" map="c"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setWob(java.lang.String)" map="d"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String getRpm()" map="d"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setTimestamp(java.lang.Long)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setChannelPayloads(java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String getWob()" map="e"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setType(java.lang.String)" map="e"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.Long getTimestamp()" map="f"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String getTorque()" map="g"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.lang.String getType()" map="h"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="com.sigmastream.bc.mse.MSEAggreatePayload getInstance()" map="i"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setMse(java.lang.String)" map="f"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="java.util.Map getChannelPayloads()" map="j"/>
  <method class="com.sigmastream.bc.mse.MSEAggreatePayload" name="void setRpm(java.lang.String)" map="g"/>
  <class name="com.sigmastream.bc._3ps._3psConnectionManager" map="b"/>
  <field class="com.sigmastream.bc._3ps._3psConnectionManager" name="_3psInstance" map="b"/>
  <field class="com.sigmastream.bc._3ps._3psConnectionManager" name="socketMap" map="c"/>
  <method class="com.sigmastream.bc._3ps._3psConnectionManager" name="java.net.Socket setup(java.lang.String, int)" map="b"/>
  <method class="com.sigmastream.bc._3ps._3psConnectionManager" name="com.sigmastream.bc._3ps._3psConnectionManager getInstance()" map="b"/>
  <class name="com.sigmastream.bc._3ps.NettyServer$1$1" map="1"/>
  <field class="com.sigmastream.bc._3ps.NettyServer$1$1" name="this$1" map="b"/>
  <method class="com.sigmastream.bc._3ps.NettyServer$1$1" name="void channelActive(io.netty.channel.ChannelHandlerContext)" map="channelActive"/>
  <method class="com.sigmastream.bc._3ps.NettyServer$1$1" name="void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object)" map="channelRead"/>
  <class name="com.sigmastream.bc._3ps.NettyServer$1" map="1"/>
  <field class="com.sigmastream.bc._3ps.NettyServer$1" name="this$0" map="b"/>
  <method class="com.sigmastream.bc._3ps.NettyServer$1" name="void initChannel(io.netty.channel.Channel)" map="initChannel"/>
  <method class="com.sigmastream.bc._3ps.NettyServer$1" name="void initChannel(io.netty.channel.socket.SocketChannel)" map="b"/>
  <class name="com.sigmastream.bc._3ps.NettyServer" map="c"/>
  <field class="com.sigmastream.bc._3ps.NettyServer" name="port" map="b"/>
  <field class="com.sigmastream.bc._3ps.NettyServer" name="childGroup" map="c"/>
  <field class="com.sigmastream.bc._3ps.NettyServer" name="channelActiveHandler" map="d"/>
  <field class="com.sigmastream.bc._3ps.NettyServer" name="channel" map="e"/>
  <field class="com.sigmastream.bc._3ps.NettyServer" name="parentGroup" map="f"/>
  <field class="com.sigmastream.bc._3ps.NettyServer" name="messageConsumer" map="g"/>
  <method class="com.sigmastream.bc._3ps.NettyServer" name="void stop()" map="b"/>
  <method class="com.sigmastream.bc._3ps.NettyServer" name="java.util.function.Consumer access$000(com.sigmastream.bc._3ps.NettyServer)" map="b"/>
  <method class="com.sigmastream.bc._3ps.NettyServer" name="void start()" map="c"/>
  <method class="com.sigmastream.bc._3ps.NettyServer" name="java.util.function.Consumer access$100(com.sigmastream.bc._3ps.NettyServer)" map="c"/>
  <package name="com.sigmastream.bc.dysfunction" map="g"/>
  <class name="com.sigmastream.bc.dysfunction.DysFunctionP" map="b"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="channelMinMaxInformation" map="b"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="CONSTANT_KEY" map="c"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="outputPath" map="d"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="brw" map="e"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="_log" map="f"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="jobConfiguration" map="g"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="logValues" map="h"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="operatorName" map="i"/>
  <field class="com.sigmastream.bc.dysfunction.DysFunctionP" name="inputChannels" map="j"/>
  <method class="com.sigmastream.bc.dysfunction.DysFunctionP" name="void writeCSV(long, java.util.Map)" map="b"/>
  <method class="com.sigmastream.bc.dysfunction.DysFunctionP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.bc.dysfunction.DysFunctionP" name="void close()" map="close"/>
  <method class="com.sigmastream.bc.dysfunction.DysFunctionP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <package name="com.sigmastream.pr.signalprocessing" map="b"/>
  <class name="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" map="_b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" name="limit" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" name="sourceChannel" map="d"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" name="queueListener" map="e"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP$EmitQueue" name="boolean add(java.lang.Object)" map="add"/>
  <class name="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="CONSTANT_KEY" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="rootDir" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="mapChPowerTwoData" map="d"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="operatorConfig" map="e"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="_log" map="f"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="jobConfiguration" map="g"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="inputDataStreamsInvert" map="h"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="operatorName" map="i"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="mapChVQueue" map="j"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="void lambda$init$1(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTCollectOperationP" name="void lambda$null$0(java.lang.String, java.util.List)" map="b"/>
  <class name="com.sigmastream.pr.signalprocessing.EmitQueue" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.EmitQueue" name="limit" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.EmitQueue" name="queueListener" map="c"/>
  <method class="com.sigmastream.pr.signalprocessing.EmitQueue" name="boolean add(java.lang.Object)" map="add"/>
  <class name="com.sigmastream.pr.signalprocessing.InputDataPanel" map="d"/>
  <field class="com.sigmastream.pr.signalprocessing.InputDataPanel" name="points" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.InputDataPanel" name="inputData" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.InputDataPanel" name="pts" map="d"/>
  <method class="com.sigmastream.pr.signalprocessing.InputDataPanel" name="double[] getInputData()" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.InputDataPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="com.sigmastream.pr.signalprocessing.InputDataPanel" name="void setData(double[])" map="b"/>
  <class name="com.sigmastream.pr.signalprocessing.Complex" map="e"/>
  <field class="com.sigmastream.pr.signalprocessing.Complex" name="im" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.Complex" name="re" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.Complex" name="_log" map="d"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex minus(com.sigmastream.pr.signalprocessing.Complex)" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="double re()" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="double abs()" map="c"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex conjugate()" map="d"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex scale(double)" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex tan()" map="e"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex divides(com.sigmastream.pr.signalprocessing.Complex)" map="c"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex exp()" map="f"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="int hashCode()" map="hashCode"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex cos()" map="g"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex times(com.sigmastream.pr.signalprocessing.Complex)" map="d"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex plus(com.sigmastream.pr.signalprocessing.Complex, com.sigmastream.pr.signalprocessing.Complex)" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="double im()" map="h"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="double phase()" map="i"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex reciprocal()" map="j"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex plus(com.sigmastream.pr.signalprocessing.Complex)" map="e"/>
  <method class="com.sigmastream.pr.signalprocessing.Complex" name="com.sigmastream.pr.signalprocessing.Complex sin()" map="k"/>
  <class name="com.sigmastream.pr.signalprocessing.FFTResultPanel" map="f"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTResultPanel" name="fftResultset" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTResultPanel" name="inputData" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTResultPanel" name="pts" map="d"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTResultPanel" name="void paintComponent(java.awt.Graphics)" map="paintComponent"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTResultPanel" name="void setData(double[])" map="b"/>
  <class name="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" map="_b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" name="limit" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" name="sourceChannel" map="d"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" name="queueListener" map="e"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTOperationP$EmitQueue" name="boolean add(java.lang.Object)" map="add"/>
  <class name="com.sigmastream.pr.signalprocessing.FFTOperationP" map="g"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="CONSTANT_KEY" map="b"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="rootDir" map="c"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="operatorConfig" map="d"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="_log" map="e"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="jobConfiguration" map="f"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="inputDataStreamsInvert" map="g"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="operatorName" map="h"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="mapChVfftResult" map="i"/>
  <field class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="mapChVQueue" map="j"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="double[] applyFFT(double[])" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFTOperationP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.signalprocessing.FFT" map="h"/>
  <field class="com.sigmastream.pr.signalprocessing.FFT" name="_log" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="java.lang.Boolean lambda$main$0(com.sigmastream.pr.signalprocessing.FFTResultPanel, com.sigmastream.pr.signalprocessing.InputDataPanel, javax.swing.JPanel, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="com.sigmastream.pr.signalprocessing.Complex[] cconvolve(com.sigmastream.pr.signalprocessing.Complex[], com.sigmastream.pr.signalprocessing.Complex[])" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="void mainx(java.lang.String[])" map="c"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="void show(com.sigmastream.pr.signalprocessing.Complex[], java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="com.sigmastream.pr.signalprocessing.Complex[] convolve(com.sigmastream.pr.signalprocessing.Complex[], com.sigmastream.pr.signalprocessing.Complex[])" map="c"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="com.sigmastream.pr.signalprocessing.Complex[] ifft(com.sigmastream.pr.signalprocessing.Complex[])" map="b"/>
  <method class="com.sigmastream.pr.signalprocessing.FFT" name="com.sigmastream.pr.signalprocessing.Complex[] fft(com.sigmastream.pr.signalprocessing.Complex[])" map="c"/>
  <class name="com.sigmastream.pr.signalprocessing.Main" map="i"/>
  <method class="com.sigmastream.pr.signalprocessing.Main" name="void main(java.lang.String[])" map="b"/>
  <package name="com.sigmastream.pr.aggregator" map="c"/>
  <class name="com.sigmastream.pr.aggregator.WindowAggregation" map="b"/>
  <field class="com.sigmastream.pr.aggregator.WindowAggregation" name="dataStreams" map="b"/>
  <field class="com.sigmastream.pr.aggregator.WindowAggregation" name="inputDataStreamsConfig" map="c"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="java.util.Map lambda$finishFn$b215c49e$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="boolean lambda$null$1(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="void lambda$deductFn$36f70b33$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="void lambda$accumulateFn$f281f63a$1(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="void lambda$combineFn$36f70b33$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <method class="com.sigmastream.pr.aggregator.WindowAggregation" name="boolean lambda$null$0(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="c"/>
  <class name="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" map="c"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="bitDepthChannelName" map="c"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="_log" map="d"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="void lambda$combineFn$25897737$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="void lambda$deductFn$25897737$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$a960e728$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="boolean isBitDepthStationary(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="void lambda$accumulateFn$8442cd07$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthStationaryOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" map="d"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="bitDepthChannelName" map="c"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="_log" map="d"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="void lambda$combineFn$25897737$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="boolean isBitDepthIncreasing(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="void lambda$deductFn$25897737$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="void lambda$accumulateFn$d2bc8c4f$1(java.util.Map, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$a960e728$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="void lambda$accumulateFn$8442cd07$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.PumpOnOperation" map="e"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="totalSPM" map="c"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="totalFlowIn" map="d"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="pumpSpm3" map="e"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="_log" map="f"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="pumpSpm2" map="g"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="pumpSpm1" map="h"/>
  <field class="com.sigmastream.pr.aggregator.PumpOnOperation" name="channelFilter" map="i"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="double lambda$null$1(java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="double lambda$null$0(java.lang.Double)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="double lambda$null$2(java.lang.Double)" map="d"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="boolean isPumpOn(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="void lambda$combineFn$876257f5$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="void lambda$deductFn$876257f5$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="double lambda$null$3(java.lang.Double)" map="e"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$89e53fdf$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="void lambda$accumulateFn$1a6489$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.PumpOnOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.OEOperation" map="f"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="fixedLag" map="b"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="outputDataStreamNm" map="c"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="_log" map="d"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="event" map="e"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="emitDecisions" map="f"/>
  <field class="com.sigmastream.pr.aggregator.OEOperation" name="datapushEnable" map="g"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="void lambda$combineFn$f2ceecd1$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="java.util.List lambda$finishFn$b5f451e8$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="void lambda$deductFn$f2ceecd1$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="void lambda$accumulateFn$985fc15a$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.OEOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" map="g"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="bitDepthChannelName" map="c"/>
  <field class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="_log" map="d"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="void lambda$combineFn$876257f5$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="boolean isBitDepthDecreasing(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="void lambda$deductFn$876257f5$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$89e53fdf$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="void lambda$accumulateFn$1a6489$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitDepthDecreasingOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.AveragingAggregation" map="h"/>
  <field class="com.sigmastream.pr.aggregator.AveragingAggregation" name="_log" map="b"/>
  <field class="com.sigmastream.pr.aggregator.AveragingAggregation" name="dataStreams" map="c"/>
  <field class="com.sigmastream.pr.aggregator.AveragingAggregation" name="inputDataStreamsConfig" map="d"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="java.util.Map lambda$finishFn$b215c49e$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="boolean lambda$null$1(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="void lambda$deductFn$36f70b33$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="void lambda$accumulateFn$d8b80ef8$1(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="void lambda$combineFn$36f70b33$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <method class="com.sigmastream.pr.aggregator.AveragingAggregation" name="boolean lambda$null$0(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="c"/>
  <class name="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" map="i"/>
  <field class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="holeDepthChannleName" map="c"/>
  <field class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="_log" map="d"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="void lambda$combineFn$25897737$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="boolean isHoleDepthIncreasing(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="void lambda$deductFn$25897737$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$a960e728$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="void lambda$accumulateFn$8442cd07$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HoleDepthIncreasingOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.SlopeAggregation" map="j"/>
  <field class="com.sigmastream.pr.aggregator.SlopeAggregation" name="_log" map="b"/>
  <field class="com.sigmastream.pr.aggregator.SlopeAggregation" name="dataStreams" map="c"/>
  <field class="com.sigmastream.pr.aggregator.SlopeAggregation" name="inputDataStreamsConfig" map="d"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="java.util.Map lambda$finishFn$b215c49e$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="boolean lambda$null$1(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="void lambda$deductFn$36f70b33$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="void lambda$accumulateFn$f281f63a$1(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="void lambda$combineFn$36f70b33$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <method class="com.sigmastream.pr.aggregator.SlopeAggregation" name="boolean lambda$null$0(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="c"/>
  <class name="com.sigmastream.pr.aggregator.FFTOperation" map="k"/>
  <field class="com.sigmastream.pr.aggregator.FFTOperation" name="fixedLag" map="b"/>
  <field class="com.sigmastream.pr.aggregator.FFTOperation" name="_log" map="c"/>
  <field class="com.sigmastream.pr.aggregator.FFTOperation" name="event" map="d"/>
  <field class="com.sigmastream.pr.aggregator.FFTOperation" name="datapushEnable" map="e"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="void lambda$accumulateFn$1595fd04$1(java.util.List, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="double[] applyFFT(double[])" map="b"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="void lambda$null$0(double[], java.util.concurrent.atomic.AtomicInteger, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="void lambda$combineFn$57190875$1(java.util.List, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="void lambda$deductFn$57190875$1(java.util.List, java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="java.util.List lambda$finishFn$7d32dfa8$1(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.FFTOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <class name="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" map="l"/>
  <field class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="HookLoadChannleName" map="c"/>
  <field class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="_log" map="d"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="boolean isHookLoadStationary(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="void lambda$combineFn$25897737$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="void lambda$deductFn$25897737$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$a960e728$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="void lambda$accumulateFn$8442cd07$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.HookLoadStationaryOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" map="m"/>
  <field class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="bitDepthChannelName" map="c"/>
  <field class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="holeDepthChannleName" map="d"/>
  <field class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="_log" map="e"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="double lambda$null$1(java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="boolean isDepthDown(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="double lambda$null$0(java.lang.Double)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="void lambda$combineFn$876257f5$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="void lambda$deductFn$876257f5$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$89e53fdf$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="void lambda$accumulateFn$1a6489$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.BitLessThanHoleDepthOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <class name="com.sigmastream.pr.aggregator.RotaryRPMOperation" map="n"/>
  <field class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="outputChannleName" map="b"/>
  <field class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="rotaryRPM" map="c"/>
  <field class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="_log" map="d"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withAccumulateFns(com.hazelcast.function.BiConsumerEx[])" map="withAccumulateFns"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.FunctionEx exportFn()" map="exportFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.jet.aggregate.AggregateOperation withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.jet.aggregate.AggregateOperation andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withAccumulateFn(com.hazelcast.function.BiConsumerEx)" map="withAccumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.SupplierEx createFn()" map="createFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn(int)" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.BiConsumerEx deductFn()" map="deductFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 withIdentityFinish()" map="withIdentityFinish"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="boolean isRotaryRPM(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="double lambda$null$0(java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.FunctionEx finishFn()" map="finishFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="void lambda$combineFn$876257f5$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="int arity()" map="arity"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="void lambda$deductFn$876257f5$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.BiConsumerEx accumulateFn()" map="accumulateFn"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.jet.aggregate.AggregateOperation1 andThen(com.hazelcast.function.FunctionEx)" map="andThen"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.sigmastream.pr.common.TimestampedEntry lambda$finishFn$89e53fdf$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="void lambda$accumulateFn$1a6489$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.aggregator.RotaryRPMOperation" name="com.hazelcast.function.BiConsumerEx combineFn()" map="combineFn"/>
  <package name="com.sigmastream.pr.operator.rigstates" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.InSlipsOperator" map="b"/>
  <field class="com.sigmastream.pr.operator.rigstates.InSlipsOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.InSlipsOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.InSlipsOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.BackReamingOperator" map="c"/>
  <field class="com.sigmastream.pr.operator.rigstates.BackReamingOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.BackReamingOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.BackReamingOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.TripInOperator" map="d"/>
  <field class="com.sigmastream.pr.operator.rigstates.TripInOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.TripInOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.TripInOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.PumpInOperator" map="e"/>
  <field class="com.sigmastream.pr.operator.rigstates.PumpInOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpInOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpInOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.TripOutOperator" map="f"/>
  <field class="com.sigmastream.pr.operator.rigstates.TripOutOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.TripOutOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.TripOutOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.StationaryOperator" map="g"/>
  <field class="com.sigmastream.pr.operator.rigstates.StationaryOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.StationaryOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.StationaryOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.DrillingRotaryOperator" map="h"/>
  <field class="com.sigmastream.pr.operator.rigstates.DrillingRotaryOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.DrillingRotaryOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.DrillingRotaryOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.RotatingInOperator" map="i"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotatingInOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingInOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingInOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" map="j"/>
  <field class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="void lambda$_oeAggregateOperation$235bb3f6$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="java.util.List getExtraChannels()" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="java.util.Map lambda$_oeAggregateOperation$5cf5a11b$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="void lambda$_oeAggregateOperation$235bb3f6$2(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 _oeAggregateOperation(java.lang.String, int, boolean, boolean)" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="java.util.List getChannels()" map="c"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="void lambda$_oeAggregateOperation$235bb3f6$3(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.rigstates.OperationalEventsOperator" name="java.util.Map lambda$_oeAggregateOperation$5cf5a11b$2(java.util.Map)" map="d"/>
  <class name="com.sigmastream.pr.operator.rigstates.CirculateOperator" map="k"/>
  <field class="com.sigmastream.pr.operator.rigstates.CirculateOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.CirculateOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.CirculateOperator" name="java.util.Map parseChannels(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.CirculateOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.SlideDrillingOperator" map="l"/>
  <field class="com.sigmastream.pr.operator.rigstates.SlideDrillingOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.SlideDrillingOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.SlideDrillingOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.RotateAndCirculateOperator" map="m"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotateAndCirculateOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotateAndCirculateOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotateAndCirculateOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.PumpOutOperator" map="n"/>
  <field class="com.sigmastream.pr.operator.rigstates.PumpOutOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpOutOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpOutOperator" name="java.util.Map parseChannels(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.PumpOutOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.RotatingOutOperator" map="o"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotatingOutOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingOutOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingOutOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.ReamingOperator" map="p"/>
  <field class="com.sigmastream.pr.operator.rigstates.ReamingOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.ReamingOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.ReamingOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.rigstates.RotatingOperator" map="q"/>
  <field class="com.sigmastream.pr.operator.rigstates.RotatingOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.rigstates.RotatingOperator" name="java.util.List getChannels()" map="b"/>
  <class name="com.sigmastream.pr.operator.oes.WellOperationalOperator$1" map="1"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator$1" name="val$instance" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.WellOperationalOperator$1" name="val$operatorConfig" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.WellOperationalOperator$1" name="void run()" map="run"/>
  <class name="com.sigmastream.pr.operator.oes.FrictionTestOperator" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.FrictionTestOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.FrictionTestOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.FrictionTestOperator" name="java.util.Map parseInputDataStreams(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.FrictionTestOperator" name="java.util.Map parseInputChannels(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.FrictionTestOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)" map="d"/>
  <class name="com.sigmastream.pr.operator.oes.TLAOperator" map="c"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="inputChannelsConfig" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="subscriptionType" map="c"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="hazelcastJob" map="d"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="outputChannelsConfig" map="e"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="_log" map="f"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="jobConfiguration" map="g"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="JobStatusInfo" map="h"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="aspectPostFixMap" map="i"/>
  <field class="com.sigmastream.pr.operator.oes.TLAOperator" name="inputChannels" map="j"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="double lambda$new$2c440b57$1(com.sigmastream.bc.operator.Payload)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="java.lang.String lambda$new$a46510b$2(com.sigmastream.bc.operator.AggregatedChannel)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="com.sigmastream.bc.operator.AggregatedChannel lambda$new$a46510b$1(com.hazelcast.jet.datamodel.KeyedWindowResult)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="com.hazelcast.jet.Job getJob()" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader lambda$new$55efb58f$1(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP, com.hazelcast.jet.core.Processor$Context)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="long lambda$new$f966a442$1(com.sigmastream.bc.operator.Payload)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="double lambda$new$2c440b57$2(com.sigmastream.bc.operator.Payload)" map="d"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.TLAOperator" name="void parseConfig(java.util.Map)" map="c"/>
  <class name="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" map="d"/>
  <field class="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" name="_log" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" name="inputChannelsConfig" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" name="java.util.Map parseInputDataStreams(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.OnOffBottomScannerOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)" map="c"/>
  <class name="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" map="e"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="inputChannelsConfig" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="isBackFillJobComplete" map="c"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="slideBy" map="d"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="outputDevicesConfig" map="e"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="subscriptionType" map="f"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="hazelcastJobInfo" map="g"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="arithmeticProgression" map="h"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="hazelcastJob" map="i"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="outputChannelsConfig" map="j"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="filterinputChannelsConfig" map="k"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="_log" map="l"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="jobConfiguration" map="m"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="JobStatusInfo" map="n"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="rigID" map="o"/>
  <field class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="inputChannels" map="p"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="double lambda$new$10883421$1(com.sigmastream.bc.operator.Payload)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="java.lang.String createDir(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader lambda$new$47ed1dcb$1(com.sigmastream.bc.websocketFactory.SocketSubscribe, com.hazelcast.jet.core.Processor$Context)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="long lambda$new$dda96f56$1(com.sigmastream.bc.operator.Payload)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="boolean lambda$new$9b51005c$1(com.sigmastream.bc.operator.Payload)" map="d"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="com.sigmastream.bc.operator.AggregatedChannel lambda$new$7af5a1ed$2(com.hazelcast.jet.datamodel.KeyedWindowResult)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="java.lang.String lambda$new$7af5a1ed$3(com.sigmastream.bc.operator.AggregatedChannel)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="com.hazelcast.jet.Job getJob()" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="double lambda$new$10883421$2(com.sigmastream.bc.operator.Payload)" map="e"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 getAggregateOperations(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="java.lang.String lambda$new$7af5a1ed$1(com.sigmastream.bc.operator.Payload)" map="f"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="java.lang.String createAbsoluteDir(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.ArithmeticProgressionOperator" name="void parseConfig(java.util.Map)" map="c"/>
  <class name="com.sigmastream.pr.operator.oes.PyBridgeOperator" map="f"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="failedCount" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="pythonScriptsPath" map="c"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="hazelcastJobInfo" map="d"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="backfillEndTime" map="e"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="pythonScriptMethodName" map="f"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="inputChannels" map="g"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="JobStatusInfo" map="h"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="backfillStartTime" map="i"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="slideBy" map="j"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="hazelcastJob" map="k"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="port" map="l"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="inputChannelsConfig" map="m"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="pythonScriptName" map="n"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="_log" map="o"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="apikey" map="p"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="host" map="q"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="outputChannelsConfig" map="r"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="speedUpFactor" map="s"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="metaData" map="t"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="backfillSpeedUpFactor" map="u"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="isBackFillJobComplete" map="v"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="secureConnection" map="w"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="clientId" map="x"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="jobConfiguration" map="y"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="subscriptionType" map="z"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="outputDevicesConfig" map="ab"/>
  <field class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="lastKnownHistoricalValue" map="bb"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="void setLastKnownValue()" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.String createAbsoluteDir(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object lambda$new$68caad89$2(java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.String getMnemonic(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.String createDir(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object lambda$new$5ba6f000$1(java.util.Map, java.lang.String, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.util.List getChannelList()" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object lambda$new$7065d2b8$2(java.util.Map, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="com.sigmastream.pr.beans.DataPayload lambda$new$1220e153$1(com.sigmastream.bc.operator.Payload)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object lambda$new$7065d2b8$1(java.util.Map, java.lang.Object)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader lambda$new$55efb58f$1(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP, com.hazelcast.jet.core.Processor$Context)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="com.hazelcast.jet.Job getJob()" map="d"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object lambda$new$5ba6f000$2(java.util.Map, java.lang.String, java.lang.Object)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="com.sigmastream.pr.beans.DataPayload lambda$new$1220e153$2(com.sigmastream.bc.operator.Payload)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="void parseConfig(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="java.lang.Object lambda$new$68caad89$1(java.lang.Object)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.PyBridgeOperator" name="com.sigmastream.bc.websocketFactory.SocketSubscribe$SocketReader lambda$new$47ed1dcb$1(com.sigmastream.bc.websocketFactory.SocketSubscribe, com.hazelcast.jet.core.Processor$Context)" map="b"/>
  <class name="com.sigmastream.pr.operator.oes.DysfunctionOperator$1" map="1"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator$1" name="val$instance" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator$1" name="val$operatorConfig" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator$1" name="void run()" map="run"/>
  <class name="com.sigmastream.pr.operator.oes.DysfunctionOperator" map="g"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="inputChannelsConfig" map="b"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="isBackFillJobComplete" map="c"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="subscriptionType" map="d"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="hazelcastJobInfo" map="e"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="hazelcastJob" map="f"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="outputChannelsConfig" map="g"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="_log" map="h"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="JobStatusInfo" map="i"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="jobConfiguration" map="j"/>
  <field class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="inputChannels" map="k"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="java.lang.String createDir(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="java.lang.String lambda$new$799516ee$3(com.sigmastream.bc.operator.AggregatedChannel)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="double lambda$new$a764d422$1(com.sigmastream.bc.operator.Payload)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="java.lang.String lambda$new$799516ee$1(com.sigmastream.bc.operator.Payload)" map="c"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="com.hazelcast.jet.Job getJob()" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader lambda$new$55efb58f$1(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP, com.hazelcast.jet.core.Processor$Context)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="long lambda$new$7188a017$1(com.sigmastream.bc.operator.Payload)" map="d"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="double lambda$new$a764d422$2(com.sigmastream.bc.operator.Payload)" map="e"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="com.sigmastream.bc.operator.AggregatedChannel lambda$new$799516ee$2(com.hazelcast.jet.datamodel.KeyedWindowResult)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="java.lang.String createAbsoluteDir(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.oes.DysfunctionOperator" name="void parseConfig(java.util.Map)" map="c"/>
  <class name="com.sigmastream.pr.operator.RunningAvgOperator" map="b"/>
  <field class="com.sigmastream.pr.operator.RunningAvgOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.RunningAvgOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.RunningAvgOperator" name="double lambda$new$6fe56013$1(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.operator.RunningAvgOperator" name="java.util.List parseChannels(java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.operator.YhSourceOperator" map="c"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="remoteCachePort" map="b"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="lastKnownValueMap" map="c"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="_log" map="d"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="origDataStreamConfigs" map="e"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="groupPassword" map="f"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="groupname" map="g"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="isRemoteCacheEnable" map="h"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="sinkname" map="i"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="remoteCacheHost" map="j"/>
  <field class="com.sigmastream.pr.operator.YhSourceOperator" name="origDataStreams" map="k"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="void lambda$_sourceAggregateOperation$3f0499ac$1(java.util.List, java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="java.util.Map parseInputDataStreams(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="java.util.Map lambda$_sourceAggregateOperation$87c3d331$2(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="java.util.Map lambda$_sourceAggregateOperation$87c3d331$1(java.util.Map)" map="d"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 _sourceAggregateOperation(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="void lambda$_sourceAggregateOperation$d365b88c$1(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="java.util.List parseInputChannels(java.util.Map)" map="e"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="com.hazelcast.client.config.ClientConfig externalHazelcastClientConfig()" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSourceOperator" name="void lambda$_sourceAggregateOperation$d365b88c$2(java.util.Map, java.util.Map)" map="c"/>
  <class name="com.sigmastream.pr.operator.MQTTSinkOperator" map="d"/>
  <field class="com.sigmastream.pr.operator.MQTTSinkOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.MQTTSinkOperator" name="void main(java.lang.String[])" map="b"/>
  <class name="com.sigmastream.pr.operator.MainOperator" map="e"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="clientId" map="b"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="operator" map="c"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="port" map="d"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="initialized" map="e"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="rigId" map="f"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="isBackprocessingJobEnable" map="g"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="startupOperators" map="h"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="apikey" map="i"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="_log" map="j"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="secureConnection" map="k"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="isRigPresent" map="l"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="starttime" map="m"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="subAssetId" map="n"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="fileList" map="o"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="host" map="p"/>
  <field class="com.sigmastream.pr.operator.MainOperator" name="assetId" map="q"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void lambda$executeBackfillingJob$1(com.sigmastream.bc.jobs.JobInformation, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="java.util.List showFileAndDirectory(java.io.File, int)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void executeBackProcessJob(java.lang.String, long)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="java.lang.String getOperator()" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void setOperator(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void preparePendingJobs(java.lang.String, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void executeBackfillingJob(java.lang.String, java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void setRigPresent(boolean)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="boolean isRigPresent()" map="c"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="boolean initExtended(java.util.Map, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="boolean init(java.io.File)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void start()" map="d"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void submitLiveJob(java.lang.String, com.hazelcast.jet.JetInstance, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="java.lang.String getTextIntend(int)" map="b"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void getActiveWEllInfo()" map="e"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void submitJobToJet()" map="f"/>
  <method class="com.sigmastream.pr.operator.MainOperator" name="void lambda$executeBackProcessJob$0(long, java.lang.String)" map="b"/>
  <class name="com.sigmastream.pr.operator.YhSinkOperator" map="f"/>
  <field class="com.sigmastream.pr.operator.YhSinkOperator" name="_log" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="java.util.Map lambda$_channelAggregateOperation$ecec4591$1(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="void lambda$_channelAggregateOperation$4d3950eb$1(int, java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="void lambda$_channelAggregateOperation$903b12ec$1(java.util.Map, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="void lambda$_channelAggregateOperation$903b12ec$2(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="java.util.Map parseOutputDataStreams(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.YhSinkOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 _channelAggregateOperation(int)" map="b"/>
  <class name="com.sigmastream.pr.operator.MSEOperator$1" map="1"/>
  <field class="com.sigmastream.pr.operator.MSEOperator$1" name="ch" map="b"/>
  <field class="com.sigmastream.pr.operator.MSEOperator$1" name="val$str" map="c"/>
  <field class="com.sigmastream.pr.operator.MSEOperator$1" name="pos" map="d"/>
  <method class="com.sigmastream.pr.operator.MSEOperator$1" name="void nextChar()" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator$1" name="double parseFactor()" map="c"/>
  <method class="com.sigmastream.pr.operator.MSEOperator$1" name="boolean eat(int)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator$1" name="double parse()" map="d"/>
  <method class="com.sigmastream.pr.operator.MSEOperator$1" name="double parseTerm()" map="e"/>
  <method class="com.sigmastream.pr.operator.MSEOperator$1" name="double parseExpression()" map="f"/>
  <class name="com.sigmastream.pr.operator.MSEOperator" map="g"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="inputErrorValues" map="b"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="outputChannelsConfig" map="c"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="_log" map="d"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="inputChannelsConfig" map="e"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="jobConfiguration" map="f"/>
  <field class="com.sigmastream.pr.operator.MSEOperator" name="inputChannels" map="g"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$mseOperation$a4270fa7$1(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="com.sigmastream.bc.mse.MSEAggreatePayload lambda$new$997a23ae$1(com.hazelcast.jet.datamodel.KeyedWindowResult)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$combineToListOperation$281d224a$3(java.util.List, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="java.util.List lambda$combineToListOperation$ea26946f$2(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="java.util.List lambda$combineToListOperation$ea26946f$1(java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="com.sigmastream.pr.processor.oes.CSVBatchDataReaderP$FileReader lambda$new$6edd424f$1(com.sigmastream.pr.processor.oes.CSVBatchDataReaderP, com.hazelcast.jet.core.Processor$Context)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="double eval(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="java.util.Map parseChannels(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$new$da54b6d0$1(com.sigmastream.bc.mse.MSEAggreatePayload)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 combineToListOperation()" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="java.lang.Long lambda$new$997a23ae$2(com.sigmastream.bc.mse.MSEAggreatePayload)" map="c"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$mseOperation$a4270fa7$2(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="com.sigmastream.pr.common.TimestampedEntry lambda$mseOperation$4cdc105f$1(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$combineToListOperation$281d224a$1(java.util.List, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$combineToListOperation$281d224a$2(java.util.List, java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void parseConfig(java.util.Map)" map="d"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="com.sigmastream.bc.mse.MSEAggreatePayload lambda$new$997a23ae$3(com.sigmastream.bc.mse.MSEAggreatePayload)" map="d"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 mseOperation(java.util.Map)" map="e"/>
  <method class="com.sigmastream.pr.operator.MSEOperator" name="void lambda$mseOperation$a4270fa7$3(java.util.Map, java.util.Map)" map="d"/>
  <class name="com.sigmastream.pr.operator._3psRPMOperator" map="h"/>
  <field class="com.sigmastream.pr.operator._3psRPMOperator" name="_log" map="b"/>
  <field class="com.sigmastream.pr.operator._3psRPMOperator" name="COUNTER" map="c"/>
  <field class="com.sigmastream.pr.operator._3psRPMOperator" name="atomicInteger" map="d"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="void lambda$null$0(java.util.Map, long, int, boolean, boolean, java.util.Map$Entry)" map="b"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="void lambda$_3psAggregateOperation$6ed92c81$2(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="void lambda$main$1(io.netty.channel.Channel)" map="b"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="void lambda$_3psAggregateOperation$6ed92c81$3(java.util.Map, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="com.hazelcast.jet.aggregate.AggregateOperation1 _3psAggregateOperation(int, boolean, boolean)" map="b"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="java.util.Map lambda$_3psAggregateOperation$6af52326$1(int, boolean, boolean, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator._3psRPMOperator" name="void lambda$_3psAggregateOperation$6ed92c81$1(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <class name="com.sigmastream.pr.operator.DataAnalyserOperator" map="i"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="inputChannelsConfig" map="b"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="isBackFillJobComplete" map="c"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="subscriptionType" map="d"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="hazelcastJobInfo" map="e"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="hazelcastJob" map="f"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="outputChannelsConfig" map="g"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="_log" map="h"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="JobStatusInfo" map="i"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="jobConfiguration" map="j"/>
  <field class="com.sigmastream.pr.operator.DataAnalyserOperator" name="inputChannels" map="k"/>
  <method class="com.sigmastream.pr.operator.DataAnalyserOperator" name="void parseConfig(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.DataAnalyserOperator" name="com.hazelcast.jet.Job getJob()" map="b"/>
  <method class="com.sigmastream.pr.operator.DataAnalyserOperator" name="java.util.Map getChannelUoMBasedFactor(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.operator.DataAnalyserOperator" name="java.lang.String createDir(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.operator.DataAnalyserOperator" name="java.lang.String createAbsoluteDir(java.lang.String, java.lang.String)" map="b"/>
  <class name="com.sigmastream.pr.operator.FFTOperator$ListIteratorP" map="_b"/>
  <method class="com.sigmastream.pr.operator.FFTOperator$ListIteratorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.operator.FFTOperator" map="j"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="instance" map="b"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="outputChannelsConfig" map="c"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="jobInfo" map="d"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="_log" map="e"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="inputChannelsConfig" map="f"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="jobConfiguration" map="g"/>
  <field class="com.sigmastream.pr.operator.FFTOperator" name="inputChannels" map="h"/>
  <method class="com.sigmastream.pr.operator.FFTOperator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.operator.FFTOperator" name="void parseConfig(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.FFTOperator" name="void start(int, int, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.operator.FFTOperator" name="void stop()" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.WellEventAggregationP" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="aggregateParams" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="outputValues" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="maxHookLoad" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="penddingProcessedPayloads" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="_log" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="brw" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="processPrevPayload" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="delayTripOutBitDepth" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="delayTripInBitDepth" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="processPreviousEvent" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="previousEvent" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="CorrectionPreviousEvent" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="correctionEventPayloads" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="minHookLoad" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="tempInSlipHookload" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="tempInSlipBlockHeight" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="delayedPayloads" map="r"/>
  <method class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="void correctUnknown(java.util.List, com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="void writeCSV(long, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.WellEventAggregationP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.DataAnalyserP" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="brw" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="outputValues" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="_log" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="operatorConfig" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="CONSTANT_KEY" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="jobConfiguration" map="g"/>
  <method class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="void writeCSV(long, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.DataAnalyserP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.StandStateInfo" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="_30ftTripInCount" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="prevConnectionInSlipBitDepth" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="accumulated_30ftString" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="casingThresholdTo" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="tripInStandCount" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="yhTime" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="accumulatedCasingString" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="_30ftTripInThresholdTo" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="casingStandCount" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="_90ftTripInThresholdFrom" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="accumulatedBitDepthAdjust" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="casingEvent" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="confimedPreviousLinerLength" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="tripInEvent" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="_30ftTripInThresholdFrom" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.StandStateInfo" name="casingThresholdFrom" map="q"/>
  <method class="com.sigmastream.pr.processor.oes.StandStateInfo" name="void reset()" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandStateInfo" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="prevToPrevEvent" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="con" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="prevPayloads" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="prevToPrevBitDepthState" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="prevBitDepthState" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="preUnknownEventCorre" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="lastUnknownEventEmittedTime" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="_log" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="payloadDao" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="initPreviosState" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="delayedPayloads" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="isDelayedPayloads" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="rigID" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="unknownEventBitDepthState" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="prevEvent" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="SQl_FOR_INSERT_STATE" map="q"/>
  <method class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="java.util.List correctUnknownEvent(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.UnknownEventCorrectionP" name="void InitPreviosState()" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.TripDataWriter" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="CONSTANT_KEY" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="previousMOE" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="con" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="trippingOutputValues" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="srcFile" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="rigID" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="trippingBrw" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.TripDataWriter" name="SQl_FOR_INSERT_TRIP" map="j"/>
  <method class="com.sigmastream.pr.processor.oes.TripDataWriter" name="void init(com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDataWriter" name="com.sigmastream.pr.common.TimestampedEntry write(com.sigmastream.pr.common.MajorOperationalEventState, com.sigmastream.pr.common.TrippingEvents)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDataWriter" name="void close()" map="close"/>
  <class name="com.sigmastream.pr.processor.oes.EventCleanerP" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.EventCleanerP" name="isStreamEventWithoutChange" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.EventCleanerP" name="isCapturedChangeEvent" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.EventCleanerP" name="_log" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.EventCleanerP" name="jobConfiguration" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.EventCleanerP" name="prevEvent" map="f"/>
  <method class="com.sigmastream.pr.processor.oes.EventCleanerP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.EventCleanerP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.EventCleanerP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.BasicEventP" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="CONSTANT_KEY" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="ftCommonBrw" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="emitPreservedValueLastTime" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="prevFTEvent" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="ftCommonSrcFile" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="con" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="velocityManager" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="_log" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="drillingEvent" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="brw" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="eventsCorrectionConfigs" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="frictionTestValues" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="assetId" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_Torque" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="wellOECorrect" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_FlowRate" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="srcFile1" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="complexEventValues" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="operatorName" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="velocityConfig" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SPS_Rotary_HKLD" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="rigID" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="velocityBrw" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="velocitySrcFile" map="y"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="lastEvent" map="z"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="inputDataStreamsConfig" map="ab"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="isEventStream" map="bb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="freq" map="cb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="prevEvent" map="db"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_RPM" map="eb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="frictionTestCommonValues" map="fb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="ftBrw" map="gb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="velocityValues" map="hb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="jobConfiguration" map="ib"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="frictionManager" map="jb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="eventManager" map="kb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="prevtimestamp" map="lb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_Rotary_HKLD" map="mb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="ftSrcFile" map="nb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="errorValues" map="ob"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_Rotary_Torque" map="pb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_HKLD" map="qb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="subEventManager" map="rb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SPS_HKLD" map="sb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="prevEmitFTEvent" map="tb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_StandPipePressure" map="ub"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="preservedFTValues" map="vb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="preservedValueInterval" map="wb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="wellOEUtils" map="xb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="SP_Rotary_StandPipePressure" map="yb"/>
  <field class="com.sigmastream.pr.processor.oes.BasicEventP" name="frictionTestConfig" map="zb"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void writeFTCommonCSV(java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="java.util.Map getVelocityValues(long, com.sigmastream.pr.common.OperationalEvents, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void calculateSetupPoints(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void writeFTCSV(java.lang.String, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void lambda$calculateSetupPoints$0(java.util.TreeMap, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void emitFrictionSetupPoints(long, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void processCorrectedEvent(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void writeVelocityCSV(java.lang.String, java.util.Map)" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="java.util.Map getFrictionTestValues(long, boolean, com.sigmastream.pr.common.OperationalEvents, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void insertDataInCassandra(java.util.Map, java.util.Map, long)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.BasicEventP" name="void writeCSV(long, java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.CSVDataWriterP" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="brw" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="outputValues" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="_log" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="outputChannels" map="e"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataWriterP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.DataSlopeP" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.DataSlopeP" name="_log" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.DataSlopeP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.DataSlopeP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.DataSlopeP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="prevBottom" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="brw" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="outputValues" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="_log" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="CONSTANT_KEY" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="dataStreams" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="prevOperationalEvent" map="h"/>
  <method class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="void emitEvents(long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.OnOffBottomDetectorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.Conditioning" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.Conditioning" name="CONDITIONONG_DEPTH_DELTA" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.Conditioning" name="reamDepth" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.Conditioning" name="N_BACKWARD_FORWARD_REAMING" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.Conditioning" name="backwardReamCount" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.Conditioning" name="lastReamingEvtTime" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.Conditioning" name="forwardReamCount" map="g"/>
  <method class="com.sigmastream.pr.processor.oes.Conditioning" name="void reset()" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.ComplexEventP" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="frictionTestCommonValues" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="eventsCorrectionConfigs" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="errorValues" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="emitPreservedValueLastTime" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="frictionTestConfig" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="velocityManager" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="preservedValueInterval" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="subEventManager" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="ftCommonBrw" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="eventManager" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="freq" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="frictionTestValues" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="prevFTEvent" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="complexEventValues" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="_log" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="brw" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="velocityConfig" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="inputDataStreamsConfig" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="drillingEvent" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="wellOECorrect" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="velocityBrw" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="velocityValues" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="CONSTANT_KEY" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="preservedFTValues" map="y"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="prevEmitFTEvent" map="z"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="wellOEUtils" map="ab"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="operatorName" map="bb"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="jobConfiguration" map="cb"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="isEventStream" map="db"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="frictionManager" map="eb"/>
  <field class="com.sigmastream.pr.processor.oes.ComplexEventP" name="ftBrw" map="fb"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="void writeFTCommonCSV(java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="java.util.Map getVelocityValues(long, com.sigmastream.pr.common.OperationalEvents, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="void writeFTCSV(java.lang.String, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="void writeVelocityCSV(java.lang.String, java.util.Map)" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="java.util.Map getFrictionTestValues(long, boolean, com.sigmastream.pr.common.OperationalEvents, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="java.util.concurrent.ConcurrentHashMap detectSubEvents(java.util.concurrent.ConcurrentHashMap)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ComplexEventP" name="void writeCSV(long, java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.FilterStreamsP" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="inputDataStreams" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="_log" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="inputDataStreamsConfig" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="boolean isValueNotNull(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="java.util.Map getOutputDataStreams(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.FilterStreamsP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="prevBitdepth" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="prevPayloads" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="maxBitdepth" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="minBitdepth" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="_log" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="delayedPayloads" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="delayedInslipPayloads" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="hkldThrslMultiplier" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="delayedStartTime" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="prevEvent" map="k"/>
  <method class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="java.util.List correctAbnormalConnections(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.AbnormalConnectionDetectionP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.RunningAvgP" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.RunningAvgP" name="_log" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.RunningAvgP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.RunningAvgP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.RunningAvgP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="OpenHoleBrw" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="_log" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="CONSTANT_KEY" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="srcFile" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="OpenHoleOutputValues" map="f"/>
  <method class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="void init(com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.OpenHoleDataWriter" name="com.sigmastream.pr.common.TimestampedEntry write(double, double, long, com.sigmastream.pr.common.MarkerEvents, double, double)" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.TripDetectorP$1" map="1"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP$1" name="$SwitchMap$com$sigmastream$pr$processor$oes$MOEtype" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP$1" name="$SwitchMap$com$sigmastream$pr$common$TrippingEvents" map="c"/>
  <class name="com.sigmastream.pr.processor.oes.TripDetectorP" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="conditioningMOE" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="targetTimeEntry" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="bitDepthCutOffLevel" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="con" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="probableEventStack" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="previousMOE" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="casedbitDepth" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="ACCEPTABLE_ACCURACY" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="assetId" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="previousBitDepth" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="STATIONARY_CONFIRM_TIME" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="N_STAND" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="DRILLING_CONFIRM_TIME" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="previousEvent" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="operatorName" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="TRIP_OUT_DEPTH_DELTA" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="CASING_CONFIRM_COUNT" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="payloadDao" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="openHoleStartOE" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="possibleEventMap" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="rigID" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="ACCEPTABLE_TUBING_ACCURACY" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="SQl_FOR_INSERT_STATE" map="y"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="_45_PIPE" map="z"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="isTripInFinish" map="ab"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="inOpenHole" map="bb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="previousopenHoleTime" map="cb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="lastBitDepthAdjustment" map="db"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="CEMENTING_CONFIRM_TIME" map="eb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="previousEventTime" map="fb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="jobConfiguration" map="gb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="delayConfirmEventStack" map="hb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="casedHoleDepth" map="ib"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="previousHoleDepth" map="jb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="TRIP_IN_DEPTH_DELTA" map="kb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="_120_PIPE" map="lb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="lastHoleDepthAdjustment" map="mb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="initPreviosState" map="nb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="openHoleDataWriter" map="ob"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="currentMOE" map="pb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="LINER_CONFIRM_COUNT" map="qb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="holeDepthRaw" map="rb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="_30_PIPE" map="sb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="DRILLING_DEPTH_DELTA" map="tb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="confirmEventStack" map="ub"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="STATIONARY_DEPTH_DELTA" map="vb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="_90_PIPE" map="wb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="DRILLING_CONFIRM_DEPTH" map="xb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="bitDepthRaw" map="yb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="stand" map="zb"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="tripInStartDepth" map="ac"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="SQL_FOR_REMOVE_PERSIST_DATA" map="bc"/>
  <field class="com.sigmastream.pr.processor.oes.TripDetectorP" name="tripDataWriter" map="cc"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$getPreStateData$6(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$isTripEvent$9(com.sigmastream.pr.common.MajorOperationalEventState)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isStationaryEvent(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$getPreStateData$3(java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="double getBitDepthDelta()" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isDrillingEvent(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void standStateCalculate(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean lambda$getPreStateData$4(java.util.Map)" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void standInfoReset(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="e"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void removePersistData(java.lang.String, long)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$isTripEvent$8(com.sigmastream.pr.common.MajorOperationalEventState)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isConditioningEvent(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="f"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void removePreviousPersistData(java.lang.String, long)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isTripEvent(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="g"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isAtSurfaceEvent(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="h"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean lambda$getPreStateData$2(java.util.Map)" map="e"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$isDepthAdjustment$10(double, double, com.sigmastream.pr.common.MajorOperationalEventState)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$isTripEvent$7(com.sigmastream.pr.common.MajorOperationalEventState)" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void persistPreviousState(java.lang.String, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean lambda$getPreStateData$0(java.util.Map)" map="f"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void handleCementingAccurancy(com.sigmastream.pr.common.MajorOperationalEventState, long)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isEventBelongsToMOE(com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.processor.oes.MOEtype)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void validateEventProbablity(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="i"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isDepthAdjustment(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="j"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isBitDepthAdjust()" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void getPreStateData()" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isUnKnownOrUnDefine(com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isBitDepthAdjust(double)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$getPreStateData$1(java.util.Map)" map="g"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void lambda$getPreStateData$5(java.util.Map)" map="h"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="void parseConfig(java.util.Map)" map="i"/>
  <method class="com.sigmastream.pr.processor.oes.TripDetectorP" name="boolean isCementingEvent(com.sigmastream.pr.common.OperationalEvents, long, double, double, int, int)" map="k"/>
  <class name="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker$1" map="1"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker$1" name="this$1" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker$1" name="boolean accept(java.io.File, java.lang.String)" map="accept"/>
  <class name="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" map="_b"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="channels" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="messageQueueIn" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="csvFilesInDirectory" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="_CSV_EXTENSION" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="fileIndex" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="runcount" map="h"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="void run()" map="run"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP$CSVDataReaderWorker" name="com.aol.simple.react.async.Queue startStreming()" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.CSVDataReaderP" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="loopingEnable" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="pollInterval" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="datePattern" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="uomDictionary" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="freq" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="tsChannelName" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="inputChannelsConfig" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="_log" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="sdf" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="uoms" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="pendingItem" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="filePath" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="startTime" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="useActualTime" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="isSleepUse" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="speedUpFactor" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="dataReaderWorker" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="channelValMulFactorMap" map="s"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="java.lang.String access$100(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="java.util.Map access$800(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="long access$500(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="boolean access$1200(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="e"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="boolean access$1000(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="f"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="long access$1100(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="g"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="java.lang.String access$200(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="h"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="boolean access$600(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="i"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="double access$900(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="j"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="java.lang.String access$000(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="k"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="com.sigmastream.logger.log4j.Logger access$400()" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="java.text.SimpleDateFormat access$300(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="l"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="long access$502(com.sigmastream.pr.processor.oes.CSVDataReaderP, long)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.CSVDataReaderP" name="long access$700(com.sigmastream.pr.processor.oes.CSVDataReaderP)" map="m"/>
  <class name="com.sigmastream.pr.processor.oes.MOEtype" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="StationaryEvt" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="code" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="ConditioningEvt" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="$VALUES" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="TrippingInEvt" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="TrippingEvt" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="UNKNOWN" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="evt" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="TrippingOutEvt" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.MOEtype" name="DrillingEVT" map="k"/>
  <method class="com.sigmastream.pr.processor.oes.MOEtype" name="com.sigmastream.pr.processor.oes.MOEtype[] values()" map="values"/>
  <method class="com.sigmastream.pr.processor.oes.MOEtype" name="java.lang.String getEvt()" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.MOEtype" name="com.sigmastream.pr.processor.oes.MOEtype valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.processor.oes.MOEtype" name="int getCode()" map="c"/>
  <class name="com.sigmastream.pr.processor.oes.ConnectionDetectorP" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="previousConnection" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="connEndTime" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="CONSTANT_KEY" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="connEndHkldWeight" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="bitDepthInSlips" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="outSlip" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tripOutStationaryCount" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="connDetectorState" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="isStationaryTimeUpdate" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="holeDepthConnStart" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="connStartHkldWeight" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="subEventOutputValues" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="trippingSpeedOutputValues" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tempDrillingStart" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="con" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="connectionSubEventValues" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="trippingLenghtBrw" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="_log" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="brw" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="inSlip" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="drillingEnd" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="prevConnDetectorP" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="isCasingContinue" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="srcFile4" map="y"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="srcFile3" map="z"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="nextTripBitdepth" map="ab"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="previousEvent" map="bb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="srcFile1" map="cb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="drillingBitdepth" map="db"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="operatorName" map="eb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="prevConnectionInSlipHoleDepth" map="fb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="trippingSpeedBrw" map="gb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="trippingInOutLenght" map="hb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="SQL_FOR_INSERT_EVENT" map="ib"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="rigID" map="jb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="bitDepthOutSlips" map="kb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="SQl_FOR_INSERT_STATE" map="lb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tempConnectionSubEventValues" map="mb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="drillingEndBitdepth" map="nb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="subEventBrw" map="ob"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="connStartTime" map="pb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tripInOutStartEndInfo" map="qb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tripInStationaryCount" map="rb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="outputValues" map="sb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="prevConnectionInSlipBitDepth" map="tb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="holeDepthInSlips" map="ub"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="bitDepthConnStart" map="vb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="jobConfiguration" map="wb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="stationaryBitdepth" map="xb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="isTripStationary" map="yb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="srcFile11" map="zb"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="drillingStart" map="ac"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="previousPayload" map="bc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="stationaryEndBitdepth" map="cc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="stationaryStart" map="dc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="nextTripTime" map="ec"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="initPreviosState" map="fc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="holeDepthOutSlips" map="gc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="stationaryEnd" map="hc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="slipsToSlips" map="ic"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tempConnStartTime" map="jc"/>
  <field class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="tempDrillingBitdepth" map="kc"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void emitTrippingSpeedEvents(java.lang.String, long, double)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void emitConnectionEvents(com.sigmastream.pr.common.ConnectionEvents, long, java.lang.String, java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="boolean isValidate()" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void InitPreviosState()" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void emitTrippingCurrentStage()" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void writeSubEvent(java.lang.String, java.lang.String, com.sigmastream.pr.common.ConnectionEvents, long, long)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.ConnectionDetectorP" name="void emitConnectionSubEvents(long, com.sigmastream.pr.beans.ConnectionSubEventValues, java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.TLACalculationP" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="maxHooklaod" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="prevFTEvents" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="torqueCount" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="TorqueValues" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="frictionTestValues" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="ftSrcFile" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="prevACTHookload" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="prevACTbitdepth" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="standCount" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="_log" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="isTripInStand" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="hookloadRotatingValues" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="isHookloadProcessed" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="torqueValues" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="isInsideCase" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="CONSTANT_KEY" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="isMudWeight" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="bcRawDatas" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="mudWeight" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="lastHookload" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="hookloadRotatingCount" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="jobConfiguration" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="RPMValues" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="dataCount" map="y"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="prevEvents" map="z"/>
  <field class="com.sigmastream.pr.processor.oes.TLACalculationP" name="ftBrw" map="ab"/>
  <method class="com.sigmastream.pr.processor.oes.TLACalculationP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.TLACalculationP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.TLACalculationP" name="double calculateSD(double, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.TLACalculationP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.TLACalculationP" name="void emitTorqueAndDrag(long, double, double, double, long, long, int, double, java.lang.String, boolean, java.lang.String)" map="b"/>
  <class name="com.sigmastream.pr.processor.oes.StreamSimulatorP" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="_log" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="operatorName" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="jobConfiguration" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.StreamSimulatorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.oes.StandCalculationP" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="actualStandLength" map="b"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="TorqueValues" map="c"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tempRestBitDepth" map="d"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="initPreviosState" map="e"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="simulationCount" map="f"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="onbottomDrillingTime" map="g"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="payloadDao" map="h"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="previousDrillingTime" map="i"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="freq" map="j"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="SQL_FOR_INSERT_EVENT" map="k"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="hookloadRotatingCount" map="l"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="simulationTimeInterval" map="m"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="ftCommonBrw" map="n"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="drillingEventStartTime" map="o"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="previousHoleDepth" map="p"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="detectedBrw" map="q"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="preStandMetaData" map="r"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="lastHookload" map="s"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tDSmallOEAvoid" map="t"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tDHookload" map="u"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="con" map="v"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tempConnectionTime" map="w"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="srcFile2" map="x"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="srcFile1" map="y"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="standEventSimulationEnable" map="z"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="offbottomTime" map="ab"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="RPMValues" map="bb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="isTDValuePresent" map="cb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="previousBitDepth" map="db"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="vadarInitiateDepth" map="eb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="standMataData" map="fb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="jobConfiguration" map="gb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="mudWeight" map="hb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="nonDrillingEventStartTime" map="ib"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="prevFTEvents" map="jb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tripInTagBottomDelta" map="kb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="standEventEnable" map="lb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tDPointDelta" map="mb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="lastStationaryHookload" map="nb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="bcRawDatas" map="ob"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="_log" map="pb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="prevEvent" map="qb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="prevStandCalculationP" map="rb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="SQl_FOR_INSERT_STATE" map="sb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="standCount" map="tb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="lastTorqueValue" map="ub"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="previousDrillingHoleDepth" map="vb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="lastRotatingHookload" map="wb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="ftBrw" map="xb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="minStandLength" map="yb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="torqueCount" map="zb"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="frictionTestCommonValues" map="ac"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="maxStandLength" map="bc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="isMudWeight" map="cc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="ftSrcFile" map="dc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="torqueValues" map="ec"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="initialTime" map="fc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="drillingEvent" map="gc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="CONSTANT_KEY" map="hc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="isInsideCase" map="ic"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="prevStandCount" map="jc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="dataCount" map="kc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="standType" map="lc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="previousDrillingBitDepth" map="mc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="maxHooklaod" map="nc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="writeStandMetaData" map="oc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="brw" map="pc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="threshold" map="qc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="standInProgressThreshold" map="rc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="frictionTestValues" map="sc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="rigID" map="tc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="staleDetectedTime" map="uc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="operatorName" map="vc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="simulationDepth" map="wc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="tripInCount" map="xc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="staleHoleDepth" map="yc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="drillingStartTime" map="zc"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="isTripInStand" map="ad"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="inToHole" map="bd"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="lastStandCount" map="cd"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="hookloadRotatingValues" map="dd"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="previousTime" map="ed"/>
  <field class="com.sigmastream.pr.processor.oes.StandCalculationP" name="prevStandSimulationTime" map="fd"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void standBuilder()" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void writeFTCommonCSV(java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void emitStand(long, double, double, double, int, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void standDetectedBuilder()" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void clearTDData()" map="d"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void emitTorqueAndDrag(long, java.lang.String, java.lang.String, double, long, long, int, double, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void writeFTCSV(java.lang.String, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void writeStandMetaData(long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void detectIntoHole(com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="double calculateSD(double, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void InitPreviosState()" map="e"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void detectAboutToTagBottom(java.util.Map, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.processor.oes.StandCalculationP" name="void parseConfig(java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.processor.InSlipsP" map="b"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="hookloadStaCName" map="e"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="datapushEnable" map="f"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="bitDepthIncCName" map="g"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="outputDataStreamName" map="h"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="_log" map="i"/>
  <field class="com.sigmastream.pr.processor.InSlipsP" name="rotaryRPMCName" map="j"/>
  <method class="com.sigmastream.pr.processor.InSlipsP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.InSlipsP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.InSlipsP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.TripInP" map="c"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="bitDepthIncCName" map="f"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.TripInP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.TripInP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.TripInP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.TripInP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.JetMapReaderP$MapEntryListener" map="_b"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP$MapEntryListener" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP$MapEntryListener" name="void entryAdded(com.hazelcast.core.EntryEvent)" map="entryAdded"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP$MapEntryListener" name="void entryUpdated(com.hazelcast.core.EntryEvent)" map="entryUpdated"/>
  <class name="com.sigmastream.pr.processor.JetMapReaderP" map="d"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="remoteCachePort" map="b"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="payloadQueueIn" map="c"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="payloadIdentifier" map="d"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="_log" map="e"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="groupPassword" map="f"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="groupname" map="g"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="isRemoteCacheEnable" map="h"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="sourcename" map="i"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="pendingItem" map="j"/>
  <field class="com.sigmastream.pr.processor.JetMapReaderP" name="remoteCacheHost" map="k"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="java.lang.String access$000(com.sigmastream.pr.processor.JetMapReaderP)" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="com.aol.simple.react.async.Queue access$100(com.sigmastream.pr.processor.JetMapReaderP)" map="c"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="com.hazelcast.map.IMap createExternalHazelcastMap()" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.JetMapReaderP" name="com.sigmastream.logger.log4j.Logger access$200()" map="c"/>
  <class name="com.sigmastream.pr.processor.RotatingP" map="e"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="bitDepthStationaryCName" map="d"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.RotatingP" name="pumpOnCName" map="i"/>
  <method class="com.sigmastream.pr.processor.RotatingP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.RotatingP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.RotatingP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.RotatingOutP" map="f"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="bitDepthDecCName" map="e"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="datapushEnable" map="f"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.RotatingOutP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.RotatingOutP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.RotatingOutP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.RotatingOutP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" map="_b"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="toDataPayloadF" map="c"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadWriter" name="boolean complete()" map="complete"/>
  <class name="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" map="_c"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="toDataPayloadF" map="c"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP$JetMapPayloadsWriter" name="boolean complete()" map="complete"/>
  <class name="com.sigmastream.pr.processor.JetMapWriterP" map="g"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="remoteCachePort" map="b"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="_log" map="c"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="groupPassword" map="d"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="jetMap" map="e"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="groupname" map="f"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="isRemoteCacheEnable" map="g"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="sinkname" map="h"/>
  <field class="com.sigmastream.pr.processor.JetMapWriterP" name="remoteCacheHost" map="i"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="java.lang.String access$300(com.sigmastream.pr.processor.JetMapWriterP)" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="com.hazelcast.map.IMap access$100(com.sigmastream.pr.processor.JetMapWriterP)" map="c"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="void initialize(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="com.hazelcast.map.IMap access$102(com.sigmastream.pr.processor.JetMapWriterP, com.hazelcast.map.IMap)" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="com.hazelcast.map.IMap createExternalHazelcastMap()" map="b"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="com.hazelcast.map.IMap access$200(com.sigmastream.pr.processor.JetMapWriterP)" map="d"/>
  <method class="com.sigmastream.pr.processor.JetMapWriterP" name="boolean access$000(com.sigmastream.pr.processor.JetMapWriterP)" map="e"/>
  <class name="com.sigmastream.pr.processor.CirculateP" map="h"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="bitDepthStationaryCName" map="d"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.CirculateP" name="pumpOnCName" map="i"/>
  <method class="com.sigmastream.pr.processor.CirculateP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.CirculateP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.CirculateP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.AggregateP" map="i"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="CONSTANT_KEY" map="b"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="freq" map="c"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="wellSpudDateTime" map="d"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="dataStreamsConfig" map="e"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="pump1On" map="f"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="depthDecrease" map="g"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="depthIncrease" map="h"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="pump2On" map="i"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="outputDataStreams" map="j"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="dataInputstreams" map="k"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="_log" map="l"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="threasholdResults" map="m"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="lastKnownPayloads" map="n"/>
  <field class="com.sigmastream.pr.processor.AggregateP" name="dataStreams" map="o"/>
  <method class="com.sigmastream.pr.processor.AggregateP" name="boolean isValueNotNull(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.processor.AggregateP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.AggregateP" name="void updateThreasholdResults(long, long, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.processor.AggregateP" name="boolean lambda$tryProcess$0(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.processor.AggregateP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.AggregateP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.PayloadListParserP" map="j"/>
  <field class="com.sigmastream.pr.processor.PayloadListParserP" name="_log" map="b"/>
  <method class="com.sigmastream.pr.processor.PayloadListParserP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.PayloadListParserP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.SignalStreamPayloadListP" map="k"/>
  <field class="com.sigmastream.pr.processor.SignalStreamPayloadListP" name="_log" map="b"/>
  <method class="com.sigmastream.pr.processor.SignalStreamPayloadListP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.SignalStreamPayloadListP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.DataStreamOperationP" map="l"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="freq" map="b"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="lastKnownValues" map="c"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="remoteCachePort" map="d"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="dataStreamsConfig" map="e"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="origDataStreamsTemp" map="f"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="datapushEnable" map="g"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="origDataStreamConfigsTemp" map="h"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="payloadIdentifier" map="i"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="_log" map="j"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="groupPassword" map="k"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="groupname" map="l"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="lastKnownValueMapTemp" map="m"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="isRemoteCacheEnable" map="n"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="remoteCacheHost" map="o"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="dataStreams" map="p"/>
  <field class="com.sigmastream.pr.processor.DataStreamOperationP" name="channelFilter" map="q"/>
  <method class="com.sigmastream.pr.processor.DataStreamOperationP" name="boolean lambda$tryProcess$0(java.lang.String, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.processor.DataStreamOperationP" name="java.util.List getOutputDataStreams(java.util.Map, double, boolean)" map="b"/>
  <method class="com.sigmastream.pr.processor.DataStreamOperationP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.DataStreamOperationP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.DataStreamOperationP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.RotatingInP" map="m"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="bitDepthIncCName" map="f"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.RotatingInP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.RotatingInP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.RotatingInP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.RotatingInP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.PumpOutP" map="n"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="bitDepthDecCName" map="e"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="datapushEnable" map="f"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.PumpOutP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.PumpOutP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.PumpOutP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.PumpOutP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.MovingAverage" map="o"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="inputStreamConfig" map="b"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="inputDataStreams" map="c"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="_log" map="d"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="CONSTANT_KEY" map="e"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="augmentDataExecutorService" map="f"/>
  <field class="com.sigmastream.pr.processor.MovingAverage" name="jobConfiguration" map="g"/>
  <method class="com.sigmastream.pr.processor.MovingAverage" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.MovingAverage" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.MovingAverage" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.YhJetMapReaderP$MapEntryListener" map="_b"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP$MapEntryListener" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP$MapEntryListener" name="void entryAdded(com.hazelcast.core.EntryEvent)" map="entryAdded"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP$MapEntryListener" name="void entryUpdated(com.hazelcast.core.EntryEvent)" map="entryUpdated"/>
  <class name="com.sigmastream.pr.processor.YhJetMapReaderP" map="p"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="remoteCachePort" map="b"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="payloadQueueIn" map="c"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="payloads" map="d"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="_log" map="e"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="groupPassword" map="f"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="groupname" map="g"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="isRemoteCacheEnable" map="h"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="sourcename" map="i"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="pendingItem" map="j"/>
  <field class="com.sigmastream.pr.processor.YhJetMapReaderP" name="remoteCacheHost" map="k"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="com.aol.simple.react.async.Queue access$000(com.sigmastream.pr.processor.YhJetMapReaderP)" map="b"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="com.hazelcast.map.IMap createExternalHazelcastMap()" map="b"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.YhJetMapReaderP" name="com.sigmastream.logger.log4j.Logger access$100()" map="c"/>
  <class name="com.sigmastream.pr.processor.StreamFilterPayloadP" map="q"/>
  <field class="com.sigmastream.pr.processor.StreamFilterPayloadP" name="channels" map="b"/>
  <method class="com.sigmastream.pr.processor.StreamFilterPayloadP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.StreamFilterPayloadP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.DrillingRotaryP" map="r"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="datapushEnable" map="d"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="bitDepthIncCName" map="e"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="pumpOnCName" map="i"/>
  <field class="com.sigmastream.pr.processor.DrillingRotaryP" name="HoleDepthIncCName" map="j"/>
  <method class="com.sigmastream.pr.processor.DrillingRotaryP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.DrillingRotaryP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.DrillingRotaryP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.StationaryP" map="s"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="bitDepthStationaryCName" map="d"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.StationaryP" name="pumpOnCName" map="i"/>
  <method class="com.sigmastream.pr.processor.StationaryP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.StationaryP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.StationaryP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor._3psStreamSocketP" map="t"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="lastTriedTs" map="b"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="byteBuffer" map="c"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="port" map="d"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="socketChannel" map="e"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="socketDone" map="f"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="reconnectInterval" map="g"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="BUFFER_SIZE" map="h"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="_log" map="i"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="autoReconnect" map="j"/>
  <field class="com.sigmastream.pr.processor._3psStreamSocketP" name="host" map="k"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="boolean tryComplete()" map="b"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="void readData()" map="c"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="java.lang.String hostAndPort()" map="d"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="void connectServer()" map="e"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="boolean xcomplete()" map="f"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor._3psStreamSocketP" name="boolean complete()" map="complete"/>
  <class name="com.sigmastream.pr.processor.PumpInP" map="u"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="bitDepthIncCName" map="f"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.PumpInP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.PumpInP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.PumpInP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.PumpInP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.YhWSocketSinkP" map="v"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="lastPayloadAnalysed" map="b"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_LAS" map="c"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="timeout_" map="d"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="webSocketSinkLimit" map="e"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="toDataPayloadF" map="f"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="dataFlowMode" map="g"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="secureConnection" map="i"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="dataType" map="j"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="wSocketClient" map="k"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="outputDataStreams" map="l"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="assetId" map="m"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="keepDataHistory" map="n"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="yhChannelConfig" map="o"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="devicePayloadData" map="p"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="messageQueueOut" map="q"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="isBackfill" map="r"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_DATA_PROCESSED_TYPE" map="s"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="isIndexChannel" map="t"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="pushCount" map="u"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="clientId" map="v"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_DATA_RAW_TYPE" map="w"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="deviceKey" map="x"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="outputDevicesConfig" map="y"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="maxMessageSize" map="z"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_PAYLOAD_TYPE_JSON" map="ab"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="gson" map="bb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_DEFAULT_FREQ" map="cb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="certPassword" map="db"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="jobConfiguration" map="eb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="initDeviceContext" map="fb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_PAYLOAD_TYPE_CSV" map="gb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="indexChName" map="hb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="isInitialized" map="ib"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="deviceContext" map="jb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="wsNullCount" map="kb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="serverURL" map="lb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="channelConfig" map="mb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="port_" map="nb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="address_" map="ob"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="apikey" map="pb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="payloadType" map="qb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="_DATA_SIMULATED_TYPE" map="rb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="deviceName" map="sb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="channels" map="tb"/>
  <field class="com.sigmastream.pr.processor.YhWSocketSinkP" name="context" map="ub"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void process(java.util.Map, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void outputConfig()" map="b"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="int generateChannelId(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void initialDeviceContext()" map="c"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void addTagNum()" map="d"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="java.util.Map getChannelContext(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="void addOutChannelDetails()" map="e"/>
  <method class="com.sigmastream.pr.processor.YhWSocketSinkP" name="int getChannelId(java.lang.String)" map="c"/>
  <class name="com.sigmastream.pr.processor.TripOutP" map="w"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="bitDepthDecCName" map="e"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="datapushEnable" map="f"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.TripOutP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.TripOutP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.TripOutP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.TripOutP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.SlideDrillingP" map="x"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="datapushEnable" map="d"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="bitDepthIncCName" map="e"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="pumpOnCName" map="i"/>
  <field class="com.sigmastream.pr.processor.SlideDrillingP" name="HoleDepthIncCName" map="j"/>
  <method class="com.sigmastream.pr.processor.SlideDrillingP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.SlideDrillingP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.SlideDrillingP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.OEDetectorP$MapEntryListener" map="_b"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP$MapEntryListener" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP$MapEntryListener" name="void entryAdded(com.hazelcast.core.EntryEvent)" map="entryAdded"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP$MapEntryListener" name="void entryUpdated(com.hazelcast.core.EntryEvent)" map="entryUpdated"/>
  <class name="com.sigmastream.pr.processor.OEDetectorP" map="y"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="event" map="b"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="CONSTANT_KEY" map="d"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="extraPayload" map="e"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="extraDataStreams" map="f"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="remoteCachePort" map="g"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="datapushEnable" map="h"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="outputDataStreamName" map="i"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="_log" map="j"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="groupPassword" map="k"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="groupname" map="l"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="isRemoteCacheEnable" map="m"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="sourcename" map="n"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="fixedLag" map="o"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="remoteCacheHost" map="p"/>
  <field class="com.sigmastream.pr.processor.OEDetectorP" name="dataStreams" map="q"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="java.util.List access$000(com.sigmastream.pr.processor.OEDetectorP)" map="b"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="java.util.Map access$100(com.sigmastream.pr.processor.OEDetectorP)" map="c"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="com.hazelcast.map.IMap createExternalHazelcastMap()" map="b"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.OEDetectorP" name="com.sigmastream.logger.log4j.Logger access$200()" map="c"/>
  <class name="com.sigmastream.pr.processor.StreamMapPayloadP" map="z"/>
  <field class="com.sigmastream.pr.processor.StreamMapPayloadP" name="_log" map="b"/>
  <method class="com.sigmastream.pr.processor.StreamMapPayloadP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.StreamMapPayloadP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.FrictionTestDetectorP" map="ab"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="slackOffEnd" map="b"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="expectingFrictionTest" map="c"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="pickUpEnd" map="d"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="frictionTestStart" map="e"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="minPickUp" map="f"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="rotationEnd" map="g"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="rotationWeight" map="h"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="frictionTestBrw" map="i"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="minSlackOff" map="j"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="frictionTestActive" map="k"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="_log" map="l"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="pickUpWeight" map="m"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="measuredDepth" map="n"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="rotationTorque" map="o"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="slackOffTorque" map="p"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="rotationStart" map="q"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="slackOffWeight" map="r"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="pickUpStart" map="s"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="dataStreams" map="t"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="tempPickUpStart" map="u"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="tempSlackOffStart" map="v"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="pickUpTorque" map="w"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="frictionOutputValues" map="x"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="slackOffStart" map="y"/>
  <field class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="frictionTestEnd" map="z"/>
  <method class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="void emitFrictionTestEvents(double, long, long, long, long, long, double, double, double, double, double, double)" map="b"/>
  <method class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="void performFrictionTest(java.util.Map, long)" map="b"/>
  <method class="com.sigmastream.pr.processor.FrictionTestDetectorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.ReamingP" map="bb"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="bitDepthIncCName" map="f"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="outputDataStreamName" map="g"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="rotaryRPMCName" map="i"/>
  <field class="com.sigmastream.pr.processor.ReamingP" name="pumpOnCName" map="j"/>
  <method class="com.sigmastream.pr.processor.ReamingP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.ReamingP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.ReamingP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.DeviceQualityP" map="cb"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="mDeviceAspectSummaryValues" map="b"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="mDeviceStatisticsSummaryValues" map="c"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="DEVICE_ASPECTS" map="d"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="mDeviceStatisticsSummary" map="e"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="DEVICE_STATISTICS_SMMARY" map="f"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="mDeviceSummaryValues" map="g"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="_log" map="h"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="jobConfiguration" map="i"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="aspectPostFixMap" map="j"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="mDeviceAspectSummary" map="k"/>
  <field class="com.sigmastream.pr.processor.DeviceQualityP" name="mDeviceAswiSummary" map="l"/>
  <method class="com.sigmastream.pr.processor.DeviceQualityP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.DeviceQualityP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.BackReamingP" map="db"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="bitLessThanHoleDepthCName" map="c"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="emitDecisions" map="d"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="pumpOnCName" map="i"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="ctx" map="j"/>
  <field class="com.sigmastream.pr.processor.BackReamingP" name="bitDepthDecName" map="k"/>
  <method class="com.sigmastream.pr.processor.BackReamingP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.BackReamingP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.BackReamingP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.BackReamingP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.FilterChannelP" map="eb"/>
  <field class="com.sigmastream.pr.processor.FilterChannelP" name="channels" map="b"/>
  <method class="com.sigmastream.pr.processor.FilterChannelP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.FilterChannelP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.WellQualityP" map="fb"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="mWellStatisticsSummaryValues" map="b"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="mWellAspectSummaryValues" map="c"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="WELL_STATISTICS_SMMARY" map="d"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="mWellAspectSummary" map="e"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="WELL_ASPECSTS" map="f"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="jobConfiguration" map="h"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="aspectPostFixMap" map="i"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="mWellStatisticsSummary" map="j"/>
  <field class="com.sigmastream.pr.processor.WellQualityP" name="mWellAswiSummary" map="k"/>
  <method class="com.sigmastream.pr.processor.WellQualityP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.WellQualityP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.RotateAndCirculateP" map="gb"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="$assertionsDisabled" map="b"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="emitDecisions" map="c"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="bitDepthStationaryCName" map="d"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="datapushEnable" map="e"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="outputDataStreamName" map="f"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="_log" map="g"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="rotaryRPMCName" map="h"/>
  <field class="com.sigmastream.pr.processor.RotateAndCirculateP" name="pumpOnCName" map="i"/>
  <method class="com.sigmastream.pr.processor.RotateAndCirculateP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.RotateAndCirculateP" name="boolean complete()" map="complete"/>
  <method class="com.sigmastream.pr.processor.RotateAndCirculateP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <class name="com.sigmastream.pr.processor.MQTTPublisherP" map="hb"/>
  <field class="com.sigmastream.pr.processor.MQTTPublisherP" name="mqttPublisher" map="b"/>
  <field class="com.sigmastream.pr.processor.MQTTPublisherP" name="context" map="c"/>
  <field class="com.sigmastream.pr.processor.MQTTPublisherP" name="toDataPayloadF" map="d"/>
  <method class="com.sigmastream.pr.processor.MQTTPublisherP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.processor.MQTTPublisherP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.processor.MQTTPublisherP" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.processor.MQTTPublisherP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.processor.MQTTPublisherP" name="boolean complete()" map="complete"/>
  <package name="com.sigmastream.pr.yh.source" map="b"/>
  <class name="com.sigmastream.pr.yh.source.WSocketClientSource" map="b"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="isBackprocess" map="b"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="isBackfillSubscribe" map="c"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="host" map="d"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="deepSleepTime" map="e"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="rigId" map="f"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="_PAYLOAD_TYPE_CSVSPARSE" map="g"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="PAYLOAD_TYPE" map="h"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="isSessionEnable" map="i"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="upsertData" map="j"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="IOT_RES_ENCODING" map="k"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="subscriptionType" map="l"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="STREAMEVENTS" map="m"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="_log" map="n"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="isDiscovery" map="o"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="ASSET_ID" map="p"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="TYPE_PROFILE" map="q"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="initialized" map="r"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="secureConnection" map="s"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="inputMnemonics" map="t"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="assetId" map="u"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="CLIENT_KEY" map="v"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="yhChannelConfig" map="w"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="desiredFreq" map="x"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="KEEP_ALIVE_INTERVAL" map="y"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="PRESERVE_TIMESTAMP" map="z"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="queueSize" map="ab"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="endTime" map="bb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="clientId" map="cb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="speedupFactor" map="db"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="reconnectInterval" map="eb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="TYPE_LIVE_AS_SINK" map="fb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="CHUNCK_ENABLE" map="gb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="loopingEnable" map="hb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="TYPE_LIVE" map="ib"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="_TYPE_LIVE_TEXT" map="jb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="maxMessageSize" map="kb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="logIdList" map="lb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="_PAYLOAD_TYPE_JSON" map="mb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="isBackprocessingJobEnable" map="nb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="inputDataStreams" map="ob"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="_TYPE_REPLAYER_TEXT" map="pb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="waterWheelSubcription" map="qb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="session" map="rb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="subscriptionId" map="sb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="IOT_SESSION" map="tb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="TYPE_REPLAYER" map="ub"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="paramMap_" map="vb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="certPassword" map="wb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="jobConfiguration" map="xb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="messageQueueIn" map="yb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="port" map="zb"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="inputChannelLogId" map="ac"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="IOT_REQ_ENCODING" map="bc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="backfillRetryCount" map="cc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="reconnectStarted" map="dc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="sessionId" map="ec"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="terminated" map="fc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="isFullPayload" map="gc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="IOT_STATUS" map="hc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="serverURL" map="ic"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="client" map="jc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="timeout" map="kc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="CLIENT_ID" map="lc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="apikey" map="mc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="payloadType" map="nc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="autoReconnect" map="oc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="KEEP_ALIVE_ENABLE" map="pc"/>
  <field class="com.sigmastream.pr.yh.source.WSocketClientSource" name="timeslots" map="qc"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean setup(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)" map="onWebSocketConnect"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean connect()" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="java.lang.String getHost()" map="c"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean reconnect()" map="d"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean isSecureConnection()" map="e"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean pushMessage(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="int getPort()" map="f"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="int getTimeout()" map="g"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void onWebSocketError(java.lang.Throwable)" map="onWebSocketError"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()" map="h"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void onWebSocketClose(int, java.lang.String)" map="onWebSocketClose"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void setHost(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void setSecureConnection(boolean)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void setPort(int)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void setTimeout(int)" map="c"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean pushAsync(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void onWebSocketText(java.lang.String)" map="onWebSocketText"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean isConnected()" map="i"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void setDiscovery(boolean)" map="c"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void onWebSocketBinary(byte[], int, int)" map="onWebSocketBinary"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void discovery(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="com.aol.simple.react.async.Queue startStreming()" map="j"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void getLogIds()" map="k"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void subscribe(java.lang.String, java.lang.String, com.sigmastream.pr.common.YhChannelConfig)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void processMessage(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="void terminate()" map="l"/>
  <method class="com.sigmastream.pr.yh.source.WSocketClientSource" name="boolean isDiscovery()" map="m"/>
  <class name="com.sigmastream.pr.yh.source.DiscoveryMessageHandlar" map="c"/>
  <field class="com.sigmastream.pr.yh.source.DiscoveryMessageHandlar" name="_log" map="b"/>
  <method class="com.sigmastream.pr.yh.source.DiscoveryMessageHandlar" name="void setChannelDetailsFromAsset(java.util.Map, java.util.List, java.util.Map, com.sigmastream.pr.common.YhChannelConfig)" map="b"/>
  <method class="com.sigmastream.pr.yh.source.DiscoveryMessageHandlar" name="void discoveryResponse(java.lang.String, java.util.List, java.util.Map, com.sigmastream.pr.common.YhChannelConfig)" map="b"/>
  <package name="com.sigmastream.pr.yh.sink" map="c"/>
  <class name="com.sigmastream.pr.yh.sink.YhWSocketPublisher" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="context" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="implParam_" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="initialized" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="filterChannels" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="_DEFAULT_FREQ" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="outputDataStreams" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="channels" map="h"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="_LAS" map="i"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="initDeviceContext" map="j"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="_log" map="k"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="jobConfiguration" map="l"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="gson" map="m"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="socketSink" map="n"/>
  <field class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="_UNITLESS" map="o"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void lambda$configureDevice$0()" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void terminate()" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void configureDevice()" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="java.util.Map getRuntimeDeviceContext(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void channelContext(java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="int generateChannelId(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="java.util.Map getChannels()" map="f"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void initialDeviceContext()" map="g"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="java.util.Map getChannelContext(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="void process(java.util.List)" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="java.lang.String outputConfig()" map="h"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="boolean initialize(java.util.List)" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.YhWSocketPublisher" name="int getChannelId(java.lang.String)" map="c"/>
  <class name="com.sigmastream.pr.yh.sink.MapSinkP" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.MapSinkP" name="context" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.MapSinkP" name="SINK_MAP" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.MapSinkP" name="toDataPayloadF" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.MapSinkP" name="outputDataStreams" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.MapSinkP" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.yh.sink.MapSinkP" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.yh.sink.MapSinkP" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.yh.sink.MapSinkP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.yh.sink.MapSinkP" name="boolean complete()" map="complete"/>
  <class name="com.sigmastream.pr.yh.sink.WSocketClientSink$Backfill" map="_b"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$Backfill" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$Backfill" name="void run()" map="run"/>
  <class name="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" map="_c"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="dataSizeMb" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="totalPktsSent" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="endTime" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="startTime" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="dataloss" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="sessionId" map="h"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="totalPktsRecieved" map="i"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setSessionId(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setDataloss(long)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="java.util.Date getStartTime()" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="long getTotalPktsSent()" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setDataSizeMb(double)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="java.lang.String getSessionId()" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setStartTime(java.util.Date)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="long getTotalPktsRecieved()" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setEndTime(java.util.Date)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void addDataSize(double)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="int hashCode()" map="hashCode"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="long getDataloss()" map="f"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setTotalPktsRecieved(long)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="java.util.Date getEndTime()" map="g"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="void setTotalPktsSent(long)" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$ConnectionStats" name="double getDataSizeMb()" map="h"/>
  <class name="com.sigmastream.pr.yh.sink.WSocketClientSink$LastTsUpdater" map="_d"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink$LastTsUpdater" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink$LastTsUpdater" name="void run()" map="run"/>
  <class name="com.sigmastream.pr.yh.sink.WSocketClientSink" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="maxSinkCacheSize" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="FEEDID" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="PAYLOAD_TYPE" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="con" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="upsertData" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="uuid" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="IOT_RES_ENCODING" map="h"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="dataFlowMode" map="i"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="_log" map="j"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="ASSET_ID" map="k"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="lastEmittedTime" map="l"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="dataType" map="m"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="cacheExpireAge" map="n"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="assetId" map="o"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="keepDataHistory" map="p"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="paramMap" map="q"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="CLIENT_KEY" map="r"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="KEEP_ALIVE_INTERVAL" map="s"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="wClientState" map="t"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="dataQueueCount" map="u"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="isBackfill" map="v"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="destUri" map="w"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="DATA_TYPE_KEY" map="x"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="lastTSUpdater" map="y"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="dataLossCount" map="z"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="rigID" map="ab"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="reconnectInterval" map="bb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="deviceKey" map="cb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="maxCacheSize" map="db"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="totalIncomingPkts" map="eb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="maxMessageSize" map="fb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="session" map="gb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="password" map="hb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="CONNECTION_TYPE" map="ib"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="IOT_SESSION" map="jb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="IS_BACKFILL" map="kb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="backfillDeployTimer" map="lb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="certPassword" map="mb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="username" map="nb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="dcmDataCache" map="ob"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="jobConfiguration" map="pb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="TYPE_PUSH" map="qb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="IOT_REQ_ENCODING" map="rb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="sessionId" map="sb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="useCassandra" map="tb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="LAST_MESSAGE_ID" map="ub"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="deviceContext" map="vb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="client" map="wb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="connectionStats" map="xb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="timeout" map="yb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="nextMessageID" map="zb"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="CLIENT_ID" map="ac"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="jobName" map="bc"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="payloadType" map="cc"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="isTerminated" map="dc"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="KEEP_DATA_HISTORY" map="ec"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="DATA_FLOW_MODE" map="fc"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="configSent" map="gc"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="KEEP_ALIVE_ENABLE" map="hc"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="DEVICE_KEY" map="ic"/>
  <field class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="connectionState" map="jc"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="boolean configDevice()" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void onWebSocketConnect(org.eclipse.jetty.websocket.api.Session)" map="onWebSocketConnect"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void lambda$pushAsync$2(org.eclipse.jetty.websocket.api.RemoteEndpoint, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void pushSync(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void pushData(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void onWebSocketError(java.lang.Throwable)" map="onWebSocketError"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="boolean configChannel(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void onWebSocketClose(int, java.lang.String)" map="onWebSocketClose"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void close()" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="boolean isConfigured()" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void lambda$pushSync$1(org.eclipse.jetty.websocket.api.RemoteEndpoint, java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="boolean isOpen()" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void lambda$connectAsync$0(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="java.lang.String getDeviceContext()" map="f"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void handleMessage(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="com.sigmastream.logger.log4j.Logger access$000()" map="g"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void pushAsync(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void onWebSocketText(java.lang.String)" map="onWebSocketText"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="boolean isConnected()" map="h"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="int getwClientState()" map="i"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void setDeviceKey(java.lang.String)" map="f"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void onWebSocketBinary(byte[], int, int)" map="onWebSocketBinary"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="java.lang.String getDeviceKey()" map="j"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="boolean connectSync(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void setDeviceContext(java.lang.String)" map="g"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void processMessage(java.lang.String)" map="h"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void connectAsync(java.lang.String, long, java.lang.String, java.lang.String, java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.Boolean)" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void terminate()" map="k"/>
  <method class="com.sigmastream.pr.yh.sink.WSocketClientSink" name="void emitDataInCassandra(java.lang.String, long, boolean)" map="b"/>
  <class name="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="paramMap_" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="_context" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="deviceName" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="messageHandler" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="_log" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="frequency" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="deviceSink" map="h"/>
  <method class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="boolean initialize(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="java.lang.String outputConfig()" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="void process(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="void terminate()" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.DeviceWebSocketSink" name="void channelConfig(java.lang.String)" map="b"/>
  <class name="com.sigmastream.pr.yh.sink.CsvSinkProcess" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="channelConfig" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="context" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="decimalFormat" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="yhChannelConfig" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="outputDevicesConfig" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="mapStreams" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="toDataPayloadF" map="h"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="brw" map="i"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="outputDataStreams" map="j"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="standMataData" map="k"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="_log" map="l"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="jobConfiguration" map="m"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="deviceName" map="n"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="deviceSinkConfig" map="o"/>
  <field class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="devicePayloadData" map="p"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="void addTagNum()" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="void addOutChannelDetails()" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="void init(com.hazelcast.jet.core.Processor$Context)" map="init"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="void writeData(long, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="boolean isCooperative()" map="isCooperative"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.yh.sink.CsvSinkProcess" name="boolean complete()" map="complete"/>
  <class name="com.sigmastream.pr.yh.sink.PayloadManager" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="lastPayloadAnalysed" map="b"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="rigId" map="c"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="timeout_" map="d"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="webSocketSinkLimit" map="e"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="dataFlowMode" map="f"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="_log" map="g"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="secureConnection" map="h"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="dataType" map="i"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="wSocketClient" map="j"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="assetId" map="k"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="keepDataHistory" map="l"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="messageQueueOut" map="m"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="isBackfill" map="n"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="_DATA_PROCESSED_TYPE" map="o"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="isIndexChannel" map="p"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="pushCount" map="q"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="clientId" map="r"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="reconnectInterval" map="s"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="_DATA_RAW_TYPE" map="t"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="connected" map="u"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="deviceKey" map="v"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="maxMessageSize" map="w"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="_PAYLOAD_TYPE_JSON" map="x"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="isBackFillConfig" map="y"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="paramMap_" map="z"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="certPassword" map="ab"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="jobConfiguration" map="bb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="_PAYLOAD_TYPE_CSV" map="cb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="indexChName" map="db"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="backfillGapThreshold" map="eb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="deviceContext" map="fb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="wsNullCount" map="gb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="serverURL" map="hb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="port_" map="ib"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="address_" map="jb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="apikey" map="kb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="jobName" map="lb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="payloadType" map="mb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="_DATA_SIMULATED_TYPE" map="nb"/>
  <field class="com.sigmastream.pr.yh.sink.PayloadManager" name="gapFetchDuration" map="ob"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.String getAddress_()" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void run()" map="run"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setSecureConnection(java.lang.Boolean)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="long getBackfillGapThreshold()" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="int getPort_()" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void stream(java.util.Map, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setJobName(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void close(boolean)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setApikey(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setLastPayloadAnalysed(long)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="com.sigmastream.pr.yh.sink.WSocketClientSink createDataProcessor(java.lang.String, java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.String getDeviceKey()" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="int getDataFlowMode()" map="f"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setGapFetchDuration(long)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="long getLastPayloadAnalysed()" map="g"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="boolean handshake(java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void configChannel(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.String getApikey()" map="h"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.String getJobName()" map="i"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.Boolean getSecureConnection()" map="j"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setAddress_(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setJobConfiguration(com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setClientId(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.String getRigId()" map="k"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setBackfillGapThreshold(long)" map="d"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setBackFillConfig(boolean)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setPort_(int)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="boolean isBackFillConfig()" map="l"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="long getGapFetchDuration()" map="m"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="boolean setup(java.util.Map, java.lang.String, com.sigmastream.bc.jobs.JobConfiguration)" map="b"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="com.sigmastream.bc.jobs.JobConfiguration getJobConfiguration()" map="n"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setDataFlowMode(int)" map="c"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setDeviceKey(java.lang.String)" map="f"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="java.lang.String getClientId()" map="o"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="void setRigId(java.lang.String)" map="g"/>
  <method class="com.sigmastream.pr.yh.sink.PayloadManager" name="int getReconnectInterval()" map="p"/>
  <class name="com.sigmastream.pr.common.ConnectionEvents" map="b"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="state" map="b"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="name" map="c"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="MakingUpEnd" map="d"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="PickingUpStandEnd" map="e"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="SlipsToSlips" map="f"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="$VALUES" map="g"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="ConnectionStart" map="h"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="BreakingDownStart" map="i"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="MakingUpStart" map="j"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="OutSlips" map="k"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="ConnectionEnd" map="l"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="PickingUpStandStart" map="m"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="Unknown" map="n"/>
  <field class="com.sigmastream.pr.common.ConnectionEvents" name="BreakingDownEnd" map="o"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="com.sigmastream.pr.common.ConnectionEvents valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="com.sigmastream.pr.common.ConnectionEvents[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="com.sigmastream.pr.common.ConnectionEvents canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="int getState()" map="c"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="int getStateByName(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.common.ConnectionEvents" name="java.lang.String getNameByState(int)" map="b"/>
  <class name="com.sigmastream.pr.common.NettyServer$1$1" map="1"/>
  <field class="com.sigmastream.pr.common.NettyServer$1$1" name="this$1" map="b"/>
  <method class="com.sigmastream.pr.common.NettyServer$1$1" name="void channelActive(io.netty.channel.ChannelHandlerContext)" map="channelActive"/>
  <method class="com.sigmastream.pr.common.NettyServer$1$1" name="void channelRead(io.netty.channel.ChannelHandlerContext, java.lang.Object)" map="channelRead"/>
  <class name="com.sigmastream.pr.common.NettyServer$1" map="1"/>
  <field class="com.sigmastream.pr.common.NettyServer$1" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.common.NettyServer$1" name="void initChannel(io.netty.channel.Channel)" map="initChannel"/>
  <method class="com.sigmastream.pr.common.NettyServer$1" name="void initChannel(io.netty.channel.socket.SocketChannel)" map="b"/>
  <class name="com.sigmastream.pr.common.NettyServer" map="c"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="port" map="b"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="childGroup" map="c"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="channelActiveHandler" map="d"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="_log" map="e"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="channel" map="f"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="parentGroup" map="g"/>
  <field class="com.sigmastream.pr.common.NettyServer" name="messageConsumer" map="h"/>
  <method class="com.sigmastream.pr.common.NettyServer" name="java.util.function.Consumer access$100(com.sigmastream.pr.common.NettyServer)" map="b"/>
  <method class="com.sigmastream.pr.common.NettyServer" name="void stop()" map="b"/>
  <method class="com.sigmastream.pr.common.NettyServer" name="java.util.function.Consumer access$000(com.sigmastream.pr.common.NettyServer)" map="c"/>
  <method class="com.sigmastream.pr.common.NettyServer" name="void start()" map="c"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestSlideVariables" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TqSS_PI" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Slide_Reference_Timestamp" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="RPM_PO" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TqSS_SOwoR_OnB" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="RPM_PI" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SPP_SwoR" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tn_SwoR" map="h"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tn_PO" map="i"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PI_Timestamp" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tq_SOwoR_OnB" map="k"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="name" map="l"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tn_PI" map="m"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DBTM_SwoR" map="n"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SOSDeltaTqSS" map="o"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PUSDeltaTqSS" map="p"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DVER_PO" map="q"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DBTM_SOwoR_OnB" map="r"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SOSDrTn" map="s"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DVER_SwoR" map="t"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TnSS_PO" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SOSDrTnSS" map="v"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tq_PO" map="w"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DVER_PI" map="x"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TnSS_PI" map="y"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PUSDrTn" map="z"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tq_PI" map="ab"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DVER_SOwoR_OnB" map="bb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="HL_PO" map="cb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="RPM_SwoR" map="db"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="HL_SwoR" map="eb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SOSDeltaP" map="fb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PUSDrTnSS" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="HL_PI" map="hb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="HL_SOwoR_OnB" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="$VALUES" map="jb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TnSS_SwoR" map="kb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SOSDrHL" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SD_Timestamp" map="mb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tq_SwoR" map="nb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PUSDrHL" map="ob"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PUSDeltaP" map="pb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PUSDeltaTq" map="qb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SPP_PO" map="rb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="PO_Timestamp" map="sb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="RPM_SOwoR_OnB" map="tb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SPP_SOwoR_OnB" map="ub"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TqSS_SwoR" map="vb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SOSDeltaTq" map="wb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="SPP_PI" map="xb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DBTM_PO" map="yb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TqSS_PO" map="zb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="Tn_SOwoR_OnB" map="ac"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="DBTM_PI" map="bc"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="TnSS_SOwoR_OnB" map="cc"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="com.sigmastream.pr.common.BCFrictionTestSlideVariables valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="com.sigmastream.pr.common.BCFrictionTestSlideVariables[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestSlideVariables" name="com.sigmastream.pr.common.BCFrictionTestSlideVariables canContain(java.lang.String)" map="c"/>
  <class name="com.sigmastream.pr.common.BCOperators" map="e"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="WellOperationalOperator" map="b"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="TLAOperator" map="c"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="operatorClazz" map="d"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="$VALUES" map="e"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="DataQualityOperator" map="f"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="TimeAccumulateOperator" map="g"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="PyBridgeOperator" map="h"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="DysfunctionOperator" map="i"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="NewOperator" map="j"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="operatorName" map="k"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="FFTOperator" map="l"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="DataAnalyzerOperator" map="m"/>
  <field class="com.sigmastream.pr.common.BCOperators" name="SSIndicatorOperator" map="n"/>
  <method class="com.sigmastream.pr.common.BCOperators" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCOperators" name="java.lang.Class getOperatorClazz()" map="b"/>
  <method class="com.sigmastream.pr.common.BCOperators" name="com.sigmastream.pr.common.BCOperators valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCOperators" name="com.sigmastream.pr.common.BCOperators[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCOperators" name="boolean canNameContains(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCOperators" name="com.sigmastream.pr.common.BCOperators getElementByName(java.lang.String)" map="d"/>
  <class name="com.sigmastream.pr.common.CommonUtils$Parsers" map="_b"/>
  <field class="com.sigmastream.pr.common.CommonUtils$Parsers" name="_DELIM_URI_TOKENS" map="b"/>
  <field class="com.sigmastream.pr.common.CommonUtils$Parsers" name="_DELIM_URI_VAL_STRT" map="c"/>
  <field class="com.sigmastream.pr.common.CommonUtils$Parsers" name="_DELIM_URI_VAL_END" map="d"/>
  <method class="com.sigmastream.pr.common.CommonUtils$Parsers" name="java.util.List parseUri(java.lang.String)" map="b"/>
  <class name="com.sigmastream.pr.common.CommonUtils$1" map="1"/>
  <field class="com.sigmastream.pr.common.CommonUtils$1" name="ch" map="b"/>
  <field class="com.sigmastream.pr.common.CommonUtils$1" name="val$str" map="c"/>
  <field class="com.sigmastream.pr.common.CommonUtils$1" name="pos" map="d"/>
  <method class="com.sigmastream.pr.common.CommonUtils$1" name="void nextChar()" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils$1" name="double parseFactor()" map="c"/>
  <method class="com.sigmastream.pr.common.CommonUtils$1" name="boolean eat(int)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils$1" name="double parse()" map="d"/>
  <method class="com.sigmastream.pr.common.CommonUtils$1" name="double parseTerm()" map="e"/>
  <method class="com.sigmastream.pr.common.CommonUtils$1" name="double parseExpression()" map="f"/>
  <class name="com.sigmastream.pr.common.CommonUtils$KeyValue" map="_c"/>
  <field class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="key" map="b"/>
  <field class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="value" map="c"/>
  <method class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="void setValue(java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="com.sigmastream.pr.common.CommonUtils$KeyValue getKeyValue(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="java.lang.Object getKey()" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="java.lang.Object getValue()" map="c"/>
  <method class="com.sigmastream.pr.common.CommonUtils$KeyValue" name="void setKey(java.lang.Object)" map="c"/>
  <class name="com.sigmastream.pr.common.CommonUtils" map="f"/>
  <field class="com.sigmastream.pr.common.CommonUtils" name="_DELIM_URI_TOKENS" map="b"/>
  <field class="com.sigmastream.pr.common.CommonUtils" name="_DELIM_URI_VAL_STRT" map="c"/>
  <field class="com.sigmastream.pr.common.CommonUtils" name="_LAS_VALUE" map="d"/>
  <field class="com.sigmastream.pr.common.CommonUtils" name="_log" map="e"/>
  <field class="com.sigmastream.pr.common.CommonUtils" name="decimalFormat" map="f"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="void updateNetworkDetails(com.sigmastream.bc.jobs.JobInformation, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.util.Map configParser(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.lang.String getFormattedDuration(long)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.lang.String getNewObjectConfigMap(java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.util.List parseUri(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.lang.String createDir(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="boolean compareMapObject(java.util.Map, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.lang.String createDir(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.util.Map parseDataStreams(java.lang.String, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="double eval(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.util.Map mergeByVertex(java.util.List, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="void analyzeOperator(java.util.Map, java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="boolean isValueNotNull(java.util.Map, java.lang.String, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="void moveFile(java.lang.String, java.nio.file.Path, java.lang.String, java.lang.String, boolean)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="boolean isValueNotNull(java.util.Map, java.lang.String, com.sigmastream.bc.operator.Payload)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.lang.String getFormattedDurationByDay(long)" map="c"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="double calculate3psRPM(double)" map="b"/>
  <method class="com.sigmastream.pr.common.CommonUtils" name="java.util.Map parseDataStreams(java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestEvents" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="name" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="$VALUES" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="BC_FT_Event_Code" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="BC_FT_Drilling_Event" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="BC_FT_Drilling_Event_Code" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="BC_FT_Timestamp" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestEvents" name="BC_FT_Event" map="h"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestEvents" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestEvents" name="com.sigmastream.pr.common.BCFrictionTestEvents canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestEvents" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestEvents" name="com.sigmastream.pr.common.BCFrictionTestEvents valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestEvents" name="com.sigmastream.pr.common.BCFrictionTestEvents[] values()" map="values"/>
  <class name="com.sigmastream.pr.common.FTEventConfig" map="h"/>
  <field class="com.sigmastream.pr.common.FTEventConfig" name="isHookloadBased" map="b"/>
  <field class="com.sigmastream.pr.common.FTEventConfig" name="staleHookloadValDiff" map="c"/>
  <field class="com.sigmastream.pr.common.FTEventConfig" name="_log" map="d"/>
  <field class="com.sigmastream.pr.common.FTEventConfig" name="aggregation" map="e"/>
  <field class="com.sigmastream.pr.common.FTEventConfig" name="windowTime" map="f"/>
  <field class="com.sigmastream.pr.common.FTEventConfig" name="isFTHookLoadStateEnable" map="g"/>
  <method class="com.sigmastream.pr.common.FTEventConfig" name="com.sigmastream.pr.common.BCAggregations getAggregation()" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventConfig" name="double getStaleHookloadValDiff()" map="c"/>
  <method class="com.sigmastream.pr.common.FTEventConfig" name="boolean isFTHookLoadStateEnable()" map="d"/>
  <method class="com.sigmastream.pr.common.FTEventConfig" name="void processConfig(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventConfig" name="boolean isHookloadBased()" map="e"/>
  <method class="com.sigmastream.pr.common.FTEventConfig" name="long getWindowTime()" map="f"/>
  <class name="com.sigmastream.pr.common.BCEntry" map="i"/>
  <field class="com.sigmastream.pr.common.BCEntry" name="key" map="b"/>
  <field class="com.sigmastream.pr.common.BCEntry" name="value" map="c"/>
  <method class="com.sigmastream.pr.common.BCEntry" name="java.lang.Object getKey()" map="getKey"/>
  <method class="com.sigmastream.pr.common.BCEntry" name="java.lang.Object setValue(java.lang.Object)" map="setValue"/>
  <method class="com.sigmastream.pr.common.BCEntry" name="java.lang.Object getValue()" map="getValue"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SPP_SwR" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Tn_BR" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_HL_FR" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SORDrTnSS" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_DBTM_BR" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_TqSS_BR" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Tn_SwR" map="h"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_BR_Timestamp" map="i"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="name" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Tq_BR" map="k"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SORDeltaP" map="l"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_HL_SwR" map="m"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_DVER_FR" map="n"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_TnSS_FR" map="o"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_PURDrTnSS" map="p"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SPP_FR" map="q"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_HL_BR" map="r"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_DVER_SwR" map="s"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SORDrTn" map="t"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_FR_Timestamp" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Rotary_Reference_Timestamp" map="v"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Tq_SwR" map="w"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_DBTM_SwR" map="x"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_PURDrTn" map="y"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_PURDeltaP" map="z"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_RPM_FR" map="ab"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="$VALUES" map="bb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_DVER_BR" map="cb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_TnSS_SwR" map="db"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_TnSS_BR" map="eb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SORDrHL" map="fb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SPP_BR" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_TqSS_SwR" map="hb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_PURDeltaTq" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SORDeltaTq" map="jb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_SORDeltaTqSS" map="kb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Tn_FR" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_PURDeltaTqSS" map="mb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_PURDrHL" map="nb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_RPM_SwR" map="ob"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_DBTM_FR" map="pb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_TqSS_FR" map="qb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_RPM_BR" map="rb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="TRIP_Tq_FR" map="sb"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables" name="com.sigmastream.pr.common.BCFrictionTestTripRotaryVariables valueOf(java.lang.String)" map="valueOf"/>
  <class name="com.sigmastream.pr.common.IPythonComputingBridge" map="k"/>
  <method class="com.sigmastream.pr.common.IPythonComputingBridge" name="void SetEnviormentalPath(java.util.ArrayList)" map="b"/>
  <method class="com.sigmastream.pr.common.IPythonComputingBridge" name="void SetGlobalVariables(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.IPythonComputingBridge" name="void SetGlobalVariable(java.lang.String, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.common.IPythonComputingBridge" name="jep.Interpreter GetInstance()" map="b"/>
  <method class="com.sigmastream.pr.common.IPythonComputingBridge" name="java.lang.Object Compute(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.IPythonComputingBridge" name="void Initialize(java.lang.String)" map="c"/>
  <class name="com.sigmastream.pr.common.BCWellOETimestampCorrection" map="l"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="noDataAvailableGapInterval" map="b"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="CONSTANT_KEY" map="c"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="freq" map="d"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="wellOEUtils" map="e"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="lastProcessedTimestamp" map="f"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="errorRotaryRPM" map="g"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="errorFlowIn" map="h"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="lastOperationalEvent" map="i"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="ignoreStationaryTimeInterval" map="j"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="_log" map="k"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="avgDataStreams" map="l"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="inputDataStreamsConfig" map="m"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="slopeDataStreams" map="n"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="lastPayload" map="o"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.Map getStaticNonStaticResultDataPayload(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="void updateEventVariables(com.sigmastream.pr.common.OperationalEvents, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.List process(java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.TreeMap getDataPayloadsBasedState(java.util.TreeMap, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.Map prepareResultPayloads(java.util.TreeMap)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.Map getResultDataPayload(java.util.List)" map="d"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.TreeMap processPayloads(java.util.TreeMap, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.TreeMap getDataPayloadsBasedStateWithChannelValueUpdate(java.util.TreeMap, java.util.Map, java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.Map getOnOffDataPayload(java.util.List, double)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrection" name="java.util.Map getAggregatePayloads(java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.common.MarkerEvents" map="m"/>
  <field class="com.sigmastream.pr.common.MarkerEvents" name="BC_CasedHole" map="b"/>
  <field class="com.sigmastream.pr.common.MarkerEvents" name="name" map="c"/>
  <field class="com.sigmastream.pr.common.MarkerEvents" name="$VALUES" map="d"/>
  <field class="com.sigmastream.pr.common.MarkerEvents" name="BC_OpenHole" map="e"/>
  <field class="com.sigmastream.pr.common.MarkerEvents" name="state" map="f"/>
  <method class="com.sigmastream.pr.common.MarkerEvents" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.MarkerEvents" name="com.sigmastream.pr.common.MarkerEvents valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.MarkerEvents" name="com.sigmastream.pr.common.MarkerEvents[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.MarkerEvents" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.MarkerEvents" name="int getState()" map="c"/>
  <class name="com.sigmastream.pr.common.MajorOperationalEventState" map="n"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="holeDepth" map="b"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="linerEvent" map="c"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="bitDepth" map="d"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="depthAdjustment" map="e"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="tripStart" map="f"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="state" map="g"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="tripingEvent" map="h"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="casingEvent" map="i"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="drillingEvent" map="j"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="eventTime" map="k"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="Conditioning" map="l"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="tubingEvent" map="m"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="trippingOutEvent" map="n"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="trippingInEvent" map="o"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="stationaryEvent" map="p"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="outOfHoleEvent" map="q"/>
  <field class="com.sigmastream.pr.common.MajorOperationalEventState" name="cementingEvent" map="r"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="com.sigmastream.pr.common.MajorOperationalEventState clone()" map="b"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="void setBitDepth(double)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="double getBitDepth()" map="c"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="java.lang.Object clone()" map="clone"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="com.sigmastream.pr.common.StateType getState()" map="d"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="void setTripingEvent(com.sigmastream.pr.common.TrippingEvents)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="void setState(com.sigmastream.pr.common.StateType)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="void setEventTime(long)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="int hashCode()" map="hashCode"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="void setHoleDepth(double)" map="c"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="double getHoleDepth()" map="e"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="long getEventTime()" map="f"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="com.sigmastream.pr.common.TrippingEvents getTripingEvent()" map="g"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventState" name="int compareTo(com.sigmastream.pr.common.MajorOperationalEventState)" map="b"/>
  <class name="com.sigmastream.pr.common.MapDeserializerDoubleAsIntFix$1" map="1"/>
  <class name="com.sigmastream.pr.common.MapDeserializerDoubleAsIntFix" map="o"/>
  <method class="com.sigmastream.pr.common.MapDeserializerDoubleAsIntFix" name="java.lang.Object deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)" map="deserialize"/>
  <method class="com.sigmastream.pr.common.MapDeserializerDoubleAsIntFix" name="java.lang.Object read(com.google.gson.JsonElement)" map="b"/>
  <method class="com.sigmastream.pr.common.MapDeserializerDoubleAsIntFix" name="java.util.Map deserialize(com.google.gson.JsonElement, java.lang.reflect.Type, com.google.gson.JsonDeserializationContext)" map="b"/>
  <method class="com.sigmastream.pr.common.MapDeserializerDoubleAsIntFix" name="com.google.gson.Gson newGson()" map="b"/>
  <class name="com.sigmastream.pr.common.MajorEventCorrection" map="p"/>
  <field class="com.sigmastream.pr.common.MajorEventCorrection" name="bitdepth" map="b"/>
  <field class="com.sigmastream.pr.common.MajorEventCorrection" name="eventCode" map="c"/>
  <field class="com.sigmastream.pr.common.MajorEventCorrection" name="eventTime" map="d"/>
  <field class="com.sigmastream.pr.common.MajorEventCorrection" name="isCorrection" map="e"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="void setEventCode(com.sigmastream.pr.common.TrippingEvents)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="void setBitdepth(java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="java.lang.Double getBitdepth()" map="b"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="java.lang.Boolean getIsCorrection()" map="c"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="void setEventTime(java.lang.Long)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="void setIsCorrection(java.lang.Boolean)" map="b"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="com.sigmastream.pr.common.TrippingEvents getEventCode()" map="d"/>
  <method class="com.sigmastream.pr.common.MajorEventCorrection" name="java.lang.Long getEventTime()" map="e"/>
  <class name="com.sigmastream.pr.common.TimestampedItem" map="q"/>
  <field class="com.sigmastream.pr.common.TimestampedItem" name="item" map="b"/>
  <field class="com.sigmastream.pr.common.TimestampedItem" name="timestamp" map="c"/>
  <method class="com.sigmastream.pr.common.TimestampedItem" name="java.lang.Object item()" map="b"/>
  <method class="com.sigmastream.pr.common.TimestampedItem" name="long timestamp()" map="c"/>
  <method class="com.sigmastream.pr.common.TimestampedItem" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="com.sigmastream.pr.common.TimestampedItem" name="int hashCode()" map="hashCode"/>
  <method class="com.sigmastream.pr.common.TimestampedItem" name="com.sigmastream.pr.common.TimestampedItem fromWindowResult(long, long, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.common.TimestampedItem" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.TimestampedEntry" map="r"/>
  <field class="com.sigmastream.pr.common.TimestampedEntry" name="key" map="b"/>
  <field class="com.sigmastream.pr.common.TimestampedEntry" name="value" map="c"/>
  <field class="com.sigmastream.pr.common.TimestampedEntry" name="timestamp" map="d"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="com.sigmastream.pr.common.TimestampedEntry fromWindowResult(long, long, java.lang.Object, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="java.lang.Object getKey()" map="getKey"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="long getTimestamp()" map="b"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="boolean equals(java.lang.Object)" map="equals"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="int hashCode()" map="hashCode"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="java.lang.Object setValue(java.lang.Object)" map="setValue"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="java.lang.Object getValue()" map="getValue"/>
  <method class="com.sigmastream.pr.common.TimestampedEntry" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.FTAggregationManager" map="s"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="slideOffBottomValue" map="b"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="slideDrillingSlackoffValue" map="c"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="rotaryOffBottomValue" map="d"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="maxHookLoad" map="e"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="minHookLoad" map="f"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="tripSlideOffBottomValue" map="g"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="tripRotaryOffBottomValue" map="h"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="prevEvent" map="i"/>
  <field class="com.sigmastream.pr.common.FTAggregationManager" name="rotaryDrillingSlackoffValue" map="j"/>
  <method class="com.sigmastream.pr.common.FTAggregationManager" name="java.util.Map getLastFTCalculatedValues(long, java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.common.FTAggregationManager" name="java.util.Map process(long, double, com.sigmastream.pr.common.OperationalEvents, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.FTAggregationManager" name="void setMaxHookLoad(double)" map="b"/>
  <class name="com.sigmastream.pr.common.PythonComputingBridge" map="t"/>
  <field class="com.sigmastream.pr.common.PythonComputingBridge" name="_globalVariables" map="b"/>
  <field class="com.sigmastream.pr.common.PythonComputingBridge" name="_sharedInterpreter" map="c"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="void SetEnviormentalPath(java.util.ArrayList)" map="b"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="void SetGlobalVariables(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="void SetGlobalVariable(java.lang.String, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="jep.Interpreter GetInstance()" map="b"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="void finalize()" map="finalize"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="java.lang.Object Compute(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.PythonComputingBridge" name="void Initialize(java.lang.String)" map="c"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestCommonVariables" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODeltaTq" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDBTM" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="DVER_SO_OnB" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="TnSS_SO_OnB" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="Tn_SO_OnB" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_Tq" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SPP_RV" map="h"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_Tn" map="i"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDrTnSS" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDrTn" map="k"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="DBTM_RV" map="l"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="TqSS_RV" map="m"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="Reference_Timestamp" map="n"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODBTM" map="o"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDeltaTq" map="p"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="name" map="q"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SPP_SO_OnB" map="r"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SORPM" map="s"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="HL_SO_OnB" map="t"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="Tq_SO_OnB" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDeltaP" map="v"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODrTnSS" map="w"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODrTn" map="x"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="RPM_RV" map="y"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_Tq" map="z"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_HL" map="ab"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_TqSS" map="bb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_Tn" map="cb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDrHL" map="db"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_SPP" map="eb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_Timestamp" map="fb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="Tn_RV" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDeltaTqSS" map="hb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_TqSS" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_Timestamp" map="jb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="Drilling_Timestamp" map="kb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODeltaP" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODeltaTqSS" map="mb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PURPM" map="nb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PUDVER" map="ob"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODrHL" map="pb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="$VALUES" map="qb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_SPP" map="rb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="DVER_RV" map="sb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="TnSS_RV" map="tb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_HL" map="ub"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="TqSS_SO_OnB" map="vb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="Tq_RV" map="wb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SO_TnSS" map="xb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="SODVER" map="yb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="HL_RV" map="zb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="RPM_SO_OnB" map="ac"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="PU_TnSS" map="bc"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="DBTM_SO_OnB" map="cc"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonVariables[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonVariables canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonVariables valueOf(java.lang.String)" map="valueOf"/>
  <class name="com.sigmastream.pr.common.PyToucanetCompute" map="v"/>
  <field class="com.sigmastream.pr.common.PyToucanetCompute" name="_yPredicted" map="d"/>
  <field class="com.sigmastream.pr.common.PyToucanetCompute" name="windowSize" map="e"/>
  <field class="com.sigmastream.pr.common.PyToucanetCompute" name="_pythonModulesPath" map="f"/>
  <field class="com.sigmastream.pr.common.PyToucanetCompute" name="_logger" map="g"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="void run(java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="void set_yPredicted(java.util.ArrayList)" map="c"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="void initialize(java.lang.String, int, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="void setWindowSize(int)" map="b"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="int getWindowSize()" map="c"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="void initializeLogUtility()" map="d"/>
  <method class="com.sigmastream.pr.common.PyToucanetCompute" name="java.util.ArrayList get_yPredicted()" map="e"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$29" map="29"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$29" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$28" map="28"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$28" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$27" map="27"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$27" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$26" map="26"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$26" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$25" map="25"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$25" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$24" map="24"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$24" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$23" map="23"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$23" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$22" map="22"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$22" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$21" map="21"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$21" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$20" map="20"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$20" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$9" map="9"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$9" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$8" map="8"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$8" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$19" map="19"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$19" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$7" map="7"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$7" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$18" map="18"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$18" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$6" map="6"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$6" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$17" map="17"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$17" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$5" map="5"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$5" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$16" map="16"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$16" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$4" map="4"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$4" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$15" map="15"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$15" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$3" map="3"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$3" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$14" map="14"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$14" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$2" map="2"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$2" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$13" map="13"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$13" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$1" map="1"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$1" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$12" map="12"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$12" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$11" map="11"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$11" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$43" map="43"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$43" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$10" map="10"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$10" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$42" map="42"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$42" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$41" map="41"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$41" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$40" map="40"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$40" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$39" map="39"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$39" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$38" map="38"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$38" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$37" map="37"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$37" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$36" map="36"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$36" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$35" map="35"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$35" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$34" map="34"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$34" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$33" map="33"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$33" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$32" map="32"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$32" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$31" map="31"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$31" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect$30" map="30"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect$30" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.common.BCDataQualityAspect" map="w"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_WELL_QUALITY_GOOD" map="b"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_TOTAL_CHANNEL_ASWI" map="c"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACTUAL_DEVICE_FREQUENCY" map="d"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACTUAL_DATA_COUNT" map="e"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_STALE_DATA_SCORE" map="f"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_DATA_QUALITY_GOOD" map="g"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_TOTAL_DEVICE_DATACOUNT" map="h"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_MIN_VALUE_BOUND_SCORE" map="i"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_TOTAL_ASWI_SCORE" map="j"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DEVICE_ASWI" map="k"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_PRECISION_EXPECTED" map="l"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_PRECISION_SCORE" map="m"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_BAD_FREQUENCY_DURATION" map="n"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_TOTAL_DEVICE_STREAM_TIME" map="o"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_MAX_VALUE_BOUND_EXPECTED" map="p"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="aspect" map="q"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DATA_GAP_EXPECTED" map="r"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DATA_COUNT_SCORE" map="s"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_CHANNELS_ASWI_SCORE" map="t"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DATA_GAP_SCORE" map="u"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_DEVICE_ASWI" map="v"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_TOTAL_WELL_DATA_COUNT" map="w"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DATA_COUNT_EXPECTED" map="x"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACTUAL_FREQUENCY" map="y"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_TOTAL_WELL_STREAM_TIME" map="z"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_ASWI" map="ab"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="$VALUES" map="bb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_PRICISION_SCORE_GOOD" map="cb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_TOTAL_DATA_COUNT" map="db"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_TOTAL_STREAM_TIME" map="eb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_TOTAL_DEAD_CHANNEL_TIME" map="fb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DEVICES_ASWI_SCORE" map="gb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_MIN_VALUE_BOUND_EXPECTED" map="hb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_WELL_ASWI" map="ib"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_CHANNEL_DEAD" map="jb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_FREQUENCY_GOOD" map="kb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DATA_FREQ_EXPECTED" map="lb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_DEVICE_QUALITY_GOOD" map="mb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_DEVICE_DEAD" map="nb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_MAX_VALUE_BOUND_SCORE" map="ob"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_COUNT_GOOD" map="pb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_DATA_FREQ_SCORE" map="qb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACTUAL_SATISFIED_COUNT" map="rb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_IS_STALE_DATA_SCORE_GOOD" map="sb"/>
  <field class="com.sigmastream.pr.common.BCDataQualityAspect" name="_ACCUM_TOTAL_DEVICE_DEAD_TIME" map="tb"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect" name="com.sigmastream.pr.common.BCDataQualityAspect fromString(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect" name="java.lang.String getAspect()" map="b"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect" name="boolean contain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect" name="com.sigmastream.pr.common.BCDataQualityAspect valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCDataQualityAspect" name="com.sigmastream.pr.common.BCDataQualityAspect[] values()" map="values"/>
  <class name="com.sigmastream.pr.common.BCWellOperationalEventsUtils" map="x"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="errorValues" map="b"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="preHoleDepthMiddle" map="c"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="prevDrillingStartDepth" map="d"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="prevTripInStartDepth" map="e"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="hkldThrslMultiplier" map="f"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="freq" map="g"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="count" map="h"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="_log" map="i"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="isAutoBlockLoadEnabled" map="j"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="previousEvent" map="k"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="prevBlockLoadAvg" map="l"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="caller" map="m"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="preBitDepthAvg" map="n"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="prevHoleDepthAvg" map="o"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="blockLoadAvg" map="p"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="blockLoadTotal" map="q"/>
  <field class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="initialBitDepthAvg" map="r"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="int bitDepthState(java.util.Map, java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="int holeDepthState(java.util.Map, java.lang.Double)" map="c"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="int blockHeightState(java.util.Map, java.lang.Double)" map="d"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="int rotaryTorqueState(java.util.Map, java.lang.Double)" map="e"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="java.util.Map getOperationalEvents(long, java.util.Map, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="boolean pumpOnState(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="int hookLoadState(java.util.Map, java.lang.Double)" map="f"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="boolean slideAssistOnState(java.util.Map, java.lang.Double)" map="g"/>
  <method class="com.sigmastream.pr.common.BCWellOperationalEventsUtils" name="boolean rotaryOnState(java.util.Map, java.lang.Double)" map="h"/>
  <class name="com.sigmastream.pr.common.TrippingEvents" map="y"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="TripStart" map="b"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="state" map="c"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="name" map="d"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="DrillingStart" map="e"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="StationaryStart" map="f"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="LinerRunStart" map="g"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="$VALUES" map="h"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="TripInStart" map="i"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="CasingStart" map="j"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="TubbingStart" map="k"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="CementingStart" map="l"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="Conditioning" map="m"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="Unknown" map="n"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="OutOfHole" map="o"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="LinerTripOutStart" map="p"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="TripOutStart" map="q"/>
  <field class="com.sigmastream.pr.common.TrippingEvents" name="DepthAdjustment" map="r"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="com.sigmastream.pr.common.TrippingEvents valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="int getState()" map="c"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="int getStateByName(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="com.sigmastream.pr.common.TrippingEvents canContain(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="java.lang.String getNameByState(int)" map="b"/>
  <method class="com.sigmastream.pr.common.TrippingEvents" name="com.sigmastream.pr.common.TrippingEvents[] values()" map="values"/>
  <class name="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" map="z"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="noDataAvailableGapInterval" map="b"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="CONSTANT_KEY" map="c"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="freq" map="d"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="lastProcessedTimestamp" map="e"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="errorRotaryRPM" map="f"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="errorFlowIn" map="g"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="ignoreStationaryTimeInterval" map="h"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="_log" map="i"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="prevPayload" map="j"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="avgDataStreams" map="k"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="inputDataStreamsConfig" map="l"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="prevEvent" map="m"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="slopeDataStreams" map="n"/>
  <field class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="lastPayload" map="o"/>
  <method class="com.sigmastream.pr.common.BCWellOETimestampCorrectionNew" name="java.util.List process(com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <class name="com.sigmastream.pr.common.BCComplexEventStateVariables" map="ab"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_HookLoadState" map="b"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_BitDepthState" map="c"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="name" map="d"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_OffBottomState" map="e"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_UnknownState" map="f"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="$VALUES" map="g"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_RotaryRpmState" map="h"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_SlideAssistState" map="i"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_OutOffHoleState" map="j"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_RotaryTorqueState" map="k"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_PumpOnState" map="l"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_BlockHeightState" map="m"/>
  <field class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="BC_HoleDepthState" map="n"/>
  <method class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="com.sigmastream.pr.common.BCComplexEventStateVariables valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="com.sigmastream.pr.common.BCComplexEventStateVariables[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCComplexEventStateVariables" name="com.sigmastream.pr.common.BCComplexEventStateVariables canContain(java.lang.String)" map="c"/>
  <class name="com.sigmastream.pr.common.MajorOperationalEventStateComparator" map="bb"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventStateComparator" name="int compare(java.lang.Object, java.lang.Object)" map="compare"/>
  <method class="com.sigmastream.pr.common.MajorOperationalEventStateComparator" name="int compare(com.sigmastream.pr.common.MajorOperationalEventState, com.sigmastream.pr.common.MajorOperationalEventState)" map="b"/>
  <class name="com.sigmastream.pr.common.BCOperations" map="cb"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_PumpOn" map="b"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_BitDepthStationary" map="c"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="operatorClazz" map="d"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="$VALUES" map="e"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="operatorName" map="f"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_BitDepthIncreasing" map="g"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_BitLessThanHoleDepth" map="h"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_RotaryRpm" map="i"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_BitDepthDecreasing" map="j"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_HookLoadStationary" map="k"/>
  <field class="com.sigmastream.pr.common.BCOperations" name="BC_HoleDepthIncreasing" map="l"/>
  <method class="com.sigmastream.pr.common.BCOperations" name="com.sigmastream.pr.common.BCOperations valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCOperations" name="com.sigmastream.pr.common.BCOperations[] values()" map="values"/>
  <class name="com.sigmastream.pr.common.VelocityPayloadManager" map="db"/>
  <field class="com.sigmastream.pr.common.VelocityPayloadManager" name="timeDiffMap" map="b"/>
  <field class="com.sigmastream.pr.common.VelocityPayloadManager" name="dataPayload" map="c"/>
  <field class="com.sigmastream.pr.common.VelocityPayloadManager" name="windowTimeMap" map="d"/>
  <field class="com.sigmastream.pr.common.VelocityPayloadManager" name="_log" map="e"/>
  <field class="com.sigmastream.pr.common.VelocityPayloadManager" name="velocityConfig" map="f"/>
  <field class="com.sigmastream.pr.common.VelocityPayloadManager" name="freq" map="g"/>
  <method class="com.sigmastream.pr.common.VelocityPayloadManager" name="boolean shiftWindowPayloads(java.lang.String, long, double, double)" map="b"/>
  <method class="com.sigmastream.pr.common.VelocityPayloadManager" name="java.util.Map process(java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.common.BCTimeCorrection" map="eb"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="preBitDepth" map="b"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="bitDepth" map="c"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="prevBlockLoadAvg" map="d"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="rotaryRPM" map="e"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="deltaRotaryRPM" map="f"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="hookLoad" map="g"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="_log" map="h"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="deltaFlowIn" map="i"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="flowIn" map="j"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="preHoleDepth" map="k"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="holeDepth" map="l"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="resultTime" map="m"/>
  <field class="com.sigmastream.pr.common.BCTimeCorrection" name="deltaBitDepth" map="n"/>
  <method class="com.sigmastream.pr.common.BCTimeCorrection" name="long handleEarlyDetection(java.util.List, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.common.BCTimeCorrection" name="void reset()" map="b"/>
  <method class="com.sigmastream.pr.common.BCTimeCorrection" name="void close()" map="close"/>
  <class name="com.sigmastream.pr.common.BCSmallOECorrection" map="fb"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="confirmEvent" map="b"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="wellOEUtils" map="c"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="penddingPayload" map="d"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="eventsDelayPayloads" map="e"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="confirmEventTime" map="f"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="_log" map="g"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="delayedPayloads" map="h"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="avgDataStreams" map="i"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="smallEventConfigDuration" map="j"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="inputDataStreamsConfig" map="k"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrection" name="slopeDataStreams" map="l"/>
  <method class="com.sigmastream.pr.common.BCSmallOECorrection" name="java.util.Map prepareResultPayloads(java.util.TreeMap)" map="b"/>
  <method class="com.sigmastream.pr.common.BCSmallOECorrection" name="java.util.Map getAggregatePayloads(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.BCSmallOECorrection" name="java.util.List process(java.util.List)" map="b"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_DBTM_SwoR" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_DVER_PO" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_DVER_SwoR" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SOSDrTn" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_TnSS_PO" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SPP_PO" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SOSDrTnSS" map="h"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_DVER_PI" map="i"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_TnSS_PI" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SPP_SwoR" map="k"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SPP_PI" map="l"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PUSDrTn" map="m"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="name" map="n"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SOSDeltaP" map="o"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PUSDrTnSS" map="p"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_HL_SwoR" map="q"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_TnSS_SwoR" map="r"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SOSDrHL" map="s"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_RPM_PO" map="t"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Tq_SwoR" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_RPM_PI" map="v"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PO_Timestamp" map="w"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PUSDrHL" map="x"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Tn_PO" map="y"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PUSDeltaP" map="z"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_RPM_SwoR" map="ab"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Tn_PI" map="bb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_TqSS_SwoR" map="cb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_DBTM_PO" map="db"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="$VALUES" map="eb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_TqSS_PO" map="fb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_DBTM_PI" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Slide_Reference_Timestamp" map="hb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_TqSS_PI" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Tq_PO" map="jb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PUSDeltaTq" map="kb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Tq_PI" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SOSDeltaTq" map="mb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_HL_PO" map="nb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PI_Timestamp" map="ob"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_HL_PI" map="pb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_Tn_SwoR" map="qb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_PUSDeltaTqSS" map="rb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="TRIP_SOSDeltaTqSS" map="sb"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables" name="com.sigmastream.pr.common.BCFrictionTestTripSlideVariables[] values()" map="values"/>
  <class name="com.sigmastream.pr.common.FTConfigs" map="hb"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="tripSlackoffSlideConfig" map="b"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="stationaryRotaryConfig" map="c"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="pickupRotaryConfig" map="d"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="tripSlackoffRotaryConfig" map="e"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="stationarySlideConfig" map="f"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="tripStationarySlideConfig" map="g"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="pickupSlideConfig" map="h"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="rotaryDrillingConfig" map="i"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="tripStationaryRotaryConfig" map="j"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="slackoffSlideConfig" map="k"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="tripPickupSlideConfig" map="l"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="_log" map="m"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="slackoffRotaryConfig" map="n"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="tripPickupRotaryConfig" map="o"/>
  <field class="com.sigmastream.pr.common.FTConfigs" name="slideDrillingConfig" map="p"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getTripPickupRotaryConfig()" map="b"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getPickupRotaryConfig()" map="c"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getTripSlackoffSlideConfig()" map="d"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getSlideDrillingConfig()" map="e"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getPickupSlideConfig()" map="f"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getSlackoffRotaryConfig()" map="g"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="void processConfigs(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getRotaryDrillingConfig()" map="h"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getTripPickupSlideConfig()" map="i"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getTripStationaryRotaryConfig()" map="j"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getStationaryRotaryConfig()" map="k"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getTripSlackoffRotaryConfig()" map="l"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getSlackoffSlideConfig()" map="m"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getStationarySlideConfig()" map="n"/>
  <method class="com.sigmastream.pr.common.FTConfigs" name="com.sigmastream.pr.common.FTEventConfig getTripStationarySlideConfig()" map="o"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODeltaTq" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDBTM" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="DVER_SO_OnB" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="TnSS_SO_OnB" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="Tn_SO_OnB" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_Tq" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SPP_RV" map="h"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="rotaryName" map="i"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_Tn" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDrTnSS" map="k"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDrTn" map="l"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="DBTM_RV" map="m"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="TqSS_RV" map="n"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="Reference_Timestamp" map="o"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODBTM" map="p"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDeltaTq" map="q"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SPP_SO_OnB" map="r"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SORPM" map="s"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="HL_SO_OnB" map="t"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="Tq_SO_OnB" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDeltaP" map="v"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODrTnSS" map="w"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODrTn" map="x"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="RPM_RV" map="y"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_Tq" map="z"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_HL" map="ab"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_TqSS" map="bb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_Tn" map="cb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDrHL" map="db"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_SPP" map="eb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_Timestamp" map="fb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="Tn_RV" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDeltaTqSS" map="hb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_TqSS" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_Timestamp" map="jb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="Drilling_Timestamp" map="kb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODeltaP" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODeltaTqSS" map="mb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PURPM" map="nb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PUDVER" map="ob"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODrHL" map="pb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="$VALUES" map="qb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_SPP" map="rb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="DVER_RV" map="sb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="TnSS_RV" map="tb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_HL" map="ub"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="TqSS_SO_OnB" map="vb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="Tq_RV" map="wb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SO_TnSS" map="xb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="SODVER" map="yb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="slideName" map="zb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="HL_RV" map="ac"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="RPM_SO_OnB" map="bc"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="PU_TnSS" map="cc"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="DBTM_SO_OnB" map="dc"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="commonName" map="ec"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables canTypeAndSlideOrRotaryContain(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestSlideVariables getSlideName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestRotaryVariables getRotaryName()" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables canCommonNameContain(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="boolean isEqual(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables canRotaryNameContain(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables canSlideNameContain(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestCommonMappingVariables" name="com.sigmastream.pr.common.BCFrictionTestCommonVariables getCommonName()" map="d"/>
  <class name="com.sigmastream.pr.common.FTEvents" map="jb"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_RD_START" map="b"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_ST_SWOR_END" map="c"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="code" map="d"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_SD_START" map="e"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_ST_SWOR_END" map="f"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_SO_SWR_START" map="g"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_PU_SWOR_START" map="h"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_ST_SWR_START" map="i"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_PU_SWR_START" map="j"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_ST_SWR_END" map="k"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_ST_SWR_END" map="l"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_PU_SWOR_END" map="m"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_SWR_END" map="n"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_ST_SWOR_START" map="o"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_SO_SWR_END" map="p"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_RD_END" map="q"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_ST_SWR_START" map="r"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_SO_SWOR_END" map="s"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_SO_SWOR_START" map="t"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_SD_END" map="u"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_PU_SWR_END" map="v"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_PU_SWR_END" map="w"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_SWR_START" map="x"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="$VALUES" map="y"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_ST_SWOR_START" map="z"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_NOTEST" map="ab"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_PU_SWR_START" map="bb"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_PU_SWOR_START" map="cb"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_TRIP_PU_SWOR_END" map="db"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_SWOR_START" map="eb"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="name" map="fb"/>
  <field class="com.sigmastream.pr.common.FTEvents" name="FT_SO_SWOR_END" map="gb"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="com.sigmastream.pr.common.FTEvents[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="com.sigmastream.pr.common.FTEvents canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="com.sigmastream.pr.common.FTEvents canContainByCode(int)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="int getCode()" map="c"/>
  <method class="com.sigmastream.pr.common.FTEvents" name="com.sigmastream.pr.common.FTEvents valueOf(java.lang.String)" map="valueOf"/>
  <class name="com.sigmastream.pr.common.BCAggregations" map="kb"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="average" map="b"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="regression" map="c"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="maximum" map="d"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="$VALUES" map="e"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="first" map="f"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="count" map="g"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="addition" map="h"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="slope" map="i"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="aggregateType" map="j"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="minimum" map="k"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="last" map="l"/>
  <field class="com.sigmastream.pr.common.BCAggregations" name="middle" map="m"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByType$0(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="com.sigmastream.pr.beans.DataPayload aggregateByTypeWithName(java.lang.String, java.lang.String, java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="com.sigmastream.pr.common.BCAggregations[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByType$3(com.sigmastream.pr.beans.DataPayload)" map="c"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="boolean canNameContains(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="java.util.List aggregateByType(java.lang.String, java.lang.String, java.util.List)" map="c"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByTypeWithName$6(com.sigmastream.pr.beans.DataPayload)" map="d"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByTypeWithName$9(com.sigmastream.pr.beans.DataPayload)" map="e"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByType$2(com.sigmastream.pr.beans.DataPayload)" map="f"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByTypeWithName$5(com.sigmastream.pr.beans.DataPayload)" map="g"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByTypeWithName$8(com.sigmastream.pr.beans.DataPayload)" map="h"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByType$1(com.sigmastream.pr.beans.DataPayload)" map="i"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="com.sigmastream.pr.common.BCAggregations valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByType$4(com.sigmastream.pr.beans.DataPayload)" map="j"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="java.lang.String getAggregateType()" map="b"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="com.sigmastream.pr.common.BCAggregations findAggregationByName(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="double lambda$aggregateByTypeWithName$7(com.sigmastream.pr.beans.DataPayload)" map="k"/>
  <method class="com.sigmastream.pr.common.BCAggregations" name="boolean isEqual(java.lang.String)" map="d"/>
  <class name="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="HL_SwR" map="b"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="PURDrHL" map="c"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SPP_FR" map="d"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="RPM_SwR" map="e"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="HL_BR" map="f"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tq_SwR" map="g"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SORDeltaTqSS" map="h"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DBTM_FR" map="i"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="PURDeltaTqSS" map="j"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="RD_Timestamp" map="k"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TqSS_FR" map="l"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TqSS_FR_OnB" map="m"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="name" map="n"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SPP_SwR" map="o"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="RPM_FR_OnB" map="p"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="RPM_FR" map="q"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SPP_BR" map="r"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DVER_SwR" map="s"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DBTM_FR_OnB" map="t"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SORDrTnSS" map="u"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DBTM_SwR" map="v"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tn_FR" map="w"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DBTM_BR" map="x"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TqSS_BR" map="y"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DVER_FR_OnB" map="z"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TnSS_FR_OnB" map="ab"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tn_FR_OnB" map="bb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SORDeltaP" map="cb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="PURDrTnSS" map="db"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DVER_FR" map="eb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TnSS_FR" map="fb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="RPM_BR" map="gb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TnSS_SwR" map="hb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="$VALUES" map="ib"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="BR_Timestamp" map="jb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TqSS_SwR" map="kb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SORDrTn" map="lb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tq_FR" map="mb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SPP_FR_OnB" map="nb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tn_BR" map="ob"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="PURDeltaTq" map="pb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="PURDrTn" map="qb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="HL_FR" map="rb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="PURDeltaP" map="sb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="FR_Timestamp" map="tb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="HL_FR_OnB" map="ub"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tq_FR_OnB" map="vb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SORDeltaTq" map="wb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Rotary_Reference_Timestamp" map="xb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="DVER_BR" map="yb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tn_SwR" map="zb"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="TnSS_BR" map="ac"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="SORDrHL" map="bc"/>
  <field class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="Tq_BR" map="cc"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="boolean isEqual(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="com.sigmastream.pr.common.BCFrictionTestRotaryVariables[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="com.sigmastream.pr.common.BCFrictionTestRotaryVariables canContain(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="java.lang.String getName()" map="b"/>
  <method class="com.sigmastream.pr.common.BCFrictionTestRotaryVariables" name="com.sigmastream.pr.common.BCFrictionTestRotaryVariables valueOf(java.lang.String)" map="valueOf"/>
  <class name="com.sigmastream.pr.common.YhChannelConfig" map="mb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="NOVOS_Status" map="b"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TripOutSpeed" map="c"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="flowInThreshold" map="d"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_downward_rotary_WOB" map="e"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_StandMetaData" map="f"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_StandNo" map="g"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BlockHeightDecreasing" map="h"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="PickingUpStartHoleDepth" map="i"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="bitDepthThreshold" map="j"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="bitDepth" map="k"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_PumpOn" map="l"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="NOVOS_Activity" map="m"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_HKLD" map="n"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="RPMThreshold" map="o"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="RawSequenceId" map="p"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="mnemonicUoMMap" map="q"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_Rotary_Torque" map="r"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_HB_RigState" map="s"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="contextual" map="t"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="slideAsistsRPMMomentThresold" map="u"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_Rotary_StandPipePressure" map="v"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_OpenHoleEventTimestamp" map="w"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="delta_torque" map="x"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="hookLoad" map="y"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_PickUpWeight" map="z"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="totalChannelASWI" map="ab"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Well_Drilling_Eff" map="bb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="casedbitDepth" map="cb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Current_Operational_Events" map="db"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Connection_Hkld_End" map="eb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_MD" map="fb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_HookLoadIncreasing" map="gb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Operational_Events" map="hb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TripOut" map="ib"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="rigState" map="jb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_HookLoadStationary" map="kb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_SlackOffTorque" map="lb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="wob" map="mb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_isInsideCase" map="nb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="delta_RPM" map="ob"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BreakingDownEndHoleDepth" map="pb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="rotary_WOB" map="qb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="_range_check_status" map="rb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SS_Indicator" map="sb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="bitVelocity" map="tb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Rotary_Torque_Accm" map="ub"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="FTHookLoadState" map="vb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Connection_Hkld_Start" map="wb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_ConnectionEvent" map="xb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="CONSTANT_KEY" map="yb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_Depth" map="zb"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TrippingEvent" map="ac"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Stationary" map="bc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TrippingEventCorrection" map="cc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotationStart" map="dc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Stand_Detected" map="ec"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotaryRpm" map="fc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="MakingUpEndBitDepth" map="gc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_EndTime" map="hc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="rotaryTorque" map="ic"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_PickUpStart" map="jc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="MakingUpStartBitDepth" map="kc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RPM" map="lc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_FrictionTestActivity" map="mc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="UNITLESS" map="nc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_PickUpTorque" map="oc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="casedholeDepth" map="pc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TrippingEventTimestamp" map="qc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_downward_WOB" map="rc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="DateTime" map="sc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="deviceNameFeedIdMap" map="tc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="depthCorrectionThreshold" map="uc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="totalFlowIn" map="vc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BreakingDownEndBitDepth" map="wc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="blockHeightThreshold" map="xc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="MakingUpStartHoleDepth" map="yc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Pump1_On_Accm_Time" map="zc"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="totalSPM" map="ad"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BitDepthDecreasing" map="bd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BlockSpeedDecreasing" map="cd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="VA_DHO_BIT_SPEED" map="dd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BlockHeightIncreasing" map="ed"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_DEEP_RigState" map="fd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_downward_slide_WOB" map="gd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_HoleDepthIncreasing" map="hd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_FrictionTestEnd" map="id"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="yhtime" map="jd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BreakingDownStartBitDepth" map="kd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_OffBottom" map="ld"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="bitWeight" map="md"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BlockHeightStationary" map="nd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_NoDataAvailable" map="od"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_HoleDepthStationary" map="pd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="blockHeight" map="qd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BackReaming" map="rd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Pump1_Status" map="sd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotatingIn" map="td"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="staleValueMonitoring" map="ud"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_Torque" map="vd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Timestamp" map="wd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Connection_Hkld_Delta" map="xd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_SlackOffStart" map="yd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="wellASWI" map="zd"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_PumpIn" map="ae"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_X1_RPM" map="be"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="datacount" map="ce"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="delta_FlowRate" map="de"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TripIn" map="ee"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Circulate" map="fe"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="atSurfaceMomentThreshold" map="ge"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="rotaryRPM" map="he"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="MakingUpTorque" map="ie"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_ConnectionEventTimestamp" map="je"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="tension" map="ke"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="VA_SPEED_MEASURED" map="le"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotatingOut" map="me"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_DrillingRotary" map="ne"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="PreviousBlockLoad" map="oe"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_StatisticType" map="pe"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="pumpSpm3" map="qe"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="mnemonicChannelIdMap" map="re"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="pumpSpm2" map="se"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BreakingDownTorque" map="te"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="pumpSpm1" map="ue"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Unknown" map="ve"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="postfix_dysfuntion" map="we"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="slide_WOB" map="xe"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_HookLoadDelta" map="ye"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotationWeight" map="ze"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="delta_StandPipePressure" map="af"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_rpm" map="bf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="ROP" map="cf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_MSE" map="df"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Operational_Event_Variable_Timestamp" map="ef"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BlockLoad" map="ff"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="blockSpeed" map="gf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_StandInsert" map="hf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_TorqueDelta" map="if"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="atSurfaceDurationThreshold" map="jf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="PickingUpEndHoleDepth" map="kf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotateAndCirculate" map="lf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_FlowRate" map="mf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="PickingUpEndBitDepth" map="nf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="rigInfo" map="of"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="pumpPressure" map="pf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_AboutToTagBottom" map="qf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="correlation" map="rf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="rules" map="sf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_Torque" map="tf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_StandRemove" map="uf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Rig_Activity" map="vf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Pump2_Status" map="wf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Inslips" map="xf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_OpenHoleEvent" map="yf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Reaming" map="zf"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="EDR_Corrected_WOB" map="ag"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_PumpOut" map="bg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_OutOfHole" map="cg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="channelIdUriMap" map="dg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BitDepthIncreasing" map="eg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BlockSpeedIncreasing" map="fg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="ROTATIONAL_VELOCITYRPM" map="gg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="PickingUpStartBitDepth" map="hg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SPS_HKLD" map="ig"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="tensionSurfaceSub" map="jg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BitDepthStationary" map="kg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Operational_Event_Variable" map="lg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BitDepthOff" map="mg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_RotationTorque" map="ng"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BlockSpeedStationary" map="og"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_X1_Acceleration_Z" map="pg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_X1_Acceleration_Y" map="qg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_WOB" map="rg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_X1_Acceleration_X" map="sg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_TripInSpeed" map="tg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Pump_Pressure_Accm" map="ug"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Pump2_On_Accm_Time" map="vg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="holeDepth" map="wg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_MeasurementType" map="xg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Bit_Depth_Increase_Accm_Time" map="yg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BreakingDownStartHoleDepth" map="zg"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_SlackOffWeight" map="ah"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Undefined" map="bh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Rotating" map="ch"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_StandCount" map="dh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_FrictionTestStart" map="eh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_StandPipePressure" map="fh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_HKLD" map="gh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="TD_Startime" map="hh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="torqueSurfaceSub" map="ih"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_RPM" map="jh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="SP_Rotary_HKLD" map="kh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="channelIdMnemonicMap" map="lh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_Bit_Depth_Decrease_Accm_Time" map="mh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="MakingUpEndHoleDepth" map="nh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="postfix_FFT" map="oh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_BitDepthGreaterThanEqualHoleDepth" map="ph"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="logNameFeedIdMap" map="qh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="BC_SlideDrilling" map="rh"/>
  <field class="com.sigmastream.pr.common.YhChannelConfig" name="channelIdFreqMap" map="sh"/>
  <class name="com.sigmastream.pr.common.FTEventPayloadManager" map="nb"/>
  <field class="com.sigmastream.pr.common.FTEventPayloadManager" name="preservedEvent" map="b"/>
  <field class="com.sigmastream.pr.common.FTEventPayloadManager" name="eventConfig" map="c"/>
  <field class="com.sigmastream.pr.common.FTEventPayloadManager" name="dataPayload" map="d"/>
  <field class="com.sigmastream.pr.common.FTEventPayloadManager" name="_log" map="e"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="boolean shiftWindowPayloads(java.lang.String, long)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="boolean lambda$getLastAggregateProcessPayload$0(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="com.sigmastream.pr.common.FTEventPayloadManager updatePayload(com.sigmastream.pr.common.FTEventPayloadManager, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.FTEventConfig)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="boolean isEventChange(com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="java.util.Map getLastAggregateProcessPayload()" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="java.util.Map process(java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.FTEventPayloadManager" name="com.sigmastream.pr.common.OperationalEvents getPreservedEvent()" map="c"/>
  <class name="com.sigmastream.pr.common.StateType" map="ob"/>
  <field class="com.sigmastream.pr.common.StateType" name="$VALUES" map="b"/>
  <field class="com.sigmastream.pr.common.StateType" name="UNKNOWN" map="c"/>
  <field class="com.sigmastream.pr.common.StateType" name="code" map="d"/>
  <field class="com.sigmastream.pr.common.StateType" name="state" map="e"/>
  <field class="com.sigmastream.pr.common.StateType" name="VOID" map="f"/>
  <field class="com.sigmastream.pr.common.StateType" name="CONFIRM" map="g"/>
  <field class="com.sigmastream.pr.common.StateType" name="PROBABLE" map="h"/>
  <field class="com.sigmastream.pr.common.StateType" name="POSSIBLE" map="i"/>
  <method class="com.sigmastream.pr.common.StateType" name="java.lang.String getState()" map="b"/>
  <method class="com.sigmastream.pr.common.StateType" name="com.sigmastream.pr.common.StateType canContain(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.StateType" name="com.sigmastream.pr.common.StateType canContainByCode(int)" map="b"/>
  <method class="com.sigmastream.pr.common.StateType" name="com.sigmastream.pr.common.StateType[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.StateType" name="boolean equals(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.StateType" name="com.sigmastream.pr.common.StateType valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.StateType" name="int getCode()" map="c"/>
  <class name="com.sigmastream.pr.common.CorrectFrictionTestEvent" map="pb"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="hookLoadAcceptedDelta" map="b"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="drillingEvent" map="c"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="slideDrillingSlackoffValue" map="d"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="slideOffBottomValue" map="e"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="rotaryOffBottomValue" map="f"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="ftEventTimestamp" map="g"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="tripSlideOffBottomValue" map="h"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="tripRotaryOffBottomValue" map="i"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="ftEvent" map="j"/>
  <field class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="rotaryDrillingSlackoffValue" map="k"/>
  <method class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="java.util.Map getLastFTCalculatedValues(long, java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.common.CorrectFrictionTestEvent" name="java.util.Map process(long, double, long, java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.common.BCWellOECorrection" map="qb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="abnormalConnections" map="b"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="smallOECorrect" map="c"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="rotaryDrillingRPM" map="d"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="errorRotaryRPM" map="e"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="unknownEventCorrectionP" map="f"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="correctionPrevEvent" map="g"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="timestampCorrect" map="h"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="errorFlowIn" map="i"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="prevTimeStampPayload" map="j"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="delayedPayloads" map="k"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="prevPayload" map="l"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="measuredRotaryDrillingRPM" map="m"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrection" name="slideDrillingRPM" map="n"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleRotatingOut(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleTripIn(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="c"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleRotatingIn(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="d"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleBackReaming(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="e"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleTripOut(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="f"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="java.util.List correctOperationalEvents(com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleReaming(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="g"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handlePumpIn(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="h"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handleRotaryDrilling(double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="void handlePumpOut(double, double, double, double, com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.TimestampedEntry, java.util.ArrayList)" map="i"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrection" name="java.util.List handleDuplicateTimeStamp(java.util.List)" map="b"/>
  <class name="com.sigmastream.pr.common.YHURI" map="rb"/>
  <field class="com.sigmastream.pr.common.YHURI" name="log" map="b"/>
  <field class="com.sigmastream.pr.common.YHURI" name="WL" map="c"/>
  <field class="com.sigmastream.pr.common.YHURI" name="DEL" map="d"/>
  <field class="com.sigmastream.pr.common.YHURI" name="LG" map="e"/>
  <field class="com.sigmastream.pr.common.YHURI" name="CLS" map="f"/>
  <field class="com.sigmastream.pr.common.YHURI" name="wellbore" map="g"/>
  <field class="com.sigmastream.pr.common.YHURI" name="well" map="h"/>
  <field class="com.sigmastream.pr.common.YHURI" name="mnemonic" map="i"/>
  <field class="com.sigmastream.pr.common.YHURI" name="MN" map="j"/>
  <field class="com.sigmastream.pr.common.YHURI" name="WB" map="k"/>
  <field class="com.sigmastream.pr.common.YHURI" name="OPN" map="l"/>
  <method class="com.sigmastream.pr.common.YHURI" name="java.lang.String getWell()" map="b"/>
  <method class="com.sigmastream.pr.common.YHURI" name="void setLog(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.YHURI" name="java.lang.String getMnemonic()" map="c"/>
  <method class="com.sigmastream.pr.common.YHURI" name="void setWell(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.YHURI" name="void setWellbore(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.common.YHURI" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.pr.common.YHURI" name="java.lang.String getLog()" map="d"/>
  <method class="com.sigmastream.pr.common.YHURI" name="void setMnemonic(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.common.YHURI" name="java.lang.String getUri()" map="e"/>
  <method class="com.sigmastream.pr.common.YHURI" name="java.lang.String getWellbore()" map="f"/>
  <class name="com.sigmastream.pr.common.BCConstants" map="sb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_trip_stationary_rotary_config" map="b"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_stationary_slide_config" map="c"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_rotary_drilling_config" map="d"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_Backfill_Pending" map="e"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="Stationary" map="f"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="RDBMS_POSTGRESQL" map="g"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_slope_aggregation" map="h"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_category" map="i"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="SO" map="j"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_LAS" map="k"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_count_aggregation" map="l"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_LastKnownValues" map="m"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_pickup_rotary_config" map="n"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_threashold_value" map="o"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_slide_drilling_config" map="p"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_Cache" map="q"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_first_aggregation" map="r"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_config_status" map="s"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_is_friction_test_hookload_state_enable" map="t"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="decimal" map="u"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_type_of_aggregation" map="v"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_last_aggregation" map="w"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_stationary_rotary_config" map="x"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_deviceQualityMonitor" map="y"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_mnemonic" map="z"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_ROTARY" map="ab"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_min_aggregation" map="bb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_slope_aggregation" map="cb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_trip_stationary_slide_config" map="db"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_channelQualityMonitor" map="eb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_output_device_streams" map="fb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_last_aggregation" map="gb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_middle_aggregation" map="hb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_middle_aggregation" map="ib"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_SLIDE" map="jb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_BC_ONBOTTOM" map="kb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_stale_hookload_val_diff" map="lb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_raw" map="mb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_default_value" map="nb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_range_minimum_value" map="ob"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_freq" map="pb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_sum_aggregation" map="qb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_preserved_output_data_streams" map="rb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_AppData" map="sb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="TS_ENTRYKEY_SINK" map="tb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_CacheHistroy" map="ub"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_max_aggregation" map="vb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_pickup_slide_config" map="wb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_range_maximum_value" map="xb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_event_correction_configs" map="yb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="Rotating" map="zb"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_friction_test_config" map="ac"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_null_value" map="bc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="PU" map="cc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_backup_window_time" map="dc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="Drilling" map="ec"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_trip_pickup_slide_config" map="fc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_slackoff_slide_config" map="gc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_avg_aggregation" map="hc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_DataStreams" map="ic"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="PU_Rotating" map="jc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_trip_slackoff_slide_config" map="kc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_diffrence_time" map="lc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_count_aggregation" map="mc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="SO_Rotating" map="nc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="RDBMS_SQLITE" map="oc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="Drilling_Rotating" map="pc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_wellQualityMonitor" map="qc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_input_data_streams" map="rc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_datatype" map="sc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_BC_OFFBOTTOM" map="tc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_UNITLESS" map="uc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_config_status_enable" map="vc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_uom" map="wc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_first_aggregation" map="xc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_DataStreamsConfig" map="yc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_slackoff_rotary_config" map="zc"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_output_data_streams" map="ad"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_null_values" map="bd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_last_known_value" map="cd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_tag_num" map="dd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_sum_aggregation" map="ed"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_trip_pickup_rotary_config" map="fd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_trip_slackoff_rotary_config" map="gd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_max_aggregation" map="hd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_config_status_disabled" map="id"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_input_error_values" map="jd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_data_stream_sufix_min_aggregation" map="kd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_is_hookload_based" map="ld"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_small_event_configs" map="md"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_no_aggregation" map="nd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_Backfill_Complete" map="od"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_val_avg_aggregation" map="pd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_config_key_velocity_config" map="qd"/>
  <field class="com.sigmastream.pr.common.BCConstants" name="_Result" map="rd"/>
  <class name="com.sigmastream.pr.common.BCRawData" map="tb"/>
  <field class="com.sigmastream.pr.common.BCRawData" name="torque" map="b"/>
  <field class="com.sigmastream.pr.common.BCRawData" name="hookload" map="c"/>
  <field class="com.sigmastream.pr.common.BCRawData" name="bitdepth" map="d"/>
  <field class="com.sigmastream.pr.common.BCRawData" name="flowIn" map="e"/>
  <field class="com.sigmastream.pr.common.BCRawData" name="timestamp" map="f"/>
  <field class="com.sigmastream.pr.common.BCRawData" name="rpm" map="g"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.Double getRpm()" map="b"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="void setBitdepth(java.lang.Double)" map="b"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="void setRpm(java.lang.Double)" map="c"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="int compareTo(com.sigmastream.pr.common.BCRawData)" map="b"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.Double getFlowIn()" map="c"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.Double getTorque()" map="d"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="void setTorque(java.lang.Double)" map="d"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="void setFlowIn(java.lang.Double)" map="e"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.Double getHookload()" map="e"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="void setTimestamp(java.lang.Long)" map="b"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="void setHookload(java.lang.Double)" map="f"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.String toString()" map="toString"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.Long getTimestamp()" map="f"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="int compareTo(java.lang.Object)" map="compareTo"/>
  <method class="com.sigmastream.pr.common.BCRawData" name="java.lang.Double getBitdepth()" map="g"/>
  <class name="com.sigmastream.pr.common.BCSmallOECorrectionNew" map="ub"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="payloadDao" map="b"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="lastSmallOECorrectionEmittedTime" map="c"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="confirmEventTime" map="d"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="con" map="e"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="rigID" map="f"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="slopeDataStreams" map="g"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="_log" map="h"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="inputDataStreamsConfig" map="i"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="smallEventConfigDuration" map="j"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="isDelayedPayloads" map="k"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="preSmallOECorrection" map="l"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="delayedConfirmEvent" map="m"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="firstDelayPayload" map="n"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="avgDataStreams" map="o"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="wellOEUtils" map="p"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="prevEvent" map="q"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="prePayload" map="r"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="delayedPayloads" map="s"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="initPreviosState" map="t"/>
  <field class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="SQl_FOR_INSERT_STATE" map="u"/>
  <method class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="void InitPreviosState()" map="b"/>
  <method class="com.sigmastream.pr.common.BCSmallOECorrectionNew" name="java.util.List process(java.util.List)" map="b"/>
  <class name="com.sigmastream.pr.common.BCWellOECorrectionNew$1" map="1"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew$1" name="$SwitchMap$com$sigmastream$pr$common$OperationalEvents$OEGroupType" map="b"/>
  <class name="com.sigmastream.pr.common.BCWellOECorrectionNew" map="vb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="smallOECorrect" map="b"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="lastOECorrectionEmittedTime" map="c"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="detectOnBottomConnection" map="d"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="prevConfirmEvent" map="e"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="con" map="f"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="SQL_FOR_REMOVE_CONFIRMEVENT" map="g"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="_log" map="h"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="eventsCorrectionConfigs" map="i"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="isDelayedDrillingPayloads" map="j"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="unknownEventCorrectionP" map="k"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="windowLength" map="l"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="confirmDelayedPayloads" map="m"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="prevEventTimestamp" map="n"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="lastPayload" map="o"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="pumpInDepth" map="p"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="SQL_FOR_UPDATE_LASTEMITTIME" map="q"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="backreamingDepth" map="r"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="payloadDao" map="s"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="SQL_FOR_INSERT_EVENT" map="t"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="rigID" map="u"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="prevTimeStampPayload" map="v"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="drillingBlockHeight" map="w"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="freq" map="x"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="rotatingInDepth" map="y"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="prevEvent" map="z"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="SQL_FOR_INSERT_CONFIRMEVENT" map="ab"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="pumpoutDepth" map="bb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="tripoutDepth" map="cb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="inslipBlockHeight" map="db"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="isConfirmBOEDelay" map="eb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="curEvent" map="fb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="jobConfiguration" map="gb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="reamingDepth" map="hb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="depthCorrectionThreshold" map="ib"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="previousPayload" map="jb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="tripInDepth" map="kb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="prevDepthCorrection" map="lb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="errorValues" map="mb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="noDataAvailableGapInterval" map="nb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="prevPayload" map="ob"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="isDelayedPayloads" map="pb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="eventMoment" map="qb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="resultPayload" map="rb"/>
  <field class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="rotatingoutDepth" map="sb"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="double getValueDelta(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="java.util.List process(com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void addDelayedPLtoResult(com.sigmastream.pr.common.TimestampedEntry)" map="c"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="java.util.List getRemainingDlPl()" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void persistEvent(long, int, com.sigmastream.pr.common.TimestampedEntry)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void close()" map="close"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void insertDataIntoCassandra(java.lang.String, long, int)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="boolean isEventBelongsToGroup(com.sigmastream.pr.common.OperationalEvents, com.sigmastream.pr.common.OperationalEvents$OEGroupType)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void updateOrRemoveValue(java.lang.String, long)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void getValueFromDB(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void clearData(com.sigmastream.pr.common.OperationalEvents)" map="b"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="java.util.List correctOperationalEvents(com.sigmastream.pr.common.TimestampedEntry)" map="d"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="void verifyBOE()" map="c"/>
  <method class="com.sigmastream.pr.common.BCWellOECorrectionNew" name="java.util.List handleDuplicateTimeStamp(java.util.List)" map="c"/>
  <class name="com.sigmastream.pr.common.BCConfigurationConstants" map="wb"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="CASING_CONFIRM_COUNT" map="b"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="STAND_CONFIG" map="c"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="CONDITIONING_DEPTH_DELTA" map="d"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="TRIP_DETECTOR_P_CONFIG" map="e"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="CASING_THRESHOLD_TO" map="f"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="MACRO_EVENT_VOID_DELTA" map="g"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="N_STAND" map="h"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="TRIP_OUT_DEPTH_DELTA" map="i"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="DRILLING_CONFIRM_DEPTH" map="j"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="DRILLING_DEPTH_DELTA" map="k"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="TRIP_IN_DEPTH_DELTA" map="l"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="LINER_CONFIRM_COUNT" map="m"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="ACCEPTABLE_ACCURACY" map="n"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="CEMENTING_CONFIRM_TIME" map="o"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="N_BACKWARD_FORWARD_REAMING" map="p"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="EVENT_ACCURACY_VALUE" map="q"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="MACRO_EVENT_THRESHOLD" map="r"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="ACCEPTABLE_TUBING_ACCURACY" map="s"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="CASING_THRESHOLD_FROM" map="t"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="TD_SMALL_OE_AVOID" map="u"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="TD_POINT_DELTA" map="v"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="TORQUE_AND_DRAG_CONFIG" map="w"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="_30FT_TRIP_ON_THRESHOLD_TO" map="x"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="STATIONARY_DEPTH_DELTA" map="y"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="STATIONARY_CONFIRM_TIME" map="z"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="_30FT_TRIP_ON_THRESHOLD_FROM" map="ab"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="DRILLING_CONFIRM_TIME" map="bb"/>
  <field class="com.sigmastream.pr.common.BCConfigurationConstants" name="_90FT_TRIP_ON_THRESHOLD_FROM" map="cb"/>
  <class name="com.sigmastream.pr.common.OperationalEvents$OEGroupType" map="_b"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="StationaryEvt" map="b"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="code" map="c"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="ConditioningEvt" map="d"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="$VALUES" map="e"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="TrippingInEvt" map="f"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="TrippingEvt" map="g"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="UNKNOWN" map="h"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="evt" map="i"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="TrippingOutEvt" map="j"/>
  <field class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="DrillingEVT" map="k"/>
  <method class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="com.sigmastream.pr.common.OperationalEvents$OEGroupType[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="java.lang.String getEvt()" map="b"/>
  <method class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="com.sigmastream.pr.common.OperationalEvents$OEGroupType valueOf(java.lang.String)" map="valueOf"/>
  <method class="com.sigmastream.pr.common.OperationalEvents$OEGroupType" name="int getCode()" map="c"/>
  <class name="com.sigmastream.pr.common.OperationalEvents" map="xb"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Stationary" map="b"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="timestamp" map="c"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_PumpIn" map="d"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Reaming" map="e"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_RotatingOut" map="f"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_BackReaming" map="g"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_TripIn" map="h"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="state" map="i"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_RotatingIn" map="j"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_RotateAndCirculate" map="k"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_TripOut" map="l"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_OutOfHole" map="m"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_DepthCorrection" map="n"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_RotaryDrilling" map="o"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_NoDataAvailable" map="p"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Undefined" map="q"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_SlideDrilling" map="r"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Unknown" map="s"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Rotating" map="t"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Inslips" map="u"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="$VALUES" map="v"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_SlideAssist" map="w"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_Circulate" map="x"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="BC_PumpOut" map="y"/>
  <field class="com.sigmastream.pr.common.OperationalEvents" name="name" map="z"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="com.sigmastream.pr.common.OperationalEvents canContainName(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="int getState()" map="b"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="com.sigmastream.pr.common.OperationalEvents[] values()" map="values"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="int getStateByName(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="java.lang.String getName()" map="c"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="boolean isEqual(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="boolean isContainName(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="long getTimestamp()" map="d"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="java.lang.String getNameByState(int)" map="b"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="com.sigmastream.pr.common.OperationalEvents canContainState(int)" map="c"/>
  <method class="com.sigmastream.pr.common.OperationalEvents" name="com.sigmastream.pr.common.OperationalEvents valueOf(java.lang.String)" map="valueOf"/>
  <class name="com.sigmastream.pr.common.BCConnectionSubEventManager" map="yb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevBreakingDownEndBitDepth" map="b"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevBreakingDownStart" map="c"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="pickupStable" map="d"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevMakingUpEndBitDepth" map="e"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevPickUpEnd" map="f"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempBreakingDownStart" map="g"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempBreakingDownEnd" map="h"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevBreakingDownEndHoleDepth" map="i"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempMakingUpEnd" map="j"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevMakingUpStartBitDepth" map="k"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempMakingUpEndHoleDepth" map="l"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevBreakingDownStartHoleDepth" map="m"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="torqueSubEventThresold" map="n"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevPickUpEndBitDepth" map="o"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="breakingDownStable" map="p"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevMakingUpEndHoleDepth" map="q"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempPickUpEndBitDepth" map="r"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempPickUpEnd" map="s"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="pickupDetected" map="t"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevBreakingDownStartBitDepth" map="u"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevPickUpEndHoleDepth" map="v"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempMakingUpStartBitDepth" map="w"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempBreakingDownStartHoleDepth" map="x"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempPickUpStartHoleDepth" map="y"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempMakingUpStart" map="z"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevPickUpStart" map="ab"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="blockPositionSubEventThresold" map="bb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempPickUpStartBitDepth" map="cb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevPickUpStartHoleDepth" map="db"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevMakingUpStart" map="eb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempPickUpEndHoleDepth" map="fb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevBreakingDownEnd" map="gb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempMakingUpStartHoleDepth" map="hb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempBreakingDownStartBitDepth" map="ib"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevPickUpStartBitDepth" map="jb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevMakingUpEnd" map="kb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempBreakingDownEndHoleDepth" map="lb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempBreakingDownEndBitDepth" map="mb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempMakingUpEndBitDepth" map="nb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevMakingUpStartHoleDepth" map="ob"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="makingUpStable" map="pb"/>
  <field class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="prevTempPickUpStart" map="qb"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="void processPickupSubEventPayloads(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="java.util.Map process(java.util.Map, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="java.util.Map getResultDataPayload(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="boolean lambda$getPayload$0(java.util.Map$Entry)" map="b"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="void processBreakingAndMakingSubEventPayloads(com.sigmastream.pr.beans.DataPayload, com.sigmastream.pr.beans.DataPayload, java.util.Map)" map="c"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="com.sigmastream.pr.common.TimestampedEntry getPayload(java.util.List, java.lang.Double, java.util.Map)" map="b"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="com.sigmastream.pr.beans.DataPayload lambda$getPayload$1(java.util.Map$Entry)" map="c"/>
  <method class="com.sigmastream.pr.common.BCConnectionSubEventManager" name="java.util.Map getAggregatePayloads(java.util.Map)" map="b"/>
  <package name="com.sigmastream.pr.mqtt" map="d"/>
  <class name="com.sigmastream.pr.mqtt.MqttConnectionManager" map="b"/>
  <field class="com.sigmastream.pr.mqtt.MqttConnectionManager" name="mqttInstance" map="b"/>
  <field class="com.sigmastream.pr.mqtt.MqttConnectionManager" name="mqttMap" map="c"/>
  <method class="com.sigmastream.pr.mqtt.MqttConnectionManager" name="com.sigmastream.pr.mqtt.MqttConnectionManager getInstance()" map="b"/>
  <method class="com.sigmastream.pr.mqtt.MqttConnectionManager" name="com.sigmastream.pr.mqtt.MQTTPublisher setup(java.util.Map)" map="b"/>
  <class name="com.sigmastream.pr.mqtt.MQTTSubscriber" map="c"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="clientId" map="b"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="yhClient" map="c"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="ssl" map="d"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="cleanSession" map="e"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="topic" map="f"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="_remoteIp" map="g"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="_remotePort" map="h"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="_log" map="i"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="maxInflight" map="j"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="gson" map="k"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="brokerType" map="l"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="userName" map="m"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="connectionTimeout" map="n"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="assetid" map="o"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="password" map="p"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="autoReconnect" map="q"/>
  <field class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="qos" map="r"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="void readData()" map="b"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="void deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)" map="deliveryComplete"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="void stop()" map="c"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="boolean isStopped()" map="d"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="void connectionLost(java.lang.Throwable)" map="connectionLost"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="void messageArrived(java.lang.String, org.eclipse.paho.client.mqttv3.MqttMessage)" map="messageArrived"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="java.util.Map getContext()" map="e"/>
  <method class="com.sigmastream.pr.mqtt.MQTTSubscriber" name="boolean connect()" map="f"/>
  <class name="com.sigmastream.pr.mqtt.YhMqttClient$1" map="1"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient$1" name="this$0" map="b"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient$1" name="void onFailure(org.eclipse.paho.client.mqttv3.IMqttToken, java.lang.Throwable)" map="onFailure"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient$1" name="void onSuccess(org.eclipse.paho.client.mqttv3.IMqttToken)" map="onSuccess"/>
  <class name="com.sigmastream.pr.mqtt.YhMqttClient" map="d"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="client" map="b"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="password" map="c"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="clean" map="d"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="_log" map="e"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="userName" map="f"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="conOpt" map="g"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="callbackListener" map="h"/>
  <field class="com.sigmastream.pr.mqtt.YhMqttClient" name="brokerUrl" map="i"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="org.eclipse.paho.client.mqttv3.MqttAsyncClient access$000(com.sigmastream.pr.mqtt.YhMqttClient)" map="b"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="boolean connect(java.lang.String, int, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer)" map="b"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="boolean subscribe(java.lang.String, int)" map="b"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="void disconnect()" map="b"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="boolean publish(java.lang.String, int, byte[], boolean)" map="b"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="org.eclipse.paho.client.mqttv3.MqttConnectOptions access$100(com.sigmastream.pr.mqtt.YhMqttClient)" map="c"/>
  <method class="com.sigmastream.pr.mqtt.YhMqttClient" name="boolean isConnected()" map="c"/>
  <class name="com.sigmastream.pr.mqtt.MQTTPublisher" map="e"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="password" map="b"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="_remoteIp" map="c"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="_remotePort" map="d"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="context" map="e"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="cleanSession" map="f"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="maxInflight" map="g"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="autoReconnect" map="h"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="yhMQTTClient" map="i"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="userName" map="j"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="ssl" map="k"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="_log" map="l"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="connectionTimeout" map="m"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="brokerType" map="n"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="assetid" map="o"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="msgRetained" map="p"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="qos" map="q"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="clientId" map="r"/>
  <field class="com.sigmastream.pr.mqtt.MQTTPublisher" name="connected" map="s"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="java.util.Map getContext()" map="b"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="boolean connect()" map="c"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="void publishMessage(com.sigmastream.pr.beans.DataPayload)" map="b"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="void messageArrived(java.lang.String, org.eclipse.paho.client.mqttv3.MqttMessage)" map="messageArrived"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="void publishMessage(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="void deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryToken)" map="deliveryComplete"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="void connectionLost(java.lang.Throwable)" map="connectionLost"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="boolean isStopped()" map="d"/>
  <method class="com.sigmastream.pr.mqtt.MQTTPublisher" name="void stop()" map="e"/>
  <package name="com.sigmastream.pr.utils" map="e"/>
  <class name="com.sigmastream.pr.utils.FileChangeTimer" map="b"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="dfw" map="b"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="dir" map="c"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="ADD" map="d"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="filesArray" map="e"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="DELETE" map="f"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="_log" map="g"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="path" map="h"/>
  <field class="com.sigmastream.pr.utils.FileChangeTimer" name="MODIFY" map="i"/>
  <method class="com.sigmastream.pr.utils.FileChangeTimer" name="void onChange(java.io.File, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.FileChangeTimer" name="void run()" map="run"/>
  <class name="com.sigmastream.pr.utils.AppProperties$1" map="1"/>
  <field class="com.sigmastream.pr.utils.AppProperties$1" name="this$0" map="j"/>
  <method class="com.sigmastream.pr.utils.AppProperties$1" name="void onChange(java.io.File, java.lang.String)" map="b"/>
  <class name="com.sigmastream.pr.utils.AppProperties" map="c"/>
  <field class="com.sigmastream.pr.utils.AppProperties" name="instance" map="b"/>
  <field class="com.sigmastream.pr.utils.AppProperties" name="contextPath" map="c"/>
  <field class="com.sigmastream.pr.utils.AppProperties" name="_log" map="d"/>
  <field class="com.sigmastream.pr.utils.AppProperties" name="configuration" map="e"/>
  <field class="com.sigmastream.pr.utils.AppProperties" name="isAutoConfigLoadStarted" map="f"/>
  <method class="com.sigmastream.pr.utils.AppProperties" name="void startFileChangeListener()" map="b"/>
  <method class="com.sigmastream.pr.utils.AppProperties" name="void loadAppConfig(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.AppProperties" name="com.sigmastream.pr.utils.AppProperties getInstance()" map="c"/>
  <method class="com.sigmastream.pr.utils.AppProperties" name="java.util.Properties getConfig()" map="d"/>
  <class name="com.sigmastream.pr.utils.DataStreamSocketAnalyzer$ListIteratorP" map="_b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer$ListIteratorP" name="com.hazelcast.function.SupplierEx supplier()" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer$ListIteratorP" name="boolean tryProcess(int, java.lang.Object)" map="tryProcess"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer$ListIteratorP" name="com.hazelcast.jet.core.Processor lambda$supplier$da1f9e94$1()" map="c"/>
  <class name="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" map="d"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void startGenerator(java.io.File)" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="double lambda$main$fc94c967$1(java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void lambda$startGenerator$1(java.util.concurrent.atomic.AtomicInteger, com.google.common.util.concurrent.AtomicDouble, io.netty.channel.Channel)" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void lambda$null$0(java.util.concurrent.atomic.AtomicInteger, com.google.common.util.concurrent.AtomicDouble, io.netty.channel.Channel)" map="c"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void lambda$xstartGenerator$2(io.netty.channel.Channel)" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void xstartGenerator(java.lang.String, int)" map="b"/>
  <method class="com.sigmastream.pr.utils.DataStreamSocketAnalyzer" name="void startGenerator(java.lang.String, int)" map="c"/>
  <class name="com.sigmastream.pr.utils.DefaultOperations" map="e"/>
  <class name="com.sigmastream.pr.utils.UnitOfMeasurementReader" map="f"/>
  <field class="com.sigmastream.pr.utils.UnitOfMeasurementReader" name="_log" map="b"/>
  <method class="com.sigmastream.pr.utils.UnitOfMeasurementReader" name="java.util.List loadChannels()" map="b"/>
  <method class="com.sigmastream.pr.utils.UnitOfMeasurementReader" name="boolean lambda$loadChannels$0(java.lang.String[], com.sigmastream.pr.beans.UnitOfMeasurement)" map="b"/>
  <class name="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" map="_b"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="this$0" map="b"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="tm" map="c"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="host" map="d"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="ks" map="e"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)" map="checkServerTrusted"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)" map="checkClientTrusted"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler$SavingTrustManager" name="java.security.cert.X509Certificate[] getAcceptedIssuers()" map="getAcceptedIssuers"/>
  <class name="com.sigmastream.pr.utils.SSLCertificateHandler" map="g"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="HEXDIGITS" map="b"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="keyStore" map="c"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="sslSocketFactory" map="d"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="_log" map="e"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="loadedCerts" map="f"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="printCerts" map="g"/>
  <field class="com.sigmastream.pr.utils.SSLCertificateHandler" name="sslContext" map="h"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="com.sigmastream.logger.log4j.Logger access$100()" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="boolean access$000(com.sigmastream.pr.utils.SSLCertificateHandler)" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="java.security.KeyStore getKeyStore()" map="c"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="void printCerts(java.security.cert.X509Certificate[])" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="javax.net.ssl.SSLContext getSslContext()" map="d"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="java.lang.String toHexString(byte[])" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="void updateKeystore(char[], java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="void access$200(com.sigmastream.pr.utils.SSLCertificateHandler, java.security.cert.X509Certificate[])" map="b"/>
  <method class="com.sigmastream.pr.utils.SSLCertificateHandler" name="javax.net.ssl.SSLSocketFactory getSslSocketFactory()" map="e"/>
  <class name="com.sigmastream.pr.utils.LicenseKeyValidator" map="h"/>
  <field class="com.sigmastream.pr.utils.LicenseKeyValidator" name="_log" map="b"/>
  <field class="com.sigmastream.pr.utils.LicenseKeyValidator" name="to" map="c"/>
  <field class="com.sigmastream.pr.utils.LicenseKeyValidator" name="from" map="d"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="boolean validate()" map="b"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="void licenseFileUpdater(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="java.lang.String generateKey()" map="c"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="java.lang.String decodeLicenseKey(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="java.lang.String encodeLicenseKey(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="java.util.TreeMap getAvailableNInterfaces()" map="d"/>
  <method class="com.sigmastream.pr.utils.LicenseKeyValidator" name="boolean validateLicense(java.lang.String)" map="e"/>
  <class name="com.sigmastream.pr.utils.UOMDictionary" map="i"/>
  <field class="com.sigmastream.pr.utils.UOMDictionary" name="UNITLESS" map="b"/>
  <field class="com.sigmastream.pr.utils.UOMDictionary" name="uomDictionary" map="c"/>
  <field class="com.sigmastream.pr.utils.UOMDictionary" name="_log" map="d"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="boolean checkIsUOMBySymbol(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="void init(java.util.List)" map="b"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="java.lang.Object getUOMConvertedValue(java.lang.String, java.lang.String, java.lang.Object)" map="b"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="com.sigmastream.pr.beans.UnitOfMeasurement getUnitOfMeasurementBySymbol(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="double converToCountableValue(java.lang.String)" map="d"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="void lambda$getUnitOfMeasurementByIsSIAndCategory$0(java.util.List, com.sigmastream.pr.beans.UnitOfMeasurement)" map="b"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="java.util.List getUnitOfMeasurementByIsSIAndCategory(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="java.lang.String checkIsSiUOMBySymbol(java.lang.String)" map="e"/>
  <method class="com.sigmastream.pr.utils.UOMDictionary" name="double getBoverC(java.lang.String)" map="f"/>
  <class name="com.sigmastream.pr.utils.FileChangeListener" map="j"/>
  <field class="com.sigmastream.pr.utils.FileChangeListener" name="filter" map="b"/>
  <method class="com.sigmastream.pr.utils.FileChangeListener" name="boolean accept(java.io.File)" map="accept"/>
  <class name="com.sigmastream.pr.utils.BcTimestamp" map="k"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="MilliMultiplier" map="b"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="rtnTs" map="c"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="nano0" map="d"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="sec" map="e"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="NanoMuliplier" map="f"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="nanoElapsed" map="g"/>
  <field class="com.sigmastream.pr.utils.BcTimestamp" name="MicroMultiplier" map="h"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void setTimeNano(long)" map="b"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void setDate(java.util.Date)" map="b"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void parse(java.lang.String, java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void setSec(long)" map="c"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="java.lang.Long getTimeNano()" map="b"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="java.util.Map getServerTimeZone()" map="c"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="long getTime()" map="d"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="long getNanoElapsed()" map="e"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void setNanoElapsed(long)" map="d"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="long getSec()" map="f"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="java.util.Date getDate()" map="g"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void parse(java.lang.String)" map="b"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="java.lang.String toString(java.lang.String)" map="c"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="void main(java.lang.String[])" map="b"/>
  <method class="com.sigmastream.pr.utils.BcTimestamp" name="java.lang.String toString()" map="toString"/>
  <class name="com.sigmastream.pr.beans.UnitOfMeasurement$4" map="4"/>
  <class name="com.sigmastream.pr.beans.UnitOfMeasurement$3" map="3"/>
  <class name="com.sigmastream.pr.beans.UnitOfMeasurement$2" map="2"/>
  <class name="com.sigmastream.pr.beans.UnitOfMeasurement$1" map="1"/>
  <class name="com.sigmastream.pr.beans.BackfillJobVO$1" map="1"/>
</map>
<!--

<adjust replaceContents="true">
  <resource name="log4j.properties"/>
  <resource name="unit_of_measurement.csv"/>
</adjust>
-->
</yguard>
